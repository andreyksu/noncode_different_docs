.include "m8def.inc"

; Start macro.inc ===============================================================================================================================================
								
;= End macro.inc  ===============================================================================================================================================
 
 
; RAM ===========================================================================================================================================================
		.DSEG
; FLASH =========================================================================================================================================================
		.CSEG

.ORG 0x000
	RJMP 	Inital_Restart	
.ORG INT0addr
	RETI
.ORG INT1addr
	RETI
.ORG OC2addr
	RETI
.ORG OVF2addr
	RETI
.ORG ICP1addr
	RETI
.ORG OC1Aaddr
	RJMP 	Timer1
.ORG OC1Baddr
	RETI
.ORG OVF1addr
	RETI
.ORG OVF0addr
	RETI
.ORG SPIaddr
	RETI
.ORG URXCaddr
	RETI
.ORG UDREaddr
	RETI
.ORG UTXCaddr
	RETI
.ORG ADCCaddr
	RETI
.ORG ERDYaddr
	RETI
.ORG ACIaddr
	RETI
.ORG TWIaddr
	RETI
.ORG SPMRaddr
	RETI


Inital_Restart:
		;-----------------------------------------------------------------------------------------------------------
		;настройка стека
		;-----------------------------------------------------------------------------------------------------------
		LDI		R16,Low(RAMEND)
		OUT		SPL,R16

		LDI		R16,High(RAMEND)
		OUT		SPH,R16
		;-----------------------------------------------------------------------------------------------------------
		;настройка порта B
		;-----------------------------------------------------------------------------------------------------------
		LDI		R16, 0b00000001		; первый вывод порта B на выход.
		OUT		DDRB, R16

		LDI		R16, 0b00000001		; пока на порт B все в 0ль кроме нужного. Именно интересен первый вывод. Так как только его на выход
		OUT 	PortB,R16
		;-----------------------------------------------------------------------------------------------------------
		;настройка таймера 1 т.е. тот, что 16-битный
		;-----------------------------------------------------------------------------------------------------------
		LDI		R16, (1<<WGM12|1<<CS12)	; WGM12 - cброс таймера по совпадению со значением OCR1A(HL)
		OUT		TCCR1B, R16				; CS12 - пределитель устанавилваем на 0b100 т.е. по таблице это 256
		
		LDI		R16, 0b01111010		; устанавливаем до какого числа считать.
		OUT		OCR1AH, R16			; Если у нас частота 8 000 000 Гц то делителем на 256 получаем 31250.
		LDI		R16, 0b00010010		; вот до этого значения и нужно считать. В бинарном 0111 1010 0001 0010 вот и загружаем первую и вторую часть
		OUT		OCR1AL, R16			; эти значения будут сравниваться с числом регистра TCNTn

		LDI		R16, (1<<OCIE1A)	; устанавливаем бит разрешения прерывания 1го счетчика по совпадению OCR1A(H и L)
		OUT		TIMSK, R16			; данный флаг снимается автоматом, когда уходим по вектору. Где то в др. перефирии нужно снимать путем считывания из порта итд.
		;-----------------------------------------------------------------------------------------------------------
		;разрешаем глобальные прерывания
		;-----------------------------------------------------------------------------------------------------------
		SEI							; разрешаем глобальные прерывания
		;-----------------------------------------------------------------------------------------------------------
		;пошли на основной цикл работы
		;-----------------------------------------------------------------------------------------------------------		
		RJMP	MainLoop

MainLoop: 
		NOP
		RJMP MainLoop

Timer1:
		PUSH	R16
		IN		R16, SREG
		PUSH	R16		 
 
		IN		R16, PortB
		SBRS 	R16, 0		
		RJMP	Load1
		RJMP	Load0


Load1:	
		LDI		R16, 0b00000001
		OUT 	PortB, R16
		RJMP	Exit

Load0:	
		LDI		R16, 0b00000000
		OUT 	PortB, R16	
		RJMP	Exit	
 
Exit:	
		POP	R16
		OUT	SREG, R16
		POP	R16
		RETI

; EEPROM ==================================================
			.ESEG			; Сегмент EEPROM

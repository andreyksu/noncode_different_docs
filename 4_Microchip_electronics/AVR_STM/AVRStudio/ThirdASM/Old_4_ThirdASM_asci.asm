; UART - всегда асинхронная передача. В контроллере USART по этому устанавливаем бит на UART. 
; USART - ножки RXD, TXD, XCK(для UART не нужна), GND
; 1 бит передается в равные промежутки времени (1бод=1бит/с) т.е. если у нас скорость 9600. То при 1 стартовом бите и 1 стоповом бите и теле 8 бит т.е. итого 10бит на 8 бит информации. Получаем 9600/10=960 байт в секунду
; Для чтения и записи нунжо обращаться к регистру UDR. Чтение производится из буфера приемника а запись из буфера передачика. При считывании из UDR состояние рег. меняется. Т.е. прочитать можно лишь 1 раз.
; При работе с компом подключаем на крест, RX-TX, TX-RX.
;
.include "m8def.inc"
;
.equ 	XTAL = 16000000 	
.equ 	baudrate = 9600  
.equ 	bauddivider = XTAL/(16*baudrate)-1	;UBRR = ( fCK /( BAUD * 16 ) ) — 1 => (16 000 000/(9600*16))-1

; Start macro.inc ===============================================================================================================================================
								
;= End macro.inc  ===============================================================================================================================================
 
 
; RAM ===========================================================================================================================================================
		.DSEG
; FLASH =========================================================================================================================================================
		.CSEG

.ORG 0x000
	RJMP 	Inital_Restart	
.ORG INT0addr
	RETI
.ORG INT1addr
	RETI
.ORG OC2addr
	RETI
.ORG OVF2addr
	RETI
.ORG ICP1addr
	RETI
.ORG OC1Aaddr
	RETI
.ORG OC1Baddr
	RETI
.ORG OVF1addr
	RETI
.ORG OVF0addr
	RETI
.ORG SPIaddr
	RETI
.ORG URXCaddr
	RJMP	RX_OK
.ORG UDREaddr
	RETI
.ORG UTXCaddr
	RJMP	TX_OK
.ORG ADCCaddr
	RETI
.ORG ERDYaddr
	RETI
.ORG ACIaddr
	RETI
.ORG TWIaddr
	RETI
.ORG SPMRaddr
	RETI


Inital_Restart:
		;-----------------------------------------------------------------------------------------------------------
		;настройка стека
		;-----------------------------------------------------------------------------------------------------------
		LDI		R16,Low(RAMEND)
		OUT		SPL,R16

		LDI		R16,High(RAMEND)
		OUT		SPH,R16
		;-----------------------------------------------------------------------------------------------------------
		;настройка порта B
		;-----------------------------------------------------------------------------------------------------------
		LDI		R16, 0b00000011		; первый и второй выводы порта B на выход.
		OUT		DDRB, R16

		LDI		R16, 0b00000000		; К 0 все выводы
		OUT 	PortB,R16

		;-----------------------------------------------------------------------------------------------------------
		;настройка UART
		;-----------------------------------------------------------------------------------------------------------
		LDI		R16, 0b00000000		; Этот регистр СОСТОЯНИЙ приема/передачи данных.
		OUT		UCSRA, R16			; При появлении 1 в RXC и TXC сразу же возникает прерывание, если оно разрешено. Можно конечно читать в цикле - но это не True. Так, что раб. в режиме прерываний.
									; U2X - делитель частоты 0=коэффициенту 16 и 1=коэффициенту 8 (т.е. если 8 то удваеваем скорость передачи, используется только при асинхронном режиме работы, мне это не нужно.)
									; RXC - встает когда непрочитанный байт влезет в UDR. Данный флаг устанавливается в единицу когда в регистре данных появился новый байт.
									; TXC - когда пришел стоп-бит, а новое значение в UDR не поступило(т.е. после прихода всех битов). Установится в единицу когда все биты убегут из сдвигового регистра в линию, а в регистре данных ничего пока нет.
									; 

		LDI		R16, (1<<RXCIE)|(1<<TXCIE)|(0<<UDRIE)|(1<<RXEN)|(1<<TXEN)
		;LDI		R16, 0b1111100
		OUT		UCSRB, R16				; Это регистр прерываний + разрешение на прием и передачу даныных и кол. бит в пакете.
										; Разрешили прерываниие по окончании:
										; 7(1)-приема и 6(1)-передачи (т.е. при окончании передачи всех битов)
										; 5(1)-опустошения регистра данных т.е. данные отправлены можно еще пихнуть в UDR. (Но при этом я не обрабатываю его)
										; Разрешили 4(1)-прием и 3(1)-передачу данных.
										; 2-бит - устанавливатеся совместо с битами UCSZ1 и UCSZ0 регистра UCSRC.  Определяет кол. бит данных в кадрах
										; биты  прерывания скидываются при чтении UDR или впихивании в UDR.

		LDI		R16, 0b10000110			; Задает режим работы синхронный/асинхронный, контроля четности итд
		OUT		UCSRC, R16				; 7(0)-UCSRC или UBRR - где 0 UBRR, 6(0)-асинхронный, 5-0 и 4-0 режим четности - нет, 3-0-один стоп бит.

		LDI		R16, High(bauddivider)	; определяет скрость приема/передачи
		OUT		UBRRH, R16

		LDI		R16, Low(bauddivider)
		OUT		UBRRL, R16

		;-----------------------------------------------------------------------------------------------------------
		;разрешаем глобальные прерывания
		;-----------------------------------------------------------------------------------------------------------
		SEI							; разрешаем глобальные прерывания
		;-----------------------------------------------------------------------------------------------------------
		;пошли на основной цикл работы
		;-----------------------------------------------------------------------------------------------------------		
		RJMP	MainLoop

MainLoop: 
		NOP
		RJMP MainLoop

RX_OK:									; проверил, работает, но второй порт PB всегда горит(светодиод), так как отправка происходит мгновенноп после получения данных.
										; Нужно перед отправкой сделать задержку или еще что-то, что бы было визуально видно. Но это не хорошо, нужно через прерывания таймера?
										; Можно сделать на четный прием горит, на нечетный тухнет, через логическую проверку проверку бита.
		PUSH	R16
		IN		R16, SREG
		PUSH	R16		 
 
		IN		R16,UDR
		SUBI	R16, (-1)
		OUT		UDR, R16

		RJMP	LightReceipt

TX_OK:
		PUSH	R16
		IN		R16, SREG
		PUSH	R16	

		RJMP	LightShip
		

LightReceipt:	
		LDI		R16, 0b00000001
		OUT 	PortB, R16
		RJMP	Exit

LightShip:	
		LDI		R16, 0b00000010
		OUT 	PortB, R16	
		RJMP	Exit	
 
Exit:	
		POP	R16
		OUT	SREG, R16
		POP	R16
		RETI

; EEPROM ==================================================
			.ESEG			; Сегмент EEPROM

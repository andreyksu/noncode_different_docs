https://pdst.narod.ru/_20_el_uch/ost_wpd_01/part00.html
http://www.habarov.spb.ru/
https://math.gsu.by/wp-content/uploads/courses/networks/r3.3.html

Итак, записи таблицы мартрутов точно определяют:
    - Место назначения (сетевой адрес/маска сети).
    - Какой маршрутизатор (шлюз) использовать для посылки пакетов к месту назначения.
    - Какой интерфейс использовать для посылки пакетов к месту назначения.
    
    route ADD сетевой_адрес MASK сетевая_маска шлюз
            route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 if 0x3
            route add 10.41.0.0 mask 255.255.0.0 10.27.0.1 metric 7
            route -p add 10.41.0.0 mask 255.255.0.0 10.27.0.1
            route delete 10.41.0.0 mask 255.255.0.0
            route change 10.41.0.0 mask 255.255.0.0 10.27.0.25
            
            
У меня на компьютере 2 интерфейса:
    Сетевая карта с IP-адресом 192.168.0.4.
    Модем с интерфейсом PPP и IP-адресом 203.96.10.51.
    
    Адрес 0.0.0.0 в колонке шлюза (Gateway) обозначает, что адрес назначения доступен без маршрутизации.
    IP-адрес 0.0.0.0 с маской 0.0.0.0 означает любой IP-адрес везде.
        Сетевой адрес 0.0.0.0 и маска сети 0.0.0.0 это обозначение маршрута по умолчанию (default route). Это тот маршрут, куда отправляется трафик, для которого явно не прописан другой маршрут.
    192.168.0.255 - широковещательный адрес для рассылки широковещательных пакетов по нашей сети. 
    203.96.10.255 - широковещательный адрес для рассылки широковещательных пакетов по сегменту сети вашего провайдера.
    224.0.0.0 - другой широковещательный адрес и на вашу сеть, и на сеть провайдера. Результатом действия двух записей с сетевым адресом 224.0.0.0 будет широковещательная рассылка пакетов по вашей сети и сети провайдера.
    255.255.255.255 - глобальный широковещательный адрес.
    Адреса 244.0.0.0 - тоже специальные зафиксированные адреса для широкого вещания
    
    В случае, когда там написано "On-link", имеется в виду, что никаких маршрутизаторов не нужно - адрес и так находится в прямой досягаемости.
    
    Windows
        route print
    Unix
        netstat -rn
    Linux
        route -n
        ip route  или ip r s
        
        
MTU (Maximum Transmission Unit; максимальная единица передачи)
    MTU = MSS + заголовок IP + заголовок ICMP
    Для поиска MSS(Maximum Segment Size) в Windows можно использовать "ping www.yandex.ru -f -l 1450" и увеличивать размер пакета пока не начнётся "Требуется фрагментация пакета." Здесь -f запрет фрагментации.

    MTU текущего подключения в Windows 
        netsh interface ipv4 show subinterfaces

TCP/IP и OSI разрабатывались параллельно и независимо, по этой причине не соответствуют друг другу как 1:1. В TCP/IP нет части уровней, а часть можно соотнести:

Уровни OSI
7.	Прикладной          - HTTP, SMTP итд
6.	Представительский   - Нет в TCP/IP
5.	Сеансовый           - Нет в TCP/IP
4.	Транспортный        - предназначен для доставки данных. При этом неважно, какие данные передаются, откуда и куда, то есть, он предоставляет сам механизм передачи. Блоки данных он разделяет на фрагменты, размеры которых зависят от протокола: короткие объединяет в один, а длинные разбивает. Протоколы этого уровня предназначены для взаимодействия типа точка-точка. Пример: TCP, UDP, SCTP.
3.	Сетевой(L3)             - (IP) предназначается для определения пути передачи данных (маршрутизация). Отвечает за трансляцию логических адресов (IP) и имён в физические(MAC), определение кратчайших маршрутов, маршрутизацию, отслеживание неполадок и заторов в сети. На этом уровне работает такое сетевое устройство, как маршрутизатор. 
        - В пределах семантики иерархического представления модели OSI Сетевой уровень отвечает на запросы обслуживания от Транспортного уровня и направляет запросы обслуживания на Канальный уровень.
        - Сетевой уровень работает без гарантии доставки и установления соединения.

2.	Канальный(L2)           - Здесь появляются термины «фрейм» и «MAC-адрес».
1.	Физический(L1)          - Кабели/сигналы/вльты

- На прикладном уровне находится приложение.
- На транспортном уровне работают UDP и TCP.
- Сетевой уровень представлен сетевым (аппаратным) интерфейсом.
- Аппаратный уровень - это физическая сеть.

Протоколы Internet сетевого уровня обеспечивают соединение между двумя компьютерами в сети.
    Другими словами, этот уровень отвечает за маршрутизацию TCP/IP. Эти протоколы принимают запросы на отправку пакетов (содержащие адрес получателя) от транспортного уровня, преобразуют пакеты в дейтаграммы и отправляют их на уровень сетевого интерфейса для дальнейшей обработки.

    - Протокол преобразования адресов
        Базовый протокол сетевого уровня - это Протокол преобразования адресов (ARP). ARP выполняет динамическое преобразование IP-адресов в уникальные физические адреса хостов локальных сетей.
    - Протокол управляющих сообщений Internet
        Вторым протоколом сетевого уровня является Протокол управляющих сообщений Internet (ICMP). ICMP - обязательная часть любой реализации IP. ICMP отправляет сообщения об ошибках и управляющие сообщения протоколу IP.
    - Протокол Internet (IP)
        Третий протокол сетевого уровня в семействе TCP/IP - Протокол Internet (IP). Он доставляет пакеты по сети Internet без гарантии доставки и без установления соединения.

            Протокол IP взаимодействует с протоколами уровня сетевого интерфейса. Данные передаются по физическим соединениям в виде кадров, содержащих заголовок и данные. В заголовке указываются адреса отправителя и получателя. В IP данные передаются в виде IP-дейтаграмм, формат которых аналогичен формату кадра. У дейтаграммы также есть заголовок, в котором содержатся IP-адреса отправителя и получателя.

Сетевой шлюз конвертирует протоколы одного типа физической среды в протоколы другой физической среды (сети). Например, при соединении локального компьютера с сетью Интернет обычно используется сетевой шлюз.
    - Основная задача сетевого шлюза — конвертировать протокол между сетями.
        - Сетевой шлюз — это точка сети, которая служит выходом в другую сеть.
        - В крупных сетях сервер, работающий как сетевой шлюз, обычно интегрирован с прокси-сервером и межсетевым экраном. Сетевой шлюз часто объединен с роутером, который управляет распределением и конвертацией пакетов в сети.
    - Роутер(маршрутизатор) сам по себе принимает, проводит и отправляет пакеты только среди сетей, использующих одинаковые протоколы.
    - Сетевой шлюз может с одной стороны принять пакет, сформатированный под один протокол (например Apple Talk) и конвертировать в пакет другого протокола (например TCP/IP) перед отправкой в другой сегмент сети.

Маршрутизатор (он же — роутер) является одним из примеров аппаратных сетевых шлюзов.

Совершенно верно, просто шлюз это литературный первод английского слова gateway, gate и т.д.

Маршрутизаторы осуществляют выбор оптимального маршрута для каждого пакета с целью избежания чрезмерной нагрузки отдельных участков сети и обхода поврежденных участков. Они применяются, как правило, в сложных разветвленных сетях, имеющих несколько маршрутов между отдельными абонентами. Маршрутизаторы не преобразуют протоколы нижних уровней, поэтому они соединяют только сегменты одноименных сетей.
Маршрутизаторы работают на третьем уровне модели OSI, так как они анализируют не только MAC-адреса пакета, но и IP-адреса, то есть более глубоко проникают в инкапсулированный пакет. И опять же это может быть комп с несколькими сетевухами или железка с туевой хучей портов.

Мосты (bridge) служат для объединения в одну сеть несколько разнородных сетей с разными протоколами обмена нижнего уровня, в частности, с разными форматами пакетов, методами кодирования, скоростью передачи и т.д. В результате их применения сложная и неоднородная сеть, содержащая в себе различные сегменты, с точки зрения пользователя выглядит самой обычной сетью. Обеспечивается прозрачность сети для протоколов высокого уровня. Все они гораздо дороже, чем концентраторы, так как от них требуется довольно сложная обработка информации. Сейчас практически производство мостов сошло на нет, так как их функции практически есть во всех нормальных маршрутизаторах, и даже комутаторах, т.е. в железке есть как оптические для FDDI так и обычные ethernet порты с возможностью замены на другие. Кстати в основном мост это железная бандурина.
    - Сетевой мост (также бридж с англ. bridge) — сетевое устройство второго (канального) уровня сетевой модели OSI. Предназначен для объединения сегментов (подсетей) компьютерной сети в единую сеть.


Комутатор работает на втором уровне OSI
    В отличии от концентратора, передает непосредственно получателю (исключение является широковещательный трафик, или если получатель еще не известен т.е. порт не определён)

    Комутатор хранит в памяти таблицу порт коммутатора и MAC подключённого ПК

Мост - пересылают сообщение не всем устройствам сети, а только в тот сегмент сети, в котором находится получатель. Мост это устройства, разделяющее сети. Они работают с физическими адресами станций на канальном уровне.
    Мост опрашивает устройства и записывает их адреса к себе в память.

    Работая в сегменте 1 мост получает все кадры этого сегмента. ингорирует кадры. адресованные станциям сегмента 1, а кадры, адресованные станциям сегмента 2, передаёт на соответствующий порт.

А марштуритазот на третьем уровне OSI


------------------------------------
Разбиение на подсети

Пример 2
Возьмём более сложный пример. У нас есть сеть 192.168.128.128/25 и нам надо во что бы то ни стало получить 10 подсетей. Посчитаем, сколько бит нам надо выделить, чтобы в них влезло 10 подсетей. Для этого найдём минимальную степень двойки, которая была бы больше или равна 10 — это 16, то есть 24. Таким образом, мы можем выделить 4 бита и получим 16 подсетей. Префикс был 25, а стал 25+4=29. Какого же размера окажутся полученные подсети? В хостовой части останется 32-29=3 бита, то есть сети будут на 23-2=8-2=6 IP адресов. Если нас устраивают такие маленькие сети, то давайте вычислим их.

Исходный адрес имеет вид 11000000.10101000.10000000.1|0000000, после выделения подсетей получим адрес 11000000.10101000.10000000.1|0000|000 в котором мы можем расписать все комбинации для выделенных четырёх бит. Получаются сети:

11000000.10101000.10000000.1|0000|000 – 192.168.128.128/29
11000000.10101000.10000000.1|0001|000 – 192.168.128.136/29
11000000.10101000.10000000.1|0010|000 – 192.168.128.144/29
11000000.10101000.10000000.1|0011|000 – 192.168.128.152/29
11000000.10101000.10000000.1|0100|000 – 192.168.128.160/29
11000000.10101000.10000000.1|0101|000 – 192.168.128.168/29
11000000.10101000.10000000.1|0110|000 – 192.168.128.176/29
11000000.10101000.10000000.1|0111|000 – 192.168.128.184/29
11000000.10101000.10000000.1|1000|000 – 192.168.128.192/29
11000000.10101000.10000000.1|1001|000 – 192.168.128.200/29
11000000.10101000.10000000.1|1010|000 – 192.168.128.208/29
11000000.10101000.10000000.1|1011|000 – 192.168.128.216/29
11000000.10101000.10000000.1|1100|000 – 192.168.128.224/29
11000000.10101000.10000000.1|1101|000 – 192.168.128.232/29
11000000.10101000.10000000.1|1110|000 – 192.168.128.240/29
11000000.10101000.10000000.1|1111|000 – 192.168.128.248/29
Благодаря тому что мы нигде не меняли ни одного бита левее первой вертикальной черты (исходного префикса) мы точно не вылезли за пределы предоставленной нам исходной сети. Как видно, этот пример, в отличие от предыдущего не так просто посчитать в уме, надо смотреть на адреса в двоичном виде.


---------------------------------
МАС-IP

Разница между IP и MAC-адресами
Неподготовленный человек часто путает ip и mac адреса и не может чётко объяснить, где используются первые, а где вторые. На самом деле, они используются одновременно, но имеют разное назначение и смысл. Чтобы разобраться с этим, требуется вначале представлять себе структуру эталонной модели OSI. IP-адресация – это адресация третьего уровня, и сам по себе адрес является иерархическим, то есть часть адреса обозначает сеть адресата, а часть – идентификатор хоста внутри сети.

Например, если есть адрес 192.168.1.2 с маской 255.255.255.0, то надо понимать, что 192.168.1.0 – это сеть, а 2 – это хост внутри этой сети. На самом деле, с точки зрения маршрутизаторов не имеет значения эта последняя двойка. Самое главное – доставить пакет в нужную сеть, а последний маршрутизатор на этом пути уже будет смотреть, как найти хост с номером два.

MAC-адрес (адрес второго уровня), напротив, линейный, то есть отдельные компоненты адреса не имеют отдельного смысла (на самом деле, есть часть MAC-адреса, по которой можно определить производителя устройства, но в данном контексте это не имеет значения). Так вот, глядя на два MAC адреса можно сказать только одно: разные они или одинаковые. Нельзя понять, в одной они сети находятся или в разных.

Таким образом, если мы, например, знаем MAC-адрес удалённого сервера, то это нам никак не поможет узнать, как отправить на него пакет, в силу отсутствия в адресе информации о сети адресата. MAC-адреса используются для идентификации разных устройств в пределах одной локальной сети. Приведём пример типичного использования MAC-адресов: есть сеть, в ней несколько компьютеров подключены к общему хабу. Один компьютер отправляет сообщение другому компьютеру, указывая в заголовке второго уровня MAC-адрес получателя. Все участники в сети получают фрейм. Тот хост, чей адрес указан принимает содержимое, а остальные видят, что это не им, и уничтожают фрейм. В случае использования коммутатора вместо хаба, процедура примерно такая же за исключением того, что коммутатор проводит некоторую фильтрацию по MAC-адресам, которая в данном контексте нам не важна.

Итого, ip-адрес имеет стратегическое значение, указывая, куда глобально надо передать пакет, mac же имеет тактическое значение, в нём содержится информация, какому ближайшему устройству (из нашей же сети) нужно передать информацию.

Чтобы было понятнее, давайте рассмотрим пример: клиент находится в одной сети, а сервер – в другой. Между ними два маршрутизатора.

Пример использования IP и MAC адресов
Для простоты будем считать, что во всех сетях маски подсети 255.255.255.0. Клиент отправляет запрос на сервер, в качестве шлюза по умолчанию, на нём прописан ip адрес ближайшего маршрутизатора – 192.168.1.1.

PC(192.168.1.10/ААА) --- R1 (192.168.1.1/BBB - 192.168.2.1/CCC) --- R2 (192.168.2.2/DDD - 192.168.3.1/EEE) --- Server0 (192.168.3.50/FFF)

- Клиент собирается отправить пакет на адрес 192.168.3.50, он сравнивает адрес сервера со своим и видит, что они находятся в разных сетях (сервер в 192.168.3.0, а клиент – в 192.168.1.0). Раз сети разные, значит нет смысла искать MAC сервера (ведь он нужен только для передачи в пределах одной сети) вместо этого нужно отправить пакет на MAC-адрес шлюза (R1), чтобы он уже дальше разбирался как доставить этот пакет.
- Клиент создаёт пакет, указывая в нём в качестве IP отправителя свой адрес – 191.168.1.10, а в качестве IP получателя адрес сервера – 192.168.3.50.
- Пакет заворачивается во фрейм, в котором MAC-адрес отправителя AAA, а в качестве MAC-адреса получателя стоит адрес шлюза – BBB.
- R1 получает фрейм, глядя на MAC BBB понимает, что фрейм ему, достаёт из него пакет и смотрит свою таблицу маршрутизации. В ней видно, что сеть 192.168.3.0 находится где-то справа и чтобы достичь её надо переслать фрейм маршрутизатору R2.
- R1 снова запаковывает тот же пакет но уже в новый фрейм, на этот раз MAC отправителя – CCC, MAC получателя – DDD, так как фрейм пойдёт уже по другой локальной сети где есть свой отправитель – R1 и свой получатель – R2. При этом, содержимое заголовка IP пакета не меняется – в нём по-прежнему адрес отправителя 192.168.1.10, а адрес получателя – 192.168.3.50
- R2 получает фрейм, видит что там стоит его MAC, соответственно фрейм надо распаковать и обработать. Когда фрейм декапсулирован, из него достаётся IP пакет. Глядя на адрес получателя, R2 видит, что пакет идёт в сеть 192.168.3.0, которая непосредственно подключена к R2. Таким образом, дальше не надо передавать содержимое никакому другому маршрутизатору, а надо передать непосредственному получателю.
- R2 переупаковывает всё тот же пакет в новый фрейм, ставя в качестве MAC-адреса отправителя свой адрес EEE, а в качестве адреса получателя – адрес сервера FFF. Внутри фрейма находится всё тот же пакет с теми же IP адресами, что и были на протяжении всего путешествия. Фрейм отправляется в последнюю локальную сеть 192.168.3.0
- Сервер получает фрейм, видит, что в нём его MAC (FFF), распаковывает фрейм и достаёт из него пакет, в пакете его IP (192.168.3.50) – значит можно продолжить обработку. Пакет распаковывается, из него достаются полезные данные и передаются далее внутри сервера нужному приложению для обработки.

Обратный процесс отправки ответа выглядит аналогичным образом. То есть, на протяжении всего путешествия пакета по сети, IP адреса отправителя и получателя в нём не меняются, так как именно основываясь на IP адресе получателя маршрутизатор решает, куда дальше пересылать пакет. А вот MAC-адреса меняются при каждом переходе из одной сети в другую. Каждый маршрутизатор ставит в качестве адреса отправителя свой MAC-адрес (точнее адрес того своего интерфейса, который смотри в нужную сеть, того интерфейса, с которого непосредственно будет выходить фрейм), а в качестве MAC-адреса получателя ставится адрес ближайшего устройства в следующей сети, то есть, либо следующего маршрутизатора, либо, если сеть уже достигнута, то непосредственного адресата, для которого предназначается информация в пакете.

Стоит отметить, что коммутаторы и хабы не имеют ни MAC ни IP адресов и не занимаются переупаковкой. Они находятся внутри локальной сети и поэтому в приведённом примере их наличие никак не повлияло бы на процесс передачи информации. Главное в данном примере – это именно процесс прохождения маршрутизаторов. Отличное понимание приведённого примера является обязательным условием изучения дальнейшего материала и в частности понимания процесса маршрутизации.
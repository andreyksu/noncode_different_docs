В двух словах по регламенту http://confluence.npovs.icl.kazan.ru:8080/pages/viewpage.action?pageId=21693483
- Клонируем репозиторий.
- Ждем когда появятся задачи с префиксом ‘[R50-support]’ и меткой ‘Passed_Code_Review’
- Обновляем локальный репозиторий
- Переключаемся на ветку (имя ветки соотносится с номером задачи)
- Собираем сборку
- Деплоим, проверяем.
- Если все ОК, то закрываем тикет и через Bitbucket сливаем ветку с мастером(trunk), при этом удаляя ветку.


Рабта с GIT и последовательность действий:
	1. Установка:
		+ apt-get install git
		+ apt-get install gitk
		+ apt-get install bash-completion
		
	2. Настройка:		
		+ git config --global user.name "Никоненков Андрей Владимирович"
		+ git config --global user.email "a.nikonenkov@npovs.icl.kazan.ru"
			*Команды лучше выполнять из под обычного пользователя (с root были проблемы).
			
	3. Клонирование репозитория на локальную машину(создание локального репозитория):
		+ git clone http://bb.npovs.ru:7990/scm/ncuorf/r50-sandbox.git
			*Каталог с репозиторием будет создан в тек. дир. (выполнял в дир. системного пользователя)
			*Данный репозиторий является пробным.
	
	4. Работа с репозиторием:
		Для работы с репозиторием, необходимо перейти в каталог репозитория.
		
		+ Получение обновлений:
			git pull
				* Обновит лок. репозиторий до тек. состояния центрального репозитория(в том числе и все ветки).
			
		+/- Просмотреть состояние репозитория:
			git status
				*Отобразит есть ли незакоммиченные изменения
			git diff
				*Отобразит отличие рабочей дир. от ветки/репозитория.
				
		+ Просмотреть существующие ветки:
			git branch -a
				*Звездочкой помечается текущая/активная ветка
				
		+ Переключиться на интересующею ветку:
			git chekout <branch>
				*Пример переключения в master(trunk) git chekout master, для переключения на интересующую ветку git chekout git checkout NCUORF-10286
				
		------> Собираем сборку!
				Проверяем!
				Сливаем ветку с master.
				Удаляем ветку.
				См. регламент http://confluence.npovs.icl.kazan.ru:8080/pages/viewpage.action?pageId=21693483

				
				
				
				
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Доп. команды, что могут пригодиться.				
		+/- Просмотр логов/действий:
			git log
				
		- Коммит (фиксация изменений совершенных в рабочей дир. в ветку)
			git commit -a		
			
		- Создание ветки
			git branch <имя новой ветки>
			git push --all - залить ветку в репозиторий (git push --force)
			
		
		- Залить тек. состояние ветки в центральный репозиторий.
			git push origin +NCUORF-10286
				* Заливается принудетельно (force)
		
		- Откатить все изменения:
			git clean -dfx
				* Аналог hg revert -aC
		
		- Сбросить изменения. но вроде помогает "git clean -dfx"
			git reset --hard 3c23f99483d7bb4f473b5133b803735af8a262ea
			git reset HEAD
			
		- Обновить ветку до мастера.
			git rebase origin/master
			
		- Слить ветку с мастером.
			git merge NCUORF-10286
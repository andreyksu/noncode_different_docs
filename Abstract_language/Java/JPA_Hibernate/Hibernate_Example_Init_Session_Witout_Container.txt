JPA
--------------
Справочная документация Hibernate
http://hibernate-refdoc.3141.ru/
http://hibernate-refdoc.3141.ru/ch3.Configuration

org.hibernate.cfg.Configuration cfg = new Configuration();				
															//Задаем файлы или классы, что являются описанием отображений SQL на JAVA код. Через него будем создавать неизменяемый SessionFactory. Конфигурация org.hibernate.cfg.Configuration содержит стартовые настройки, которые будут отброшены после создания SessionFactory. 
															//создаем конфигурацию cfg.addResource("Item.hbm.xml").addResource("Bid.hbm.xml");
															//cfg.addClass(org.hibernate.auction.Item.class).addClass(org.hibernate.auction.Bid.class); //Hibernate будет искать файлы отображений /org/hibernate/auction/Item.hbm.xml и /org/hibernate/auction/Bid.hbm.xml в classpath.

															//Это можжно заменить на Размещение файла с именем hibernate.properties в корне classpath. 
															//Или через передачу экземпляра java.util.Properties в Configuration.setProperties().
															//Или Включение элементов <property> в файл hibernate.cfg.xml (он объединяет в себе содержимое standelone-fill.xml и persistance.xml)
SessionFactory sessions = cfg.buildSessionFactory();
															//Можно создать несколько экземпляров, если происходит подключение к разным БД,
															
Session session = sessions.openSession(); 					
															//Создается соединение к JDBC. После запуска задачи, требующей доступа к базе данных, соединение JDBC будет получено из пула. Но перед этим нужно передать настройки соединения JDBC в Hibernate.


Пример файла hibernate.properties для c3p0

hibernate.connection.driver_class = org.postgresql.Driver
hibernate.connection.url = jdbc:postgresql://localhost/mydatabase
hibernate.connection.username = myuser
hibernate.connection.password = secret
hibernate.c3p0.min_size=5
hibernate.c3p0.max_size=20
hibernate.c3p0.timeout=1800
hibernate.c3p0.max_statements=50
hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect


 Ниже приведен пример файла hibernate.properties для сервера приложений, предоставляемого источником данных JNDI:

hibernate.connection.datasource = java:/comp/env/jdbc/test 										//Соединения JDBC, полученные из источника данных JNDI, будут автоматически участвовать в транзакциях, управляемых контейнером сервера приложений.
hibernate.transaction.factory_class = org.hibernate.transaction.JTATransactionFactory
hibernate.transaction.manager_lookup_class = org.hibernate.transaction.JBossTransactionManagerLookup
hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect

------------------------------------------
Примера файла hibernate.cfg.xml (он объединяет в себе содержимое standelone-fill.xml и persistance.xml)

<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//Hibernate/Hibernate Configuration DTD//EN"
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
  <session-factory>
    <!-- Database connection settings -->
    <property name="hibernate.connection.driver_class">oracle.jdbc.OracleDriver</property>
    <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:SE</property>
    <property name="hibernate.connection.username">scott</property>
    <property name="hibernate.connection.password">tiger</property>

    <!-- JDBC connection pool (use the built-in) -->
    <property name="hibernate.connection.pool_size">1</property>

    <!-- Echo all executed SQL to stdout -->
    <property name="show_sql">true</property>

    <!-- SQL dialect -->
    <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
    <property name="hibernate.current_session_context_class">thread</property>
    <property name="hibernate.connection.CharSet">utf8</property>
    <property name="hibernate.connection.characterEncoding">utf8</property>
    <property name="hibernate.connection.useUnicode">true</property>

    <!-- Сущность/класс User -->
    <mapping class="net.common.model.User"/>

  </session-factory>  
</hibernate-configuration>


------------------------------------------

Использование Sequence в Hibernate
	https://java-online.ru/hibernate-sequence.xhtml

Связанные сущности в Hibernate
	https://java-online.ru/hibernate-entities.xhtml
	(@OneToOne итд)


Работа с БД в Hibernate осуществляется через объект сессии типа org.hibernate.Session, который получают из экземпляра типа org.hibernate.SessionFactory. Интерфейс org.hibernate.Session является мостом между приложением и Hibernate. С помощью сессий выполняются CRUD-операции с объектами-сущностями.

--------------
Аннотация @GeneratedValue:
	Содержит два поля: стратегия и имя генгератора.

	Два генератор первычного ключа:
		@SequenceGenerator
		@TableGenerator 

	Четыре стратегии генерации первичного ключа:
		GenerationType.TABLE
		GenerationType.SEQUENCE
		GenerationType.IDENTITY
		GenerationType.AUTO


	GenerationType.TABLE:
		Использует таблицу в БД для хранения первичного ключа. Генерируется первичный ключ, через табличу в БД. Эта стратегия обычно используется совместно с аннотацией @TableGenerator.
			@TableGenerator - определяет табличу, которая генерирует первичный ключ.

				@Id
				@GeneratedValue(strategy = GenerationType.TABLE, generator = "roleSeq")
				@TableGenerator(name = "roleSeq", allocationSize = 1, table = "seq_table", pkColumnName = "seq_id", valueColumnName = "seq_count")
				private Integer id;

				а можно указать не над полем а над геттером:

    			private Integer id;

				@Id
				@GeneratedValue(strategy = GenerationType.TABLE, generator = "roleSeq")
				@TableGenerator(name = "roleSeq", allocationSize = 1, table = "seq_table", pkColumnName = "seq_id", valueColumnName = "seq_count")
				public Integer getId() {
					return id;
				}
				public void setId(Integer id) {
					this.id = id;
				}


  GenerationType.SEQUENCE
    	Рекомендуется именно этот тип.

    	Использует объект последовательности для генерации онной. Используется вместе с @SequenceGenerator - задает последовательность для генерации первичного ключа.
    	БД должна поддерживать последовательности.

    			CREATE SEQUENCE serial START 1;		//как это соотносится с initialValue - если значения различные?
    												//ну и применение в БД --- INSERT INTO distributors VALUES (nextval('serial'), 'nothing');

	    	    @Id
				@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "menuSeq")
				@SequenceGenerator(name = "menuSeq", initialValue = 1, allocationSize = 1, sequenceName = "serial")
				@Column(name="id", updatable=false, nullable=false)
				private Integer id;


				Видимо альтернативный способ:

				@Id
				@GeneratedValue(generator = "sequence-generator")
				@GenericGenerator(
					name = "sequence-generator",
					strategy = "org.hibernate.id.enhanced.SequenceStyleGenerator",
					parameters = {
						@Parameter(name = "sequence_name", value = "user_sequence"),
						@Parameter(name = "initial_value", value = "4"),
						@Parameter(name = "increment_size", value = "1")
					}
				)
				private long userId;


	GenerationType.IDENTITY
		Это когда БД сама вставляет значения. Допустим это может быть auto_increment в рамках БД.

		    @Id
    		@GeneratedValue(strategy = GenerationType.IDENTITY)
    		private Integer id;

  GenerationType.AUTO
    	Стратегия генерации первичного ключа передается механизму персистентности, а механизм персистентности выбирает одну из трех стратегий генерации первичного ключа в соответствии с базой данных.
    	Является стратегией по умолчанию.

    	    @GeneratedValue(strategy = GenerationType.AUTO)
			private Integer id;

			или 

			@GeneratedValue
			private Integer id;

			------
			If we're using the default generation type, the persistence provider will determine values based on the type of the primary key attribute. This type can be numerical or UUID.
			For numeric values, the generation is based on a sequence or table generator(т.е. это GenerationType.SEQUENCE или это GenerationType.TABLE), while UUID values will use the UUIDGenerator.

				@Id
				@GeneratedValue
				private long studentId;		//In this case, the primary key values will be unique at the database level.

				@Id
				@GeneratedValue
				private UUID courseId; 		//Hibernate will generate an id of the form “8dd5f315-9788-4d00-87bb-10eed9eff566” via UUIDGenerator, which was introduced in Hibernate 5.

------------------------------------------------------------------------------------------------------------------------------
How to create a standalone JPA application
https://learnjava.co.in/how-to-create-a-standalone-jpa-application/


<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">
    <persistence-unit name="PERSISTENCE">
        <description>JPA Demo</description>
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <properties>
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLInnoDBDialect"/>
            <property name="javax.persistence.jdbc.driver"
                      value="com.mysql.jdbc.Driver"/>
            <property name="javax.persistence.jdbc.url"
                      value="jdbc:mysql://localhost/jpademo"/>
            <property name="javax.persistence.jdbc.user" value="user"/>
            <property name="javax.persistence.jdbc.password" value="password"/>
        </properties>
    </persistence-unit>
</persistence>

The persistence.xml file specifies a persistence unit. A persistence unit encapsulates database details. So, it includes the JPA Provider, mapping information & database configuration details. The persistence.xml file above specifies a persistence unit PERSISTENCE. It specifies Hibernate as the persistence provider and includes various other database connection details.  JPA uses the information in the persistence unit to configure the database connection. If your application uses multiple databases, you need to create a separate persistence unit corresponding to each database.


@Entity
public class Fruit {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private int id;
 private String name;
 private String colour;
 private int calories;
 //getters and setters
}

public class JPATest {
  @Test
  public void testSave() {
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("PERSISTENCE");
    EntityManager em = emf.createEntityManager();
    em.getTransaction().begin();
    Fruit apple = new Fruit();
    apple.setName("apple");
    apple.setColour("red");
    apple.setCalories(5);
    em.persist(apple);
    em.getTransaction().commit();
    System.out.println("Fruit record saved successfully");
    em.close();
    emf.close();
  }
  
  @Test
  public void testQuery() {
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("PERSISTENCE");
    EntityManager em = emf.createEntityManager();
    TypedQuery<Fruit> query = em.createQuery("from Fruit",Fruit.class);
    List<Fruit> fruits = query.getResultList();
    System.out.println("Fruit table has "+fruits.size()+" records");
  }
}



EntityManagerFactory
		EntityManagerFactory is an in-built JPA interface. It can be created via the Persistence class by specifying the name of the persistence unit from the persistence.xml file. The code above creates an EntityManagerFactory emf by referring to the PERSISTENCE persistence unit. An EntityManagerFactory is specific to a database. So, if you’d like to connect to a different database, you need to create a different EntityManagerFactory instance. An EntityManagerFactory can be used to created EntityManager instances.

EntityManager
		EntityManager is also an in-built JPA interface. It can be created via an EntityManagerFactory instance. The code above creates an EntityManager instance em via the EntityManagerFactory instance emf.  An EntityManager represents a database connection.  You can use it to perform database operations like insert/update/delete or to query a table. The code above invokes the persist method to save a Fruit record into the Fruit table.

EntityTransaction
		EntityTransaction is also an in-built JPA interface. It can be created via an EntityManager.  The code above creates an EntityTransaction instance et via the EntityManager instance em.  An EntityTransaction encapsulates a database transaction. A call to the begin method starts the transaction and a call to commit saves the changes in the database.

Query
		Query is also an in-built JPA interface. It can be created via an EntityManager.  The code above creates a TypedQuery (which is a sub-interface of Query) instance query via the EntityManager instance em.  You can use Query to execute a database query. The code above uses query to obtain all the Fruit records. The Query interface has methods that to retrieve the query execution results. The code above uses the query.getResultList. This returns a List of Fruit objects.

------------------------------------------------------------------------------------------------------------------------------
Hibernate interfaces explained
	https://learnjava.co.in/hibernate-interfaces-explained/

public class Main {
 
    public static void main(String[] args) {
         
        Person person = new Person("Mickey Mouse",35); //This corresponds to a table called Person with name and age fields
 
        SessionFactory  sessionFactory = new Configuration().configure().buildSessionFactory();
        Session session = sessionFactory.openSession();
        Transaction tx = session.beginTransaction();
        session.save(person);
        tx.commit();
        session.close();
        sessionFactory.close();
                 
    }
 
}

Configuration
The Configuration object is the first Hibernate object that you will need to create in any Hibernate application. It encapsulates the Hibernate configuration file i.e. hibernate.cfg.xml. A typical Hibernate application usually creates a Configuration object only once during application initialization. The  configuration.configure method reads the hibernate.cfg.xml file and sets up the Configuration object using the properties in this file. The Configuration object is required to create the SessionFactory object.

SessionFactory
The SessionFactorycontains all the data in the hibernate configuration file. The code creates a SessionFactory using a Configuration object. The configuration.buildSessionFactory method sets up the SessionFactory object with the configuration data in the config file. A typical Hibernate application create the SessionFactory object only once at the start of the application and keeps it for later use. The SessionFactory corresponds to the database config file, so if your application connects to several databases with different config files, you will need to have separate SessionFactory objects corresponding to each database.

Session
Next, the code creates a sessionobject. The code uses the sessionFactory.openSession method to create a Session object.  The session represents the physical connection with the database, so whenever a session is created, internally a connection is established to the database. The code uses the session object to actually save data and retrieve data from the database.

Transaction
Next, the code creates a transaction. As you might be aware, in database terminology, a transaction represents a unit of work. So if you want to execute several database operations as a single unit, you can club them into a transaction. A transaction ensures that either all the operations will be executed. If one operation fails the entire transaction will fail. So the database will be reverted to the state that it was before the transaction began. Hibernate defines the transaction interface to represent a transaction.  A transaction is associated with a Session and is usually instantiated by a call to session.beginTransaction(). This gives an instance of the Transaction object. The code can then use the transaction object for committing the changes to the database.

------------------------------------------------------------------------------------------------------------------------------
https://learnjava.co.in/how-hibernate-sessionfactory-works/
	How Hibernate SessionFactory works

Consider the following code that demonstrates a typical Hibernate application:

SessionFactory  sessionFactory = new Configuration().configure().buildSessionFactory();
Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
session.save(person);
tx.commit();
session.close();
sessionFactory.close();


This code first creates a  SessionFactory object.  The sessionFactory contains all the data in the hibernate configuration file. The code uses the Configuration class to create the SessionFactory instance.
The configuration.configure method reads the hibernate.cfg.xml file and sets up the Configuation object using the properties in this file.
The buildSessionFactory method builds the sessionFactory object using this configuration data.
The SessionFactory object is usually created only once at the start of the application and kept for later use.
The SessionFactory corresponds to the database config file. So you will need different SessionFactory instances if your application connects to different databases.
You can then use the SessionFactory instance to obtain a Session and interact with the database

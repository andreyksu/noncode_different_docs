JPA(Hibernate)

	- JPA - одной из реализаций JPA является Hibernate. Альтернативой может быть EclipseLink.
		- JPA, или Java Persistence API — это спецификация, которая обеспечивает объектно-реляционное отображение (ORM — Object-Relational Mapping) Java объектов (Entity бинов) и предоставляющая API для сохранения, получения и управления такими объектами.
			- JPA позволяет представлять данные из БД в виде Java-объектов, а также сохранять Java-объекты в виде записей в базе данных. В роли подобного объекта может выступать не каждый класс, а как раз-таки Entity бины.
				- Entity Bean - это POJO Java class - с определенными аннотациями, что требуется для JPA - чтоб отобразить этот POJO класс на БД.
	- В JPA - оперируем EntityManager(EM) (конфигурируется в persistence.xml - описывает PersistаnceUnit - т.е. сами настройки Hibernate. Само подключение т.е. DataSource - можно описать в Persistance.xml но в рамках контейнера JEE описывается в standelone-full.xml)
			- EntityManager is part of the Java Persistence API. Chiefly, it implements the programming interfaces and lifecycle rules defined by the JPA 2.0 specification.
	- В Hibernate оперируем Session (конфигурируется в hibernate.cfg.xml)
		- По сути EntityManager и Session - одно и тоже (но Session имеет больше возможностей/методов).
			- When we use Hibernate as a JPA provider, and operate via the EntityManager interface, the implementation of this interface basically wraps the underlying Session object.

	- В рамках контейнера JEE - транзации JPA живут внутри JTA и управляются/подчиняются правилам и времени жизни JTA транзакции.
		Т.е. если мы говорим про StateLess EJB - бины и их методы - то тут нужно смотреть на то как пораждается транзакция и где заканчивется (соответственно и JTA транзакции, а вместе и сними JPA транзакции будут подчинаться этим же срокам жизни).


	Т.е. примерно так:
		DataSource - описывает подключение к БД.
		Далее описывается Persistence Unit - по сути настройки Hibernate и завязка на DataSource;
			EnityManager по сути один к однму с Persistence Unit;
		Далее уже работаем с EM (который управляет PersistanceContext).


	EntityManager:
		Внутри EntityManager лежит persistence context - который собственно и управляем жизненным циклом сущности (это есть сердце все этого).
			in simple terms a persistence context is a self-contained collection of entities managed by an EntityManager during a given persistence scope.

			There are two different scopes
				Transaction-scoped EntityManager 
						If a persistence context is under transaction scope, entities attached during a transaction are automatically detached when the transaction ends. All persistence operations must occur inside the transaction, once the transaction is either committed or rolled back all entities are detached after they have been synchronized with the database.
				Extended EntityManager 
						An Extended EntityManager can only be used with stateful session beans and lasts as long as the bean instance is alive. Until the EntityManager is closed by the session bean being destroyed the entities will remain managed, unless explicitly remove

			- The container will take care of opening, closing and looking up the EntityManager behind the scenes.
			- One important point to remember is that the EntityManager is not thread safe, so do not go injecting them frivolously and do not inject them into a web component.

			- Все методы persist(), megre() итд - вызываются у EntityManager или Session.
				- persist(), save(), update(), merge() - и их мжно вызывать вне транзакции.
				- Даже когда мы работаем внутри контейнера EJB - что поумолчанию вызывает методы в рамках JTA-транзакции - те же select - что выполняются долго, можно выбполнять вне транзакции. Т.е. нужно метод отметить как выполняемый вне транзакции.
				- Также долгие выборки можно поменить как ReadOnly-Transaction (такие выборки куда дешевле по времени).

	Persistence Context (PC):
		JPA/Hibernate Persistence Context (PC)
			https://www.baeldung.com/jpa-hibernate-persistence-context
				- An EntityManager instance is associated with a persistence context. A persistence context is a set of entity instances in which for any persistent entity identity there is a unique entity instance (в котором для любого идентификатора постоянной сущности существует уникальный экземпляр сущности)
				- Within the persistence context, the entity instances and their lifecycle are managed. 
				- The persistence context is the first-level cache where all the entities are fetched from the database or saved to the database. It sits between our application and persistent storage.
				- Persistence context keeps track of any changes made into a managed entity. If anything changes during a transaction, then the entity is marked as dirty. When the transaction completes, these changes are flushed into persistent storage.
				- The EntityManager is the interface that lets us interact with the persistence context. Whenever we use the EntityManager, we are actually interacting with the persistence context.
				- If every change made in the entity makes a call to persistent storage, we can imagine how many calls will be made. This will lead to a performance impact because persistent storage calls are expensive.
				- The EntityManager figures out how to persist the domain by looking at the ORM configuration, it performs the CRUD.

		- Одним словом EM связан с PersistanceCont, а PersistanceCont по сути является контейнером для Entity. Данный контейнер, хранит сущности(Entity), отслеживает из изменение и отвечает за сохранение в БД.

	Entity:	
		The application that wants to use JPA needs to provide a simple class (POJO) corresponding to each database table. The class should have instance fields corresponding to the database columns. In addition, it needs to provide configuration information (information about the database URL, user name, password, etc.) and mapping information (information that specifies how to map each class to the corresponding database table). It then needs to write code that uses JPA calls. JPA uses the mapping and configuration information to translate the JPA calls to SQL statements.

		Entity может быть managed т.е. когда она attached к EntityManager - соответственно ее состояние мониторится и отражается в БД (изменение, обновление все автоматом отслеживается и отражается в БД)
			И моежт быть detached - not managed by the EntityManager but does exist. Когда мы клонируем или сереализуем этот Entity. Допустим для перечачи в слой клиента/представления. После того как клиент обновил состояние этой сущности и получили снова на сервак, нужно снова приаттачить к EntityManager

			Аn entity will also be detached immediately when no transaction is associated with it.

			An entity becomes attached when you use persist, merge, refresh or find.
				The merge and refresh methods are intended for entities that have been retrieved from the database and are in detached state, merge updates the database with the data held in the entity, and refresh does the opposite. You can detach an entity to upload it to the web tier, the web tier can then update it and then send it back, we then reattach it and it updates the database.


	Hibernate: save, persist, update, merge, saveOrUpdate
		https://www.baeldung.com/hibernate-save-persist-update-merge-saveorupdate

		transient — This instance isn't, and never was, attached to a Session. This instance has no corresponding rows in the database; it's usually just a new object that we created to save to the database.
		persistent — This instance is associated with a unique Session object. Upon flushing the Session to the database, this entity is guaranteed to have a corresponding consistent record in the database.
		detached — This instance was once attached to a Session (in a persistent state), but now it’s not. An instance enters this state if we evict it from the context, clear or close the Session, or put the instance through serialization/deserialization process.

		When the entity instance is in the persistent state, all the changes that we make to the mapped fields of this instance will be applied to the corresponding database records and fields upon flushing the Session. The persistent instance is “online,” whereas the detached instance is “offline” and not monitored for changes.
		This means that when we change the fields of a persistent object, we don't have to call save, update, or any of those methods to get these changes to the database. All we need to do is commit the transaction, flush the session, or close the session.

		Persist
			The persist method is intended to add a new entity instance to the persistence context, i.e. transitioning an instance from a transient to persistent state.
			But if we try to persist a detached instance, the implementation will throw an exception.

		Merge
			The main intention of the merge method is to update a persistent entity instance with new field values from a detached entity instance.

		The notion of “persistence context” is Hibernate's solution to this problem. We can think of persistence context as a container or first-level cache for all the objects that we loaded or saved to a database during a session.
		The session is a logical transaction, with boundaries defined by the application's business logic.



----------------------------------------------------------------------
	Hibernate
		-----
		Основные правила/рекомендации (основаны на https://vladmihalcea.com)
		    - Отдельно чтение/Отдельно запись:
		        - Возможно даже отдельные PersistаnceUnit(EntityManager) (для чтения и записи).
		            - Т.е. примером может служить когда у нас две базы, с одной читаем а в др. пишем (допустим репликация БД).
		                - Т.о. раздельное чение и запись позволит безболезненно переходить между базами итд (да и по логике они процедуры).
					- Главное не делать это в разных транзакциях т.к. возможны проблемы, когда в одной транзакции прочитали данные в одном состоянии, а пишем уже в базу с др. состоянием.
						- Т.е. если высокая нагрузка на базу - чтение и запись в разных транзакциядх может привести к проблемам (с рассинхроном момента чтения и записи). По этой причине советуют в общем подходе читать и писать в одной транзакции, а уже по месту, там где возможны тормоза, переходить на две разные транзакции (если это конечно нужно).
							- Это относится в бОльшей степени к чтению и записи в одну БД;
						- Т.е. если на входе стоит EJB бин - то читая с разных EntityManager автоматом все будет в одной транзакции.
						- Т.о. различие чтение и записи идет в контексте - отдельно целенаправленно выгребли и отдельно целенаправленно сохранили
							- Т.е. следуюет избегать неявного изменения (когда выгребли, поменяли у сущностей что-то и автоматом все само сохранилось).

		    - Все зависимости с LAZY.
		        - Каждую выборку делать отдельно с необходимым Join.
		            - Важно, что эта проблема проявляется, когда работаешь с сущностью в не транзакции (ну или в др. транзакции) - если же работать с полученной сущностью в одной транзакции, то проблем нет.
					- If you decide to use a bidirectional mapping, you always need to update both ends of your association. Otherwise, Hibernate might not persist your change in the database, and the entities in your current persistence context become outdated.

		    - Избегать Cascade в Hibernate (т.е. сохраняем/обновляем все целенаправленно, т.е. с осознанием и руками).

		    - Со слов разработчиков, не нужно на Hibernate смотреть как на магию - на Hibernate нужно смотреть как на удобное средств доступа к DataSource и работа с транзакциями из коробки - а так, это все те же выборки и те же сохранения как и с чистым-JDBC.
----------------------------------------------------------------------
Modeling self-referencing associations with Hibernate
    https://thorben-janssen.com/self-referencing-associations/

    If you decide to use a bidirectional mapping, you always need to update both ends of your association. Otherwise, Hibernate might not persist your change in the database, and the entities in your current persistence context become outdated.
    
    В этой же статье также присутствует код, где мы используем пустой конструктор, после чего делаем set - где устанавливается двухсторонняя ассоциация.
    В этой же статье еще и пример с Join Fetch когда таблица ссылается сама на себя.
    
    You should always use FetchType.LAZY for all of your associations. This is the default for all to-many associations, and you need to declare it all of your to-one associations.
    So, better double-check all your association mappings and make sure you’re not using eager fetching.
    So please, don’t use FetchType.EAGER. You should always prefer FetchType.LAZY.

    Когда располагаются связи в рамках однго класса, то лучше представить на бумаге, что они располагаются в разных классах, так будет проще понять.

    Вот то что представлено в статье можно расписать:

    Parent
    Category{
        @OneToMany(mappedBy="parentCategory")       // Один Parent ко множеству subCategories
                    SubCat
        private Set<Category> subCategories;
    }

    SubCat
    Category{
        @ManyToOne
                Parent
        private Category parentCategory;
    }

    И соответственно проще составлять JPQL
        SELECT p FROM Paretn p JOIN p.subCategories s where p.name = :name

    А потом заменить все на исходное.
        SELECT c FROM Category c JOIN c.subCategories s where c.name = :name

    И видимо в этом случае у нас всегда в selec находится category - по этому у меня ругался hibernate.

    Но вот что с JOIN FETCH было?

LazyInitializationException – What it is and the best way to fix it
    https://thorben-janssen.com/lazyinitializationexception/

----------------------------------------------------------------------
Defining JPA Entities
https://www.baeldung.com/jpa-entities
----------------------------------------------------------------------
Hibernate: save, persist, update, merge, saveOrUpdate
https://www.baeldung.com/hibernate-save-persist-update-merge-saveorupdate
----------------------------------------------------------------------
----------------------------------------------------------------------
Hibernate Entity Lifecycle
https://www.baeldung.com/hibernate-entity-lifecycle   (Хорошая статья!)
State of Entity
  transient, managed, detached, deleted


Simply put, the persistence context sits between client code and data store. It's a staging area where persistent data is converted to entities, ready to be read and altered by client code. It keeps track of all loaded data, tracks changes of that data, and is responsible to eventually synchronize any changes back to the database at the end of the business transaction.
JPA EntityManager and Hibernate's Session are an implementation of the persistence context concept.


A managed entity is a representation of a database table row (although that row doesn't have to exist in the database yet).
This is managed by the currently running Session, and every change made on it will be tracked and propagated to the database automatically.
The Session either loads the entity from the database or re-attaches a detached entity.


First, we need to start our unit of work by obtaining a Session:

  Session session = sessionFactory.openSession();

In a server environment, we may inject a Session to our code via a context-aware proxy. The principle remains the same: we need a Session to encapsulate the business transaction of our unit of work.
Next, we'll instruct our Session to load the data from the persistent store:

  assertThat(getManagedEntities(session)).isEmpty();
  List<FootballPlayer> players = s.createQuery("from FootballPlayer").getResultList();
  assertThat(getManagedEntities(session)).size().isEqualTo(3);

When we first obtain a Session, its persistent context store is empty, as shown by our first assert statement.
Next, we're executing a query which retrieves data from the database, creates entity representation of the data, and finally returns the entity for us to use.
Internally, the Session keeps track of all entities it loads in the persistent context store. In our case, the Session's internal store will contain 3 entities after the query.

Now let's change Gigi's name:

    Transaction transaction = session.getTransaction();
    transaction.begin();

    FootballPlayer gigiBuffon = players.stream()
      .filter(p -> p.getId() == 3)
      .findFirst()
      .get();

    gigiBuffon.setName("Gianluigi Buffon");
    transaction.commit();

    assertThat(getDirtyEntities()).size().isEqualTo(1);
    assertThat(getDirtyEntities().get(0).getName()).isEqualTo("Gianluigi Buffon");

On call to transaction commit() or flush(), the Session will find any dirty entities from its tracking list and synchronize the state to the database.
Notice that we didn't need to call any method to notify Session that we changed something in our entity – since it's a managed entity, all changes are propagated to the database automatically.
A managed entity is always a persistent entity – it must have a database identifier, even though the database row representation is not yet created i.e. the INSERT statement is pending the end of the unit of work.

A detached entity is just an ordinary entity POJO whose identity value corresponds to a database row. The difference from a managed entity is that it's not tracked anymore by any persistence context.
An entity can become detached when the Session used to load it was closed, or when we call Session.evict(entity) or Session.clear().


Session.merge(entity)/Session.update(entity) can (re)attach a session:

    FootballPlayer messi = session.get(FootballPlayer.class, 2L);

    session.evict(messi);
    messi.setName("Leo Messi");
    transaction.commit();

    assertThat(getDirtyEntities()).isEmpty();

    transaction = startTransaction(session);
    session.update(messi);
    transaction.commit();

    assertThat(getDirtyEntities()).size().isEqualTo(1);
    assertThat(getDirtyEntities().get(0).getName()).isEqualTo("Leo Messi");
------------------------------------------
Hibernate HQL Syntax with code examples
https://learnjava.co.in/hibernate-hql-syntax/
------------------------------------------
Hibernate Caching Mechanisms Explained
https://learnjava.co.in/hibernate-caching-explained/
------------------------------------------
Hibernate Association Mappings
https://learnjava.co.in/hibernate-association-mappings/
----------------------------------------------------------------------
Setting up Java application with Hibernate – example
	https://allaroundjava.com/setting-up-java-application-with-hibernate-example/

A file called persistence.xml is the main Hibernate configuration point. It’s placed under META-INF folder by default. It should contain at least one, uniquely named persistence unit. Each persistence unit has to contain a data source and a set of persistent classes in tags.


EntityManager is a JPA interface representing a database communication. It’s created out of EntityManagerFactory, which is bound to persistence context.
EntityManagerFactory is very expensive to create. It carries information about persistent classes, CRUD queries for all tables in the persistence context and more.
Operations which modify data need to happen in the context of transaction, as they have to be reversible. Calling persist() on EntityManager marks the object as a candidate to be stored in the database and assigns the id property. Committing a transaction causes EntityManager to be flushed and sends an insert query to the database.

Then, for the EntityManager... since your are not in a EE environment, you must get an instance of it from the EntityManagerFactoty.

public Long persist(Car car) {
    EntityManager EntityManager = EntityManagerFactory.createEntityManager();
    EntityTransaction transaction = EntityManager.getTransaction();
    transaction.begin();

    EntityManager.persist(car);

    transaction.commit();
    EntityManager.close();

    return car.getId();
}

----------------------------------------------------------------------
Hibernate Hello World Example
	https://howtodoinjava.com/hibernate/hibernate-hello-world-application/
Можно посмотреть, здесь описано тоже приложение на Hibernate без EE.
----------------------------------------------------------------------
Hibernate - Examples
	https://www.tutorialspoint.com/hibernate/hibernate_examples.htm
Тоже полезно посмотреть.
----------------------------------------------------------------------
Configuring Hibernate JPA with Spring – tutorial
https://allaroundjava.com/hibernate-jpa-spring-tutorial/


Persistence Context is always associated with an EntityManager, for which it looks after all entities in persistent state. It stores information about any modifications to persistent objects which need to be populated to a database. Whenever you fetch an entity from the database, it’s stored in the Persistence Context. When fetching the same entity again, the EntityManager, rather than launching a SELECT query, reaches out to Persistence Context to see if this entity is already there. This way the Persistence Context acts as Hibernate’s first level cache. Whenever a persistent entity is modified, it’s marked dirty in Persistence Context. Then once Persistence Context is flushed, UPDATE statements are sent to the database for all the dirty entities.

Java Transaction API (JTA)

----------------------------------------------------------------------
https://www.baeldung.com/hibernate-initialize-proxy-exception
Hibernate could not initialize proxy – no Session

It's important to understand what is Session, Lazy Initialisation, and Proxy Object and how they come together in the Hibernate framework.

    Session is a persistence context that represents a conversation between an application and the database
    Lazy Loading means that the object will not be loaded to the Session context until it is accessed in code.
    Hibernate creates a dynamic Proxy Object subclass that will hit the database only when we first use the object.
----------------------------------------------------------------------
JPA/Hibernate Persistence Context
https://www.baeldung.com/jpa-hibernate-persistence-context

----------------------------------------------------------------------
JPA EntityManagerFactory Vs Hibernate’s SessionFactory
https://javabeat.net/jpa-entitymanager-vs-hibernate-sessionfactory/

If you are using the JPA’s standard specification implementation (Read : Introduction to JPA), then you would use EntityManagerFactory for opening the session. But, if you are using the hibernate implementation, you have hibernate specific SessionFactory for managing the sessions. 

Here, there is two opinions are popular:

    EntityManagerFactory is  the standard implementation, it is the same across all the implementations. If we migrate our ORM for any other provider, there will not be any change in the approach for handling the transaction. In contrast, if you use hibernate’s session factory, it is tied  to hibernate APIs and ca not migrate to new vendor easily.
    One dis-advantage of using the standard implementation is that, it is not providing the advanced features. There is not much control provided in the EntityManager APIs. Whereas, hibernate’s SessionFactory has lot of advanced features which can not done in JPA. One such thing is retrieving the ID generator without closing the transaction, batch insert, etc.
----------------------------------------------------------------------
Hibernate
==========================================================
https://www.baeldung.com/hibernate-one-to-many

Hibernate One to Many

cart
    cart_id (PK)
    
items
    id      (PK)
    cart_id (FK cart.cart_id)    //The way this works at the database level is we have a cart_id as a primary key in the cart table and also a cart_id as a foreign key in items.
    

@Entity
@Table(name="CART")
public class Cart {

    //...

    @OneToMany(mappedBy="cart")     //We can also add a reference to Cart in Items using @ManyToOne, making this a bidirectional relationship. 
                                    //Bidirectional means that we are able to access items from carts, and also carts from items.
    private Set<Items> items;
    
	// getters and setters
}  


@Entity
@Table(name="ITEMS")
public class Items {
    
    //...
    @ManyToOne
    @JoinColumn(name="cart_id", nullable=false)
    private Cart cart;

    public Items() {}
    
    // getters and setters
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Hibernate — пример отображения один ко многим One-To-Many и Many-To-One
https://javastudy.ru/hibernate/hibernate-one-to-many/

contact:
    id
    first_name
    last_name
    birth_date
    version
    
contact_tel_detail
    id
    contact_id (foreign key contact → id)
    tel_type
    tel_number
    version
    
package ru.javastudy.hibernate.dao;
 
import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
 
/**
 * Created by Nick on 05.09.2015.
 */
@Entity
@Table(name = "contact", schema = "", catalog = "javastudy")
public class ContactEntity implements Serializable{
    private int id;
    private String firstName;
    private String lastName;
    private Date birthDate;
    private int version;
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //generated DataBase auto_increment when insert value
    @Column(name = "id", nullable = false, insertable = true, updatable = true)
    public int getId() {
        return id;
    }
 
    public void setId(int id) {
        this.id = id;
    }
 
    @Basic
    @Column(name = "first_name", nullable = false, insertable = true, updatable = true, length = 60)
    public String getFirstName() {
        return firstName;
    }
 
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
 
    @Basic
    @Column(name = "last_name", nullable = false, insertable = true, updatable = true, length = 40)
    public String getLastName() {
        return lastName;
    }
 
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
 
    //NOTE THIS!
    @Temporal(TemporalType.DATE) //in table uses java.sql.Date, we use java.util.Date.
    @Column(name = "birth_date", nullable = true, insertable = true, updatable = true)
    public java.util.Date getBirthDate() {
        return birthDate;
    }
 
    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }
 
    //NOTE THIS!
    @Version  //используем механизм оптимистичной блокировки.
    @Column(name = "version", nullable = false, insertable = true, updatable = true)
    public int getVersion() {
        return version;
    }
 
    public void setVersion(int version) {
        this.version = version;
    }
 
    /*
    * EXAMPLE One To Many
    */
    private Set<ContactTelDetailEntity> contactTelDetails = new HashSet<ContactTelDetailEntity>();
 
    //Атрибут mappedBy задает свойство в классе ContactTelDetailEntity, которое предоставляет ассоциацию (т.е. связано с определением внешнего ключа в таблице CONTACT_TEL_DETAIL).
    //Атрибут cascade означает, что операция обновления должна распространяться на дочерние записи. Атрибут orphanRemoval указывает, что после обновления деталей телефонных номеров контакта записи, которые больше не существуют в наборе, должны быть удалены из базы данных.
    
    @OneToMany(mappedBy = "contact", cascade = CascadeType.ALL, orphanRemoval = true)
    public Set<ContactTelDetailEntity> getContactTelDetails() {
        return this.contactTelDetails;
    }
 
    public void setContactTelDetails(Set<ContactTelDetailEntity> contactTelDetails) {
        this.contactTelDetails = contactTelDetails;
    }
 
    public void addContactTelDetail(ContactTelDetailEntity contactTelDetail) {
        contactTelDetail.setContact(this);
        getContactTelDetails().add(contactTelDetail);
    }
 
    public void removeContactTelDetail(ContactTelDetailEntity contactTelDetail) {
        getContactTelDetails().remove(contactTelDetail);
    }
    
 
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
 
        ContactEntity that = (ContactEntity) o;
 
        if (id != that.id) return false;
        if (version != that.version) return false;
        if (firstName != null ? !firstName.equals(that.firstName) : that.firstName != null) return false;
        if (lastName != null ? !lastName.equals(that.lastName) : that.lastName != null) return false;
        if (birthDate != null ? !birthDate.equals(that.birthDate) : that.birthDate != null) return false;
 
        return true;
    }
 
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
        result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
        result = 31 * result + (birthDate != null ? birthDate.hashCode() : 0);
        result = 31 * result + version;
        return result;
    }
 
    @Override
    public String toString() {
        return "ContactEntity{" +
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", birthDate=" + birthDate +
                ", version=" + version +
                '}';
    }
}


import javax.persistence.*;
 
/**
 * Created by Nick on 05.09.2015.
 */
@Entity
@Table(name = "contact_tel_detail", schema = "", catalog = "javastudy")
public class ContactTelDetailEntity {
    private int id;
    private String telType;
    private String telNumber;
    private int version;
 
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, insertable = true, updatable = true)
    public int getId() {
        return id;
    }
 
    public void setId(int id) {
        this.id = id;
    }
 
    @Basic
    @Column(name = "tel_type", nullable = false, insertable = true, updatable = true, length = 20)
    public String getTelType() {
        return telType;
    }
 
    public void setTelType(String telType) {
        this.telType = telType;
    }
 
    @Basic
    @Column(name = "tel_number", nullable = false, insertable = true, updatable = true, length = 20)
    public String getTelNumber() {
        return telNumber;
    }
 
    public void setTelNumber(String telNumber) {
        this.telNumber = telNumber;
    }
 
    //NOTE THIS!
    @Version
    @Column(name = "version", nullable = false, insertable = true, updatable = true)
    public int getVersion() {
        return version;
    }
 
    public void setVersion(int version) {
        this.version = version;
    }
 
 
    /*
    * EXAMPLE Many To One
    */
    private ContactEntity contact;
 
    @ManyToOne
    @JoinColumn(name = "contact_id")
    public ContactEntity getContact() {
        return this.contact;
    }
 
    public void setContact(ContactEntity contact) {
        this.contact = contact;
    }
 
 
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
 
        ContactTelDetailEntity that = (ContactTelDetailEntity) o;
 
        if (id != that.id) return false;
        if (version != that.version) return false;
        if (telType != null ? !telType.equals(that.telType) : that.telType != null) return false;
        if (telNumber != null ? !telNumber.equals(that.telNumber) : that.telNumber != null) return false;
 
        return true;
    }
 
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (telType != null ? telType.hashCode() : 0);
        result = 31 * result + (telNumber != null ? telNumber.hashCode() : 0);
        result = 31 * result + version;
        return result;
    }
 
    @Override
    public String toString() {
        return "ContactTelDetailEntity{" +
                "id=" + id +
                ", contact id: " + getContact().getId() +
                ", telType='" + telType + '\'' +
                ", telNumber='" + telNumber + '\'' +
                ", version=" + version +
                ", contact=" + contact +
                '}';
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Как я понял, здесь в примерах везде указана двух-сторонняя связь. А можно указывать одностороннюю связь (т.е. само поле в калссе не будет указано т.е. в классе Address убрать поле private User user).


https://www.baeldung.com/jpa-one-to-one


Modeling With a Foreign Key

users
    id (PK)
    username
    address_id (FK)//In this example, the address_id column in users is the foreign key to address.
    
address
    id (PK)
    street
    city

//Simply put, whoever owns the foreign key column gets the @JoinColumn annotation.
@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;
    //... 

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "address_id", referencedColumnName = "id")   //Also, we need to place the @JoinColumn annotation to configure the name of the column in the users table that maps to the primary key in the address table. 
                                                                    //This annotation is used only on the owner side.  Simply put, whoever(тот кто) owns the foreign key column gets the @JoinColumn annotation.
    private Address address;

    // ... getters and setters
}

//The address side of the relationship is called the non-owning side
@Entity
@Table(name = "address")
public class Address {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;
    //...

    @OneToOne(mappedBy = "address") //
    private User user;

    //... getters and setters
}

------------------------------------------------------------------------------------------------------
Modeling With a Shared Primary Key (плюс у этого подхода, что при выборке будет один select)


users
    id (PK)
    username
    
address
    user_id (PK/FK) //In this strategy, instead of creating a new column address_id, we'll mark the primary key column (user_id) of the address table as the foreign key to the users table:
    street
    city
    
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;

    //...

    //Если User не должен хранить 
    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL) //The mappedBy attribute is now moved to the User class since the foreign key is now present in the address table. 
    @PrimaryKeyJoinColumn       //We've also added the @PrimaryKeyJoinColumn annotation, which indicates that the primary key of the User entity is used as the foreign key value for the associated Address entity.
    private Address address;

    //... getters and setters
}

@Entity
@Table(name = "address")
public class Address {

    @Id         //We still have to define an @Id field in the Address class. But note that this references the user_id column, and it no longer uses the @GeneratedValue annotation.
    @Column(name = "user_id")
    private Long id;

    //...

    @OneToOne(fetch = FetchType.LAZY)
    @MapsId     //Also, on the field that references the User, we've added the @MapsId annotation, which indicates that the primary key values will be copied from the User entity.
                //The @MapsId annotation tells Hibernate to use the primary key value of the User entity as the primary key value of the Address entity.
    @JoinColumn(name = "user_id")
    private User user;
   
    //... getters and setters
    
    
------------------------------------------------------------------------------------------------------
Отношение OneToOne в Hibernate и Spring (примеров применения)
https://sysout.ru/otnoshenie-onetoone-v-hibernate/

Полный пример с примерами применения.
https://zetcode.com/hibernate/onetoone/
https://zetcode.com/hibernate/onetomany/


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
One-to-many mapping means that one row in a table is mapped to multiple rows in another table.
    In a One-to-Many/Many-to-One relationship, the owning side is usually defined on the many side of the relationship.

Cart_id as a primary key in the cart table and also a cart_id as a foreign key in items. (Здесь владельцем связи является Item - так как именно у него внешний ключ. А у Cart - присутствует mappedBy)

Let's map the Cart class to the collection of Item objects in a way that reflects the relationship in the database:

public class Cart {

    //...     
 
    @OneToMany(mappedBy="cart")
    private Set<Item> items;
    
    //...
}

@Entity
@Table(name="ITEMS")
public class Item {
    
    //...
    @ManyToOne
    @JoinColumn(name="cart_id", nullable=false) //Здесь объявлен внешний ключ.
    private Cart cart;

    public Item() {}
    
    // getters and setters
}

Please note that the @OneToMany annotation is used to define the property in Item class that will be used to map the mappedBy variable. That is why we have a property named “cart” in the Item class.

--------------------------------------------------------------
Для каждой связи важно иметь свое уникальное наименование связи (столбца связи).
Т.е. у меня есть две ссылки в сообщении на User - вот @JoinColumn(name = "....") для каждого User user - должны быть различными.

Пример

@Entity
public class Library {

    @Id
    @GeneratedValue
    private long id;

    @Column
    private String name;

    @OneToOne
    @JoinColumn(name = "address_id")
    private Address address;

    @OneToOne
    @JoinColumn(name = "secondary_address_id")
    private Address secondaryAddress;
    
    // standard constructor, getters, setters
}

--------------------------------------------------------------
@Entity
public class Author {

    @Id
    @GeneratedValue
    private long id;

    @Column(nullable = false)
    private String name;

    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name = "book_author", 
      joinColumns = @JoinColumn(name = "book_id", referencedColumnName = "id"), 
      inverseJoinColumns = @JoinColumn(name = "author_id", referencedColumnName = "id"))
    private List<Book> books;

    //standard constructors, getters, setters
}

--------------------------------------------------------------
The @JoinColumn annotation helps us specify the column we'll use for joining an entity association or element collection. On the other hand, the mappedBy attribute is used to define the referencing side (non-owning side) of the relationship.

In a One-to-Many/Many-to-One relationship, the owning side is usually defined on the many side of the relationship.
It's usually the side that owns the foreign key.

@Entity
public class Email {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "employee_id")
    private Employee employee;

    // ...

}
It simply means that our Email entity will have a foreign key column named employee_id referring to the primary attribute id of our Employee entity.

Once we have defined the owning side of the relationship, Hibernate already has all the information it needs to map that relationship in our database.

To make this association bidirectional, all we'll have to do is to define the referencing side. The inverse or the referencing side simply maps to the owning side.

@Entity
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
    private List<Email> emails;
    
    // ...
}

Here, the value of mappedBy is the name of the association-mapping attribute on the owning side. With this, we have now established a bidirectional association between our Employee and Email entities.


--------------------------------------------------------------

@OneToOne()
@JoinColumn(name="vehicle_id", referencedColumnName="vehicleId", foreignKey=@ForeignKey(name = "Fk_userdetails_vehicle"))
public Vehicle getVehicle() {
    return vehicle;
}

@OneToOne()
@JoinColumn(name="vehicle_id", referencedColumnName="vehicleId")
@ForeignKey(name="Fk_userdetails_vehicle")
public Vehicle getVehicle() {
   return vehicle;
}

-------------------------------

@JoinColumn(name = "BAR_ID", foreignKey = @ForeignKey(name = FK_BAR_OF_FOO))

for @ManyToMany relations you can use foreignKey and inverseForeignKey embedded in @JoinTable like this:

@JoinTable(name = "ARC_EMPLOYEE_OF_BAR"
        , joinColumns = {@JoinColumn(name = "BAR_ID")}
        , inverseJoinColumns = {@JoinColumn(name = "EMPLOYEE_ID")}
        , uniqueConstraints = {@UniqueConstraint(name = "ARC_UK_EMPLOYEE_OF_BAR", columnNames = {"EMPLOYEE_ID", "BAR_ID"})}
        , foreignKey = @ForeignKey(name = "ARC_FK_BAR_OF_EMPLOYEE")
        , inverseForeignKey = @ForeignKey(name = "ARC_FK_EMPLOYEE_OF_BAR"))

--------------------------------------------------------------
Modeling a many-to-many relationship with POJO

The owner side is where we configure the relationship. (На ведомой стороне т.к. где указывается @ManyToMany(mappedBy ="")) On the target side, we only have to provide the name of the field, which maps the relationship.

Note that using @JoinTable or even @JoinColumn isn't required. JPA will generate the table and column names for us. However, the strategy JPA uses won't always match the naming conventions we use. So, we need the possibility to configure table and column names.

https://www.baeldung.com/jpa-many-to-many


--------------------------------------------------------------
https://www.baeldung.com/jpa-one-to-one

@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;
    //... 

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "address_id", referencedColumnName = "id")
    private Address address;

    // ... getters and setters
}

We need to place the @JoinColumn annotation to configure the name of the column in the users table that maps to the primary key in the address table. 

Simply put, whoever owns the foreign key column gets the @JoinColumn annotation.

The address side of the relationship is called the non-owning side. 

@Entity
@Table(name = "address")
public class Address {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;
    //...

    @OneToOne(mappedBy = "address")
    private User user;

    //... getters and setters
}


--------------------------------------------------------------
https://www.baeldung.com/jpa-one-to-one

Стандартная связь - через добавление столбца с внешним ключем.

@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;
    //... 

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "address_id", referencedColumnName = "id")
    private Address address;

    // ... getters and setters
}

@Entity
@Table(name = "address")
public class Address {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;
    //...

    @OneToOne(mappedBy = "address")
    private User user;

    //... getters and setters
}


И второй вариант, через Shared Primary Key, когда в качестве первичного ключа и по совместительству внешнего ключа используется первичный ключ из таблицы - т.е. по сути происходит копия.

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long id;

    //...

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn                   //We've also added the @PrimaryKeyJoinColumn annotation, which indicates that the primary key of the User entity is used as the foreign key value for the associated Address entity.
    private Address address;

    //... getters and setters
}


@Entity
@Table(name = "address")
public class Address {

    @Id
    @Column(name = "user_id")
    private Long id;

    //...

    @OneToOne
    @MapsId                             //@MapsId annotation, which indicates that the primary key values will be copied from the User entity.
    @JoinColumn(name = "user_id")
    private User user;
   
    //... getters and setters
}


Implies that the values of mask + group combined should be unique

@Table(
   name = "product_serial_group_mask", 
   uniqueConstraints = {@UniqueConstraint(columnNames = {"mask", "group"})}
)


If you'd like to have both mask and group to be unique separately

@Table(
        name = "product_serial_group_mask",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "mask"),
                @UniqueConstraint(columnNames = "group")
        }
)




    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "address_id", referencedColumnName = "id")
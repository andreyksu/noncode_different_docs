JIT
	* Компилирует во время исполнения байт-код в нативный-код (на базе статистики исполнения)
		- Тратит процессорное время на компиляцию и анализ
		# Компилируя код она-JAVA распологает эту область вне heap - Называется в codeCache (область небольшая, и компилируется не всё приложение а только часть на базе анализа/профайлигна) 
		* Есть три подхода:
			** Client (C1) 
				# Смотрит что выполняется больше 1500 раз - до 1.6 был дефлтным метдом/подходом
			** Server (C2) 
				# Анализирует, перекомпилирует очищаяя ранее занятую память. Выполняет перекомпиляцию обратно. При этом то что было в нативном коде декомпилирует в ява байт-код
				# Анализ деается не только на базе кода и его исполнения но и битность ОС, ядерность машины итд.
			** TIERED (в начинаем с С1 потом работаем с С2) - для 1.8 стал дефолтным методом
		
		* Инлайн (на уровне байт-код[все что меньше 35байт всегда инлайнится], а здесь именно на уровен JIT)
		* ON-STACK REPLACMENT - то, что много раз выполняется. Подменяет часто выполняемый код по ходу выполнения на тот что уже скомпилированно.
		* ESCAPE ANALYSE - суть - (то что мы написали, то что скомпилировалось, то что исполняет jit совершенно разные вещи)
			# При тестировании нагрузки (нужно правильно симулирвоать нагрузку)
				# Наши данные должны быть похожи на реальные данные
				# Наша нагрузка должна быть похожа максимально на реальную нагрузку.
			
	* Тюнинг:
		** -client, -server or -XX:+TieredCompilation
		** -XX:ReservedCodeCacheSize= , -XX:InitalCodeCacheSice=  - в метаспейсе не heap - GC не трогает
			# Достаточно небольшие дефолтно, лучше увеличить. Память нынче дешево, добавьте еще памяти.
			
		JITWATCH - анализатор во что скомпилиось в реальности.

/-----------------------------------------------------------------------------/
Под капатом интеграция между JNDI и любой конкретной службой осуществляется с помощью интерфейса поставщика услуг SPI.
		SPI позволяет прозрачно подключать различные службы именования и каталогов, что позволяет Java-приложению использовать JNDI API для доступа к подключенным службам.

		JDK включает в себя поставщиков услуг к следующим службам:
			Lightweight Directory Access Protocol (LDAP);
			Common Object Request Broker Architecture (CORBA);
			Common Object Services (COS) name service;
			Java Remote Method Invocation (RMI) Registry;
			Domain Name Service (DNS).

		Код JNDI API разделен на несколько пакетов:
			javax.naming;
			javax.naming.directory;
			javax.naming.ldap;
			javax.naming.event;
			javax.naming.spi.

JNDI - обеспечивет единобразный доступ к объекту по имени.
		ассоциация (binding) - соответствие JNDI-имени определенному объекту;
		контекст (context) - среда, в которой хранится набор ассоциаций между объектами и именами.

InitialContext - это верхушка JNDI Tree, к которому Bind объекты. При lookup - поиск начинается с верхушки т.е. с InitialContext
	Context namingContext = new InitialContext(); это когда работаем внутри AppServer т.е. уже все параметры заполнены, мы просто получаем InitialContext

	JNDI Tree - можно относиться как к регистратуре. Соответственно запрашиваем Java объекты в регистратуре.
	----

	final Properties proprs = new Properties();
	props.setProperty("java.naming.factory.inital", "com.sun.enterprise.naming.SerialInitContextFactory");
	...
	Context namingContext = new InitialContext(props);
		Получив 

	Можно объекты получаеть как через lookup, так и через DependenceInjection.
		Injection
			@Resource(lookup="java:/ConnectionFactory")
			ConnectionFactory connectionFactory;
				или
			@Resource(lookup="queue/test")
			Queue testQueue;
		Lookup
			ConnectionFactory connectionFactory = (ConnectionFactory)namingContext.lookup(ConnectionFactoryString);
				или
			Destination destination = (Destination) namingContext.lokup("jms/queue/test")

	Когда идет работа напрямую с JNDI(т.е. вне контейнера), происходит поиск текстового файла jndi.properties в classpath. Данный файл содержит метоинформацию, какой же класс использовать для работы с jndi, свойство это такое: java.naming.factory.inital
/-----------------------------------------------------------------------------/
JNDI

	https://docs.jboss.org/jbossas/jboss4guide/r1/html/ch3.chapter.html

	Разделяют два вида имён:
		composite 	- составной
		compound	- сложный

	Это пример composite имени, который состоит из двух compound имен:
		ahost.someorg.org:/tmp/remotefile.txt

	Два compound
		ahost.someorg.org и /tmp/remotefile.txt

	A file pathname in the UNIX file system is an example of a compound name.
		Each component in a compound name is an atomic name.

		If the component comes from a hierarchical namespace, that component can be further parsed into its atomic parts by using the javax.naming.CompoundName class. The JNDI API provides the javax.naming.CompositeName class as the implementation of the Name interface for composite names.


	Contex
		All naming service operations are performed on some implementation of the Context interface. The javax.naming.IntialContext class implements the Context interface, and provides the starting point for interacting with a naming service.

		The javax.naming.Context interface is the primary interface for interacting with a naming service.
			The Context interface represents a set of name-to-object bindings.
			Every context has an associated naming convention that determines how the context parses string names into javax.naming.Name instances.

		The Context implementation used internally by the InitialContext class is determined at runtime.
			The default policy uses the environment property java.naming.factory.initial, which contains the class name of the javax.naming.spi.InitialContextFactory implementation. You obtain the name of the InitialContextFactory class from the naming service provider you are using.

			### JBossNS properties
			java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
			java.naming.provider.url=jnp://localhost:1099
			java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces


		An example of where the restricting a binding to the java: context is useful would be a javax.sql.DataSource connection factory that can only be used inside of the JBoss server where the associated database pool resides. On the other hand, an EJB home interface would be boung to a globally visible name that should accessible by remote client.

		Context iniCtx = new InitialContext();
		Context compEnv = (Context) iniCtx.lookup("java:comp/env");
		Доступен только для одного компонента. И не доступен для др. компонента. Т.е. не виден между компонентами. Если мы это объявили в EJB-Bean-1 то EJB-Bean-2 не будет достуно это пространство и наоборот.

		There are three commonly used levels of naming scope in JBoss: names under java:comp, names under java:, and any other name. As discussed, the java:comp context and its subcontexts are only available to the application component associated with that particular context.
/-----------------------------------------------------------------------------/
	

	
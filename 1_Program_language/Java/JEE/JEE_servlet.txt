Servlet исполняется внутри контейнера.
Контейнер - загружает servlet, инициализирует, передает запросы клиентов и ответы клиентам. При установке сервлета(компонента) в контейнер, он получает уникальное имя, для контейнера. Задаются начальные параметры(в том числе из конфигурационного файла) и создаются каталоги для хранения ресурсов.

Web-приложение(.war) - это совокупность servlet-ов, JSP, ресурсов(файлы JS,HTML,XML итд) - т.е. все что нужно для выполнения запросов клиентов.
	0. Context represetns WebApplication. The WebApplication is the .war file.
	1. В рамках одного веб-приложения может быть множество сервлетов.
	2. Имя веб приложения соответствует имени каталога или файла .war (Может браться из web.xml)
	3. Контейнер создает для всех сервлетов (находящихся в одном web-приложении) один контекст(каталоги, файлы, конфиги итд). Вся эта информация заносится в ServletContext.
		3.1. Можно задать параметры в web.xml через теги <context-param>
		3.2. Кроме строковых парамтеров, контекст позволяет хранить и получать объекты любых типов Java. Т.е. т.о. можно передавать  переметры и объекты между всеми servlet-ами Web-приложения
	4. Каталог WEB-INF должен быть обязательно остальные не обязательно. 
		4.1. Все что находится в WEB-INF - не доступно клиенту, все что во вне - доступно клиенту.
		4.2. В каталоге WEB-INF - обязательно должен быть файл web.xml - это минимальный набор web-приложения.
		4.3. Скомпилированные классы располагаются в каталоге WEB-INF/classes/ а дальше в соответствии с пакетами.


1.Контейнер инициализирует servlet методом init(ServletConfig conf).
	1.1. Передавая объект конфигурации, для инициализации servlet. ServletConfig - значения берутся из <servlet-name> и <init-param>.
	1.2. Через ServletConfig можно получить контекст getServletContext()
2. После завершения метода init() автоматически вызывается метод service(ServletRequest req, ServletResponse resp)
	Заполнением объекта req занимается контейнер сервлетов. Он же и передает пустую ссылку на resp.
	После заполнения resp он отдается контейнеру, а потом Web-сервер отправляет его клиенту.
3. В Tomcat 	init() - вызывается при deploy. 		- здесь вся инициализация к бд итд. Не нужно это делать в методе service так как будет выполнен для каждого запроса/потока и возможно параллельно.
				destroy() - вызывается при undeploy		- здесь все логи итд.
4. Для всех сервлетов работающих в рамках одного web-приложения создается один конектст.
	4.1. Через ServletContext можно получить доступ к параметрам определенным в <context-param>
	4.2. Как то можно полчить доступ к атрибутам, что будут является разделяемыми объектами для всех сервлетов - getAttributeNames() - Нужно поизучать стр. 621 и 636. //servContext.setAttribute(name, object);


BasePractics
	- Кодировка ответа устанавливается setContentType() перед получением выходного потока getWriter().
	- Если в req  метод getCharacterEncoding - не установлена, то нужно установить принудительно методом setCharacterEncoding(String) - это следует делать до разбора переменных.
 

-------------------
Что такое «сервлет»?

	Сервлет является интерфейсом, реализация которого расширяет функциональные возможности сервера. Сервлет взаимодействует с клиентами посредством принципа запрос-ответ. Хотя сервлеты могут обслуживать любые запросы, они обычно используются для расширения веб-серверов.

	Большинство необходимых для создания сервлетов классов и интерфейсов содержатся в пакетах javax.servlet и javax.servlet.http.

	Основные методы сервлета:
	• public void init(ServletConfig config) throws ServletException запускается сразу после загрузки сервлета в память;
	• public ServletConfig getServletConfig() возвращает ссылку на объект, который предоставляет доступ к информации о конфигурации сервлета;
	• public String getServletInfo() возвращает строку, содержащую информацию о сервлете, например: автор и версия сервлета;
	• public void service(ServletRequest request, ServletResponse response) throws ServletException, java.io.IOException вызывается для обработки каждого запроса;
	• public void destroy() выполняется перед выгрузкой сервлета из памяти.


Как контейнер сервлетов управляет жизненным циклом сервлета, когда и какие методы вызываются?

	Контейнер сервлетов управляет четырьмя фазами жизненного цикла сервлета:
	• Загрузка класса сервлета — когда контейнер получает запрос для сервлета, то происходит загрузка класса сервлета в память и вызов его конструктора без параметров.
	• Инициализация класса сервлета — после того как класс загружен контейнер инициализирует объект ServletConfig для этого сервлета и внедряет его через init() метод. Это и есть место где сервлет класс преобразуется из обычного класса в сервлет.
	• Обработка запросов — после инициализации сервлет готов к обработке запросов. Для каждого запроса клиента сервлет контейнер порождает новый поток и вызывает метод service() путем передачи ссылки на объекты ответа и запроса.
	• Удаление - когда контейнер останавливается или останавливается приложение, то контейнер сервлетов уничтожает классы сервлетов путем вызова destroy() метода.

	Таким образом, сервлет создаётся при первом обращении к нему и живёт на протяжении всего времени работы приложения (в отличии от объектов классов, которые уничтожаются сборщиком мусора после того, как они уже не используются) и весь жизненный цикл сервлета можно описать как последовательность вызова методов:
	• public void init(ServletConfig config) – используется контейнером для инициализации сервлета. Вызывается один раз за время жизни сервлета.
	• public void service(ServletRequest request, ServletResponse response) – вызывается для каждого запроса. Метод не может быть вызван раньше выполнения init() метода.
	• public void destroy() – вызывается для уничтожения сервлета (один раз за время жизни сервлета).

В каком случае требуется переопределять метод service()?

	Метод service() переопределяется, когда необходимо, чтобы сервлет обрабатывал все запросы (и GET, и POST) в одном методе.

	Когда контейнер сервлетов получает запрос клиента, то происходит вызов метода service(), который в зависимости от поступившего запроса вызывает или метод doGet() или метод doPost().


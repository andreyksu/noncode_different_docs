# **CompletableFuture –≤ Java: –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä**  

`CompletableFuture` ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Java (–ø–æ—è–≤–∏–ª—Å—è –≤ Java 8). –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç:  
- –ó–∞–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ.  
- –°—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.  
- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.  
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏.  

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç `Future` –∏–∑ `java.util.concurrent`, `CompletableFuture` –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç callback'–∏.  

---

## **1. –°–æ–∑–¥–∞–Ω–∏–µ CompletableFuture**  

### **1.1. –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ**  
```java
CompletableFuture<String> future = new CompletableFuture<>();
future.complete("–†–µ–∑—É–ª—å—Ç–∞—Ç"); // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ä—É—á–Ω—É—é
```

### **1.2. –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏**  
```java
// –ó–∞–ø—É—Å–∫ –≤ ForkJoinPool.commonPool()
CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
    System.out.println("–ó–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ");
});

// –° —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º Executor
ExecutorService executor = Executors.newFixedThreadPool(2);
CompletableFuture<Void> customFuture = CompletableFuture.runAsync(() -> {
    System.out.println("–ó–∞–ø—É—â–µ–Ω–æ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø—É–ª–µ");
}, executor);
```

### **1.3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º**  
```java
CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
    return "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è";
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫!)
String result = future.get(); // –∏–ª–∏ future.join() (–±–µ–∑ checked –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
```

---

## **2. –¶–µ–ø–æ—á–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (Chaining)**  

### **2.1. `thenApply()` ‚Äì –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**  
```java
CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> "Hello")
    .thenApply(s -> s + " World") // "Hello World"
    .thenApply(String::toUpperCase); // "HELLO WORLD"
```

### **2.2. `thenAccept()` ‚Äì –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å (void)**  
```java
CompletableFuture.supplyAsync(() -> "Data")
    .thenAccept(data -> System.out.println("–ü–æ–ª—É—á–µ–Ω–æ: " + data));
```

### **2.3. `thenRun()` ‚Äì –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**  
```java
CompletableFuture.supplyAsync(() -> "Done")
    .thenRun(() -> System.out.println("–ó–∞–≤–µ—Ä—à–µ–Ω–æ"));
```

### **2.4. `thenCompose()` ‚Äì –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ Future (flatMap)**  
```java
CompletableFuture<String> getUser = CompletableFuture.supplyAsync(() -> "Alice");
CompletableFuture<Integer> getScore = CompletableFuture.supplyAsync(() -> 100);

CompletableFuture<String> result = getUser.thenCompose(name -> 
    getScore.thenApply(score -> name + ": " + score) // "Alice: 100"
);
```

---

## **3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Future**  

### **3.1. `thenCombine()` ‚Äì –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ Future**  
```java
CompletableFuture<String> hello = CompletableFuture.supplyAsync(() -> "Hello");
CompletableFuture<String> world = CompletableFuture.supplyAsync(() -> "World");

CompletableFuture<String> combined = hello.thenCombine(world, (h, w) -> h + " " + w);
// "Hello World"
```

### **3.2. `allOf()` / `anyOf()` ‚Äì –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Future**  
```java
CompletableFuture<String> task1 = CompletableFuture.supplyAsync(() -> "A");
CompletableFuture<String> task2 = CompletableFuture.supplyAsync(() -> "B");

// –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö
CompletableFuture<Void> all = CompletableFuture.allOf(task1, task2);
all.thenRun(() -> {
    String result1 = task1.join();
    String result2 = task2.join();
    System.out.println(result1 + ", " + result2); // "A, B"
});

// –ñ–¥—ë–º –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ
CompletableFuture<Object> any = CompletableFuture.anyOf(task1, task2);
any.thenAccept(result -> System.out.println("–ü–µ—Ä–≤—ã–π: " + result));
```

---

## **4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**  

### **4.1. `exceptionally()` ‚Äì –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è**  
```java
CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
    if (Math.random() > 0.5) throw new RuntimeException("–û—à–∏–±–∫–∞!");
    return 42;
}).exceptionally(ex -> {
    System.err.println("–û—à–∏–±–∫–∞: " + ex.getMessage());
    return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
});
```

### **4.2. `handle()` ‚Äì —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞)**  
```java
CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> 10 / 0)
    .handle((result, ex) -> {
        if (ex != null) {
            System.err.println("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!");
            return -1;
        }
        return result;
    });
```

### **4.3. `whenComplete()` ‚Äì –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**  
```java
CompletableFuture.supplyAsync(() -> "–£—Å–ø–µ—Ö")
    .whenComplete((res, ex) -> {
        if (ex != null) System.err.println("–û—à–∏–±–∫–∞: " + ex);
        else System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + res);
    });
```

---

## **5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**  

### **5.1. –¢–∞–π–º–∞—É—Ç—ã (`orTimeout`, `completeOnTimeout`)** (Java 9+)  
```java
CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
    try { Thread.sleep(2000); } catch (InterruptedException e) {}
    return "–ì–æ—Ç–æ–≤–æ";
}).orTimeout(1, TimeUnit.SECONDS) // TimeoutException, –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª
  .exceptionally(ex -> "–¢–∞–π–º–∞—É—Ç!");

// –ò–ª–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
CompletableFuture<String> safe = future.completeOnTimeout("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", 1, TimeUnit.SECONDS);
```

### **5.2. –Ø–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (`complete`, `completeExceptionally`)**  
```java
CompletableFuture<String> future = new CompletableFuture<>();

new Thread(() -> {
    try {
        future.complete("–£—Å–ø–µ—Ö");
    } catch (Exception e) {
        future.completeExceptionally(e);
    }
}).start();
```

---

## **6. –ü—Ä–∏–º–µ—Ä: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π REST-–∫–ª–∏–µ–Ω—Ç**  
```java
public CompletableFuture<String> fetchUserData(String userId) {
    return CompletableFuture.supplyAsync(() -> {
        // –ò–º–∏—Ç–∞—Ü–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–∞
        try { Thread.sleep(500); } catch (InterruptedException e) {}
        return "{ \"id\": \"" + userId + "\", \"name\": \"Alice\" }";
    });
}

public CompletableFuture<Integer> fetchUserScore(String userId) {
    return CompletableFuture.supplyAsync(() -> {
        try { Thread.sleep(300); } catch (InterruptedException e) {}
        return 95;
    });
}

// –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
CompletableFuture<String> combined = fetchUserData("123")
    .thenCombine(fetchUserScore("123"), (data, score) -> data + ", \"score\": " + score + " }");

combined.thenAccept(System.out::println);
// { "id": "123", "name": "Alice", "score": 95 }
```

---

## **–ò—Ç–æ–≥–∏**  
‚úÖ **–ü–ª—é—Å—ã `CompletableFuture`:**  
- –ì–∏–±–∫–æ—Å—Ç—å (—Ü–µ–ø–æ—á–∫–∏, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ).  
- –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.  
- –£–¥–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.  

‚ö† **–ú–∏–Ω—É—Å—ã:**  
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ª–∞–¥–∫–∏.  
- –†–∏—Å–∫ "callback hell" –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.  

**–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?**  
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã (HTTP, DB).  
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.  
- –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ pipelines.  

–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **Reactive Streams** (Project Reactor, RxJava), –Ω–æ `CompletableFuture` –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á.  

–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –∫–µ–π—Å–æ–≤ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ! üöÄ
Пакеты org.springframework.beans и org.springframework.context являются основой для IoC-контейнера Spring Framework.
Интерфейс BeanFactory предоставляет расширенный механизм конфигурации, способный управлять объектами любого типа.
ApplicationContext является подинтерфейсом BeanFactory - следует его использовать всегда (кроме тех случае где есть веская причина не использовать его).

// AnnotationConfigApplicationContext - (GenericApplicationContext и AnnatationConfigApplicationContext) - это основные точки входа в контейнер Spring.
// ClassPathXmlApplicationContext
// FileSystemApplicationContext


В Spring объекты, которые составляют основу вашего приложения и управляются IoC-контейнером Spring, называются бинами (beans).

Интерфейс org.springframework.context.ApplicationContext представляет IoC-контейнер Spring и отвечает за создание экземпляра, настройку и компонование бинов.

Контейнер получает инструкции о том, какие объекты создавать, конфигурировать и компоновать путем считывания конфигурационных метаданных. Конфигурационные метаданные представлены в виде XML, аннотаций Java или кода Java.


Несколько реализаций интерфейса ApplicationContext поставляются вместе с Spring. В автономных приложениях обычно создается экземпляр ClassPathXmlApplicationContext или FileSystemXmlApplicationContext.
Хотя XML является традиционным форматом для определения конфигурационных метаданных, можно указать контейнеру использовать аннотации Java или код в качестве формата метаданных.
  AnnotationConfigApplicationContext - содержит все общие постпроцессоры аннотаций.

Spring container - состоит из Конфигурационных Метаданных и Pojo (составляющих бизнес объекты)
  Конфигурационные Метдаданные - говорят как контейнеру следует создавать, конфигурировать икомпоновать объекты в приложении. 
    - Это может быть xml.
    - Конфигурация на базе аннотаций
        2.0: @Required, 2.5: @Autowired, @PostConstruct и @PreDestroy, 3.0: @Inject, @Named.
        Аннотации добавляются непосредственно в Java-классы с помощью специальных маркеров (например, @Component, @Service, @Configuration)
        Аннотации определяют бины прямо в классах через @Component, @Service, @Repository
    - Конфигурация на основе Java
        @Configuration, @Bean, @Import и @DependsOn.
        Java-конфигурация использует специальные классы конфигурации с методом @Configuration и методами @Bean
        Java-конфигурация создает бины через методы с аннотацией @Bean в конфигурационных классах

      Примечание:
         --- @Required - устарл (нужно использовать InitializingBean.afterPropertiesSet() или @PostConstruct)
         --- Аннотация @Inject может быть использована вместо аннотации @Autowired
                @Autowired - можно и не ставить, если всего один конструктор по умочанию. Если несколько конструкторов то нжуно поставить.
                  Устанавливается как над конструктором, так и над сеттрерами-методами, так и над полями класса.

                  public class MovieRecommender {
                    private final CustomerPreferenceDao customerPreferenceDao;
                    @Autowired
                    private MovieCatalog movieCatalog;
                    @Autowired
                    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao) {
                        this.customerPreferenceDao = customerPreferenceDao;
                    }
                    // ...
                }



Пример annotation-based конфигурации:
  @Service
  public class UserService {
      @Autowired
      private UserRepository userRepository;
  }

Пример Java-based конфигурации:
  @Configuration
  public class AppConfig {
      @Bean
      public UserService userService() {
          return new UserService(userRepository());
      }
      
      @Bean
      public UserRepository userRepository() {
          return new JpaUserRepository();
      }
  }
--------------------------------------------------------
Sprint

    Если вы хотите создать Spring web-приложение, просто добавьте зависимость spring-boot-starter-web, которая подтянет в проект все библиотеки, необходимые для разработки Spring MVC-приложений, таких как spring-webmvc, jackson-json, validation-api и Tomcat
    
    После выбора подходящего starter-пакета, Spring Boot попытается автоматически настроить Spring-приложение на основе добавленных вами jar-зависимостей
        Например, если вы добавите Spring-boot-starter-web, Spring Boot автоматически сконфигурирует такие зарегистрированные бины, как DispatcherServlet, ResourceHandlers, MessageSource
        Если вы используете spring-boot-starter-jdbc, Spring Boot автоматически регистрирует бины DataSource, EntityManagerFactory, TransactionManager и считывает информацию для подключения к базе данных из файла application.properties.
        
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.1.RELEASE</version>
    </parent>
        
    Т.к. мы создаем REST API, то необходимо в качестве зависимости использовать spring-boot-starter-web, которая неявно определяет все остальные зависимости, такие как spring-core, spring-web, spring-webmvc, servlet api, и библиотеку jackson-databind
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
Создание основного класса приложения:
    Этот последний шаг заключается в создании класса конфигурации и запуска приложения. 
      Spring Boot поддерживает новую аннотацию @SpringBootApplication, которая эквивалентна использованию @Configuration, @EnableAutoConfiguration и @ComponentScan с их атрибутами по умолчанию
    
    Нужно создать класс, аннотированный с помощью @SpringBootApplication, а Spring Boot включит автоматическую настройку и отсканирует ваши ресурсы в текущем пакете.

--------------------------------------------------------
The interfaces BeanFactory and ApplicationContext represent the Spring IoC container.
    ApplicationContext is a sub-interface of the BeanFactory.
    The important features of ApplicationContext are resolving messages, supporting internationalization, publishing events, and application-layer specific contexts.

    In Spring, a bean is an object that the Spring container instantiates, assembles, and manages.


    As per Spring documentation in general, we should define beans for service layer objects, data access objects (DAOs), presentation objects, infrastructure objects such as Hibernate SessionFactories, JMS Queues, and so forth.

    As we know, the primary job of the ApplicationContext is to manage beans.
    As such, an application must provide the bean configuration to the ApplicationContext container. 
        A Spring bean configuration consists of one or more bean definitions. 

    Java-Based Configuration

      @Configuration
      public class AccountConfig {

        @Bean
        public AccountService accountService() {
          return new AccountService(accountRepository());
        }

        @Bean
        public AccountRepository accountRepository() {
          return new AccountRepository();
        }
      }

      Annotation-Based Configuration
        In this approach, we first enable annotation-based configuration via XML configuration. Then we use a set of annotations on our Java classes, methods, constructors, or fields to configure beans. Some examples of these annotations are @Component, @Controller, @Service, @Repository, 
          @Autowired, and @Qualifier.

          @Autowired and @Inject
            Replace @Autowired with @Inject; it works similarly to perform dependency injection.

        The @Component annotation is used to mark a Java class as a Spring-managed bean. When you annotate a class with @Component, you're telling Spring that an instance of this class should be created and managed within the Spring ApplicationContext.

        There are specialized versions of @Component that provide additional semantics:
          @Service: Indicates that a class holds business logic.
          @Repository: Indicates that a class is a data repository (and, additionally, it has exception translation enabled).
          @Controller: Indicates that a class is a Spring MVC controller.


--------------------------------------------------------


Бины объявляются различными способами, корни большинства из них лежат в понятии Configuration. В качестве контейнера бинов выступает ApplicationContext. 
    Чтобы передать инициализацию зависимости контексту, она помечается аннотацией @Autowired.


Если мы просто создадим класс и попытаемся внедрить его объект с помощью аннотации @Autowired, то ничего не получится. Spring никак не реагирует на обычные классы. Чтобы превратить этот класс в бин, нужно пометить его аннотацией, например:

  @Component — любой класс общего назначения, объект которого мы хотим получить в приложении
  @Repository — репозитории
  @RestController— контроллеры


Изучим пример с репозиторием:

  package io.hexlet.spring.repository;

  import hexlet.code.model.User;
  import org.springframework.data.jpa.repository.JpaRepository;
  import org.springframework.stereotype.Repository;

  @Repository
  // Во время компиляции этот интерфейс превращается в конкретный класс
  public interface UserRepository extends JpaRepository<User, Long> {}

  Внедрение происходит так:
  @RestController
  @RequestMapping("/users")
  public class UserController {

      @Autowired
      private UserRepository userRepository;
  }


-------------
@SpringBootApplication is a convenience annotation that adds:
  @Configuration: Tags the class as a source of bean definitions.
  @EnableAutoConfiguration: Tells Spring Boot to start adding beans based on classpath settings.
  @ComponentScan: Tells Spring Boot to scan the current package and its sub-packages for components, configurations, and services.



Второй – это создание бина с помощью метода. Для этого нам нужно создать метод внутри любого класса, помеченного аннотацией @Configuration.
  Проще всего это сделать в классе с методом main, потому что аннотация @SpringBootApplication автоматически добавляет аннотацию @Configuration:

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public Faker getFaker() { // Имя метода не важно
        return new Faker();
    }
}
Теперь Faker можно внедрять как обычную зависимость:

@SpringBootTest
@AutoConfigureMockMvc
public class UsersControllerTest {

    @Autowired
    private Faker faker;

    @BeforeEach
    public void setUp() {
      // Тут создаем нужные данные
    } 
--------------------------------------------------------
https://www.baeldung.com/spring-application-context
The Spring ApplicationContext

As we know, the primary job of the ApplicationContext is to manage beans.
As such, an application must provide the bean configuration to the ApplicationContext container. A Spring bean configuration consists of one or more bean definitions. In addition, Spring supports different ways of configuring beans.
--------------------------------------------------------
    The Main class has the @SpringBootApplication annotation
    It simply invokes the SpringApplication.run method. This starts the Spring application as a standalone application, runs the embedded servers and loads the beans.
    Normally, such a main class is placed in a root package above other packages. This enables component scanning to scan all the sub-packages for beans.
    For a complete working example of a simple Spring Boot application you can refer to this article.
 
    @EnableAutoConfiguration – This enables Spring Boot’s autoconfiguration mechanism. Auto-configuration refers to creating beans automatically by scanning the classpath.

    @ComponentScan – Typically, in a Spring application, annotations like @Component, @Configuration, @Service, @Repository are specified on classes to mark them as Spring beans. The @ComponentScan annotation basically tells Spring Boot to scan the current package and its sub-packages in order to identify annotated classes and configure them as Spring beans. Thus, it designates the current package as the root package for component scanning.

    @Configuration – Designates the class as a configuration class for Java configuration. In addition to beans configured via component scanning, an application may desire to configure some additional beans via the @Bean annotation as demonstrated here. Thus, the return value of methods having the @Bean annotation in this class are registered as beans.
    
    
    You just need to tell SpringBoot the type of application you are developing. SpringBoot then adds the necessary jar files and does the application configuration assuming some defaults. These default values can easily be changed by the developer. For example, if you are developing a database application, you just need to specify this to SpringBoot in the configuration file. SpringBoot then downloads all the necessary jar files like the database drivers, etc and adds them to the classpath. It also configures some beans required for the application that you are developing assuming certain defaults
    
    Based on the dependencies in the classpath, SpringBoot tries to configure your application by providing suitable defaults. This is known as auto-configuration. So suppose you are building a web application and add the starter for it to the Maven pom file. SpringBoot automatically configures the DispatcherServlet, ViewResolver, etc. Or if you have added the spring-data-jpa-starter, SpringBoot will automatically configure the necessary beans like the TransactionManager, EntityManager, etc
    
----------------------------------------------
@Configuration - аннотация для касса, что содержит методы с аннотацией  @Bean (а методы помеченные этой аннотацией по сути возвращают )

Пример без Spring boot:

    <dependencies>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>5.2.2.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>5.2.2.RELEASE</version>
    </dependency>
  </dependencies>
  
  
public class MessageDAO {  
  public String getMessage() {
    return "Hello World";
  }
}

public class MessageService {
  
  private MessageDAO messageDAO;
  public void printMessage() {
    String message = messageDAO.getMessage();
    System.out.println(message);
  }
  public MessageDAO getMessageDAO() {
    return messageDAO;
  }
  public void setMessageDAO(MessageDAO messageDAO) {
    this.messageDAO = messageDAO;
  }
}


@Configuration
public class MyConfiguration {

  @Bean
  public MessageDAO messageDAO() {
    MessageDAO bean = new MessageDAO();
    return bean;
  }

  @Bean
  public MessageService messageService() {
    MessageService bean = new MessageService();
    bean.setMessageDAO(messageDAO());
    return bean;
  }
}

public static void main(String args[]) {
   AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MyConfiguration.class);
   MessageService messageService = applicationContext.getBean("messageService", MessageService.class);    
   messageService.printMessage();
}

------------------------------
Spring Boot Annotations
  https://www.baeldung.com/spring-boot-annotations
------------------------------
Spring Component Scanning
  https://www.baeldung.com/spring-component-scanning
------------------------------
How to create HelloWorld Spring MVC Web application using Maven and Eclipse
  https://learnjava.co.in/how-to-create-helloworld-spring-mvc-web-application-using-maven-and-eclipse/
------------------------------
Creating a Spring REST application in Maven and Eclipse
  https://learnjava.co.in/how-to-create-a-spring-rest-application-via-maven-and-eclipse/
------------------------------
Spring @ExceptionHandler annotation explained
  https://learnjava.co.in/spring-exceptionhandler-annotation-explained/
------------------------------
How to create a Spring Boot REST service with XML output
  https://learnjava.co.in/how-to-create-a-spring-boot-rest-service-with-xml-output/
------------------------------
How to create a Spring Boot Thymeleaf web application
  https://learnjava.co.in/how-to-create-a-spring-boot-thymeleaf-web-application/
----------------------------------------------------------------------
Get Session From EntityManager in Spring Boot
  https://www.netsurfingzone.com/hibernate/get-session-from-entitymanager-in-spring-boot/
----------------------------------------------------------------------
Spring Tutorial – Learn Spring Framework step by step
  https://www.dineshonjava.com/spring-tutorial/

  A configuration model and a dependency injection mechanism belong to the core container located in the heart of the framework.
  Core and Beans are the basic parts of the framework with Dependency Injection and IoC features.
  The BeanFactory is a sophisticated implementation of the factory pattern.

  Context is another module which is built on the solid base by the Core and Beans. This module is a way to access the objects in a framework-style and is similar to a JNDI registry.
  The Context module has a focal point which is known as the ApplicationContext.

  The Spring Container takes the classes in the application, creates objects, and manages the life cycle of those objects.

  The Core package is the most fundamental part of the framework and provides the IoC and Dependency Injection features. The basic concept here is the BeanFactory, which provides a sophisticated implementation of the factory pattern
----------------------------------------------------------------------
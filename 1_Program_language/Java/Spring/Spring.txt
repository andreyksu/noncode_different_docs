По сути, Spring предлагает контейнер, часто называемый контекстом приложения Spring, который создает компоненты приложения и управляет ими. Эти компоненты, или bean-компоненты, объединяются внутри контекста Spring, образуя полноценное приложение.


Sprint

    Если вы хотите создать Spring web-приложение, просто добавьте зависимость spring-boot-starter-web, которая подтянет в проект все библиотеки, необходимые для разработки Spring MVC-приложений, таких как spring-webmvc, jackson-json, validation-api и Tomcat
    
    После выбора подходящего starter-пакета, Spring Boot попытается автоматически настроить Spring-приложение на основе добавленных вами jar-зависимостей
        Например, если вы добавите Spring-boot-starter-web, Spring Boot автоматически сконфигурирует такие зарегистрированные бины, как DispatcherServlet, ResourceHandlers, MessageSource
        Если вы используете spring-boot-starter-jdbc, Spring Boot автоматически регистрирует бины DataSource, EntityManagerFactory, TransactionManager и считывает информацию для подключения к базе данных из файла application.properties.
        
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.1.RELEASE</version>
    </parent>
        
    Т.к. мы создаем REST API, то необходимо в качестве зависимости использовать spring-boot-starter-web, которая неявно определяет все остальные зависимости, такие как spring-core, spring-web, spring-webmvc, servlet api, и библиотеку jackson-databind
    
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
Создание основного класса приложения:
    Этот последний шаг заключается в создании класса конфигурации и запуска приложения. Spring Boot поддерживает новую аннотацию @SpringBootApplication, которая эквивалентна использованию @Configuration, @EnableAutoConfiguration и @ComponentScan с их атрибутами по умолчанию
    
    Нужно создать класс, аннотированный с помощью @SpringBootApplication, а Spring Boot включит автоматическую настройку и отсканирует ваши ресурсы в текущем пакете.    
    
    
--------------------------------------------------------
https://www.baeldung.com/spring-application-context
The Spring ApplicationContext

As we know, the primary job of the ApplicationContext is to manage beans.
As such, an application must provide the bean configuration to the ApplicationContext container. A Spring bean configuration consists of one or more bean definitions. In addition, Spring supports different ways of configuring beans.
--------------------------------------------------------
    The Main class has the @SpringBootApplication annotation
    It simply invokes the SpringApplication.run method. This starts the Spring application as a standalone application, runs the embedded servers and loads the beans.
    Normally, such a main class is placed in a root package above other packages. This enables component scanning to scan all the sub-packages for beans.
    For a complete working example of a simple Spring Boot application you can refer to this article.
 
    @EnableAutoConfiguration – This enables Spring Boot’s autoconfiguration mechanism. Auto-configuration refers to creating beans automatically by scanning the classpath.

    @ComponentScan – Typically, in a Spring application, annotations like @Component, @Configuration, @Service, @Repository are specified on classes to mark them as Spring beans. The @ComponentScan annotation basically tells Spring Boot to scan the current package and its sub-packages in order to identify annotated classes and configure them as Spring beans. Thus, it designates the current package as the root package for component scanning.

    @Configuration – Designates the class as a configuration class for Java configuration. In addition to beans configured via component scanning, an application may desire to configure some additional beans via the @Bean annotation as demonstrated here. Thus, the return value of methods having the @Bean annotation in this class are registered as beans.
    
    
    You just need to tell SpringBoot the type of application you are developing. SpringBoot then adds the necessary jar files and does the application configuration assuming some defaults. These default values can easily be changed by the developer. For example, if you are developing a database application, you just need to specify this to SpringBoot in the configuration file. SpringBoot then downloads all the necessary jar files like the database drivers, etc and adds them to the classpath. It also configures some beans required for the application that you are developing assuming certain defaults
    
    Based on the dependencies in the classpath, SpringBoot tries to configure your application by providing suitable defaults. This is known as auto-configuration. So suppose you are building a web application and add the starter for it to the Maven pom file. SpringBoot automatically configures the DispatcherServlet, ViewResolver, etc. Or if you have added the spring-data-jpa-starter, SpringBoot will automatically configure the necessary beans like the TransactionManager, EntityManager, etc
    
----------------------------------------------
@Configuration - аннотация для касса, что содержит методы с аннотацией  @Bean (а методы помеченные этой аннотацией по сути возвращают )

Пример без Spring boot:

    <dependencies>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>5.2.2.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>5.2.2.RELEASE</version>
    </dependency>
  </dependencies>
  
  
public class MessageDAO {  
  public String getMessage() {
    return "Hello World";
  }
}

public class MessageService {
  
  private MessageDAO messageDAO;
  public void printMessage() {
    String message = messageDAO.getMessage();
    System.out.println(message);
  }
  public MessageDAO getMessageDAO() {
    return messageDAO;
  }
  public void setMessageDAO(MessageDAO messageDAO) {
    this.messageDAO = messageDAO;
  }
}


@Configuration
public class MyConfiguration {
  @Bean
  public MessageDAO messageDAO() {
    MessageDAO bean = new MessageDAO();
    return bean;
  }
  @Bean
  public MessageService messageService() {
    MessageService bean = new MessageService();
    bean.setMessageDAO(messageDAO());
    return bean;
  }
}

public static void main(String args[]) {
   AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(MyConfiguration.class);
   MessageService messageService = applicationContext.getBean("messageService", MessageService.class);    
   messageService.printMessage();
}

------------------------------
Spring Boot Annotations
  https://www.baeldung.com/spring-boot-annotations
------------------------------
Spring Component Scanning
  https://www.baeldung.com/spring-component-scanning
------------------------------
How to create HelloWorld Spring MVC Web application using Maven and Eclipse
  https://learnjava.co.in/how-to-create-helloworld-spring-mvc-web-application-using-maven-and-eclipse/
------------------------------
Creating a Spring REST application in Maven and Eclipse
  https://learnjava.co.in/how-to-create-a-spring-rest-application-via-maven-and-eclipse/
------------------------------
Spring @ExceptionHandler annotation explained
  https://learnjava.co.in/spring-exceptionhandler-annotation-explained/
------------------------------
How to create a Spring Boot REST service with XML output
  https://learnjava.co.in/how-to-create-a-spring-boot-rest-service-with-xml-output/
------------------------------
How to create a Spring Boot Thymeleaf web application
  https://learnjava.co.in/how-to-create-a-spring-boot-thymeleaf-web-application/
----------------------------------------------------------------------
Get Session From EntityManager in Spring Boot
  https://www.netsurfingzone.com/hibernate/get-session-from-entitymanager-in-spring-boot/
----------------------------------------------------------------------
Spring Tutorial – Learn Spring Framework step by step
  https://www.dineshonjava.com/spring-tutorial/

  A configuration model and a dependency injection mechanism belong to the core container located in the heart of the framework.
  Core and Beans are the basic parts of the framework with Dependency Injection and IoC features.
  The BeanFactory is a sophisticated implementation of the factory pattern.

  Context is another module which is built on the solid base by the Core and Beans. This module is a way to access the objects in a framework-style and is similar to a JNDI registry.
  The Context module has a focal point which is known as the ApplicationContext.

  The Spring Container takes the classes in the application, creates objects, and manages the life cycle of those objects.

  The Core package is the most fundamental part of the framework and provides the IoC and Dependency Injection features. The basic concept here is the BeanFactory, which provides a sophisticated implementation of the factory pattern
----------------------------------------------------------------------
# Вот оно решение в соответствии с описанным алгоритмом в интернетах. Стек сипользуется как вспомогательная сущность. А входная строка как последовательность для чтения.
# Вероятно это самое быстрое решение.
# Решение прошло все проверки.

inputed_str = input()

src_list = inputed_str.split()

fuzze = True
operation_list = ["*", "**", "/", "%", "//", "-", "+"]
list_as_stack = list()
for i in src_list:
    if i not in operation_list:
        list_as_stack.append(int(i))
    else:
        result = 0
        second = int(list_as_stack.pop())
        first = int(list_as_stack.pop())
        oper = i

        match oper: # Здесь можно было бы сделать через eval как в 3-4_19_S.py и 3-4_20_T.py
            case "*":
                result = first * second
            case "**":
                result = first**second
            case "/":
                result = first / second
            case "%":
                result = first % second
            case "//":
                result = first // second
            case "-":
                result = first - second
            case "+":
                result = first + second

        list_as_stack.append(result)

print(list_as_stack[0])


"""
Польский калькулятор

Напишите программу, которая производит вычисление выражения, записанного в обратной польской нотации (ОПН).

В ОПН нет ни скобок, ни приоритета операторов («умножение раньше сложения»).

Чтобы прочитать выражение, записанное в таком формате, нужно просматривать выражение строго последовательно. Вводимые значения последовательно добавляются в стек. Когда встречается символ операции, то из стека извлекаются последние положенные туда значения, с ними проделывается эта операция и результат возвращается в стек.

Если для операции важен порядок значений, с которыми она производится, то первым идёт число, лежавшее в стеке глубже. В частности, если операция — вычитание, то из предпоследнего числа в стеке вычитается последнее, а не наоборот.

Изначально стек пустой, в результате полного вычисления выражения в нём должно остаться одно значение — результат вычислений.

Первый пример следует читать так: в стек последовательно добавляются значения 7 2 3, а затем встречаем знак операции *. Тогда значения 2 и 3 извлекаются, перемножаются, результат 6 кладётся обратно в стек. Следующий знак извлекает из стека два оставшихся в нём значения 7 и 6, вычитает одно из другого и кладёт результат снова в стек. Выражение закончилось, в стеке одно число — 1, это и есть результат вычисления.
Формат ввода

Вводится одна строка, содержащая разделённые пробелами целые числа и знаки операций +, -, *, которые вместе составляют корректное выражение в обратной польской нотации.
Формат вывода

Выводится одно целое число — результат вычисления выражения.
Пример 1
Ввод
7 2 3 * -
Вывод
1

Пример 2
Ввод
10 15 - 7 *
Вывод
-35

"""

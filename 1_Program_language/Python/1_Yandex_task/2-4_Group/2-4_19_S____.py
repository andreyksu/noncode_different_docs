# Задача решена с учётом порядка подачи материала (методов, массивов/коллекций еще не было). Решал так если бы не знал перечисленного.


# ### - Означает(требуется оптимизация) - решение не очень нравится.
# Чётность и нечётность как-то сделано в виде костыля (добавлением и вычитание).

side = int(input())

helf = side // 2
append = 0  # Нужно для четности или нечётности
if side % 2 != 0:
    append = 1
helf = helf + append

# Ищем порядок числа для центральной части таблицы для выравнивания.
tmpp = helf
order = 0
while tmpp > 0:
    tmpp = tmpp // 10
    order += 1

# Можно использовать так, и написать условие, а тело цикла тождественно и соответственно меняется только range. Позволит уйти дублирования тела цикла.
first_range = range(1, helf + 1)
second_range = range(helf - append, 0, -1)

for i in range(1, helf + 1):
    k = 0
    for j in range(0, side):
        # Не нравится это, т.к. зависит от порядка условий если "k < i" будет первым, то результат будет совсем другой. Но он должен быть - иначе не будет вычитания.
        if k > side - j:
            k -= 1
        elif k < i:  # Номер строки соответствует максимальному числу в строке.
            k += 1
        print(f"{k:>{order}}", end=" ")
    print()

for i in range(helf - append, 0, -1):
    k = 0
    for j in range(0, side):
        if k > side - j:
            k -= 1
        elif k < i:
            k += 1
        print(f"{k:>{order}}", end=" ")
    print()


"""
Числовой квадрат
К сожалению, и змейки детям надоели, поэтому воспитательнице нужна новая программа. Напишите программу, которая строит числовой квадрат требуемого размера.

Формат ввода
В первой строке записано число N — высота и ширина числового квадрата.

Формат вывода
Требуется вывести сформированный числовой квадрат требуемого размера.
Чтобы квадрат был красивым, каждый его столбец — одинаковой ширины.

Пример 1
    Ввод
        3
    Вывод
        1 1 1
        1 2 1
        1 1 1
Пример 2
    Ввод
        5
    Вывод
        1 1 1 1 1
        1 2 2 2 1
        1 2 3 2 1
        1 2 2 2 1
        1 1 1 1 1
"""

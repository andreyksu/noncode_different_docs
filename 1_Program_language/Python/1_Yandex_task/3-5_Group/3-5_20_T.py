filname = "./Yandex_task/3-5_Group/sample01.num"
# filname = "./Yandex_task/9_Group/numbers.num"
# filname = "numbers.num"
chunk_size = 2
summ = 0
summ_1 = 0

with open(filname, mode="rb") as file_in:
    while byte_array := file_in.read(chunk_size):
        summ += int.from_bytes(byte_array, byteorder="big", signed=False)
        # little big
        print(f"type(byte_array) = {type(byte_array)}\t type(byte_array[0]) = {type(byte_array[0])}")
        if len(byte_array) == 2:
            tow_byte = byte_array[0] << 8 | byte_array[1]
            binn = tow_byte.to_bytes(2, "big")
            print(f"tow_byte = {tow_byte}\t binn = {binn}\t type(binn) = {type(binn)}")
        else:
            tow_byte = byte_array[0]
        summ_1 += tow_byte
        # print(f"two_byte = {two_byte}, bytearray[1] = {byte_array[1]}, bytearray[0] = {byte_array[0]}")
        # x = int(two_byte, 16)
        # x = int.from_bytes(two_byte, "big", signed="True")
        # print(f'x = {x}')
print(summ & 0xFFFF) # Это из условия задачи, что сумма тоже в 2х байтах.
# А щее можно было бы взять остаток от деления на 65 536 (где байт это 65 535)
print(summ_1 & 0xFFFF)


"""
Файловая сумма
Вы скорее всего знаете, что существуют не только текстовые файлы. Различные форматы данных предусматривают специальное кодирование. Например, BMP изображения хранят некоторую заголовочную информацию и цвета всех пикселей в виде чисел.

Давайте поработаем с такими данными. Нам дают файл в некотором формате, назовем его NUM. Он содержит список 2-байтных чисел. Для простоты будем считать, что отрицательных чисел не существует.

Напишите программу, которая вычисляет сумму всех записанных в файле чисел в 2-байтном диапазоне.

Формат ввода
В файле numbers.num содержатся числа в указанном формате.

Формат вывода
Одно число — сумма всех чисел в файле на 2-байтном диапазоне.

Примечание
Для простоты файлы в примерах записаны в HEX формате. В этом виде файл представляется как последовательность четырехзначных шестнадцатеричных чисел.

В первом примере записано 5 шестнадцатеричных чисел: 1, 2, 3, 4, 5. Их сумма равна 15.
Во втором — 255 и 257. Их сумма равна 512.

Файл из примеров в изначальном виде можно загрузить здесь:

Первый пример
Второй пример
Если вы хотите изучить принцип хранения целых чисел в ЭВМ, советуем почитать про прямой, обратный и дополнительный коды.
"""
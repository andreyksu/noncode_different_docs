filname = "./Yandex_task/3-5_Group/sample01.num"
# filname = "./Yandex_task/9_Group/numbers.num"
# filname = "numbers.num"
summ = 0

with open(filname, mode="rb") as file_in:
    full_content = file_in.read()
    if len(full_content) % 2 == 0:
        for position in range(len(full_content) // 2):
            result_pos = position * 2
            summ += full_content[result_pos] << 8 | full_content[result_pos + 1]
    else:
        raise Exception("Число байт не кратно 2")

summ = summ & 0xFFFF # Или взять остаток от 65 536 (где 65 535 байт)
print(summ)

"""
Файловая сумма
Вы скорее всего знаете, что существуют не только текстовые файлы. Различные форматы данных предусматривают специальное кодирование. Например, BMP изображения хранят некоторую заголовочную информацию и цвета всех пикселей в виде чисел.

Давайте поработаем с такими данными. Нам дают файл в некотором формате, назовем его NUM. Он содержит список 2-байтных чисел. Для простоты будем считать, что отрицательных чисел не существует.

Напишите программу, которая вычисляет сумму всех записанных в файле чисел в 2-байтном диапазоне.

Формат ввода
В файле numbers.num содержатся числа в указанном формате.

Формат вывода
Одно число — сумма всех чисел в файле на 2-байтном диапазоне.

Примечание
Для простоты файлы в примерах записаны в HEX формате. В этом виде файл представляется как последовательность четырехзначных шестнадцатеричных чисел.

В первом примере записано 5 шестнадцатеричных чисел: 1, 2, 3, 4, 5. Их сумма равна 15.
Во втором — 255 и 257. Их сумма равна 512.

Файл из примеров в изначальном виде можно загрузить здесь:

Первый пример
Второй пример
Если вы хотите изучить принцип хранения целых чисел в ЭВМ, советуем почитать про прямой, обратный и дополнительный коды.
"""
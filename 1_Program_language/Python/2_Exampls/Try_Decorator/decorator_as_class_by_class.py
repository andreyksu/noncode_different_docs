# Пример когда декорируется метод класса --- классом декоратором.
# В данном примере медо target класса С. А в качестве декоратора выступает класс decor.

class decor:
    def __init__(self, func):
        self.func = func
        
    # Т.к. согласно Лутцу происходит потеря инстенса того класса, в торогом происходит декторирование.
    # Добавляем принудительно соответствующий экземпляр "instance" в декоратор
    def __call__(self, instance, *args): 
        return self.func(instance, *args)
    
class C:
    def __init__(self):
        self.paramm = 'paramm!!!!'
        pass
    
    @decor
    def targ(self, a, b, c):
        return self.paramm + str(a + b + c)
    
c = C()

# И соответственно вынужждены передать текущий инстенс.
# Но в таком случае получается выгоды нет - т.к. сигнатура метода меняется по отношению к исходному.
print(c.targ(c, 1, 2, 3))
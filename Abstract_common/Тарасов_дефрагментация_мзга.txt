Метаморфозы
	* Техников готовили в средних-специальных заведениях.
		** Современный техник это оператор ЭВМ (админ, внедренец, служба поддержки)
	* Инженеры это уже высшее заведение. Также и по работе это более квалифицированные специалисты.
	
6 миллионов специлистов JAVA
	* Уровень специалистов распределяется по гаусову распределению
		ламеры  ОСНОВНАЯ МАССА профессионалы
	* Задач для профессионалов довольно мало, и им часто приходится заниматься рутинной работой (иначе даже это место займут менее подготовленные специалисты)
	* Повсеместно идет переподготовка кадров, но эти курсы не могут дать полноценное образование в технике. Выпускаются копировальщики.
	
Мотивация и стимуляция
	Мотивация - это внутренний механизм и для его изменения нужно много времени (воспитание, психология)
		** Есть конечно быстрые методы, психотропные вещества, гипноз итд
	Стимуляция - это внешнее воздйествие. Выявление мотивации и стимуляция этих мотиваций или их подавление.
		** Стимуляция это собака павлова.
		** Менять психологию и выстроить набор стимулов разные вещи. Ведь управлять мотивацией это целенаправленное изменение психологии.
		
Конструировть ПО как аппаратуру
	Не согласен с этим разделом, считаю что разработка аппаратуры не менее тривиальная задача. 
	И если уж на то пошло, то почему бы не разрабатывать такие же кубики тщательно декларирующие вход и выход.
	
Низкое качеств кодинга
	Так как это позволяет потребитель и софт часто является некритичным. Если бы цена потери была бы слишком высока, то сразу же бы писали по др.

Выбор технологий.
	* Часто выбор технологий определяется менеджерами или др. людьми. 
		** По этой причине часто происхоидт довольно нелучший выбор либо слишком сложный либо слишком жирные технологии.
	* Изначально web декларировался как независимый от платформы и отвязки от поставки ПО.
		** Но по факту получилось что теперь новая зависимость на браузеры учет их особенностей, проблем при переезде с версии на версию.
		** До сихо пор на Delphi или Qt/c++ можно сделать то, что web до сих пор не позволяет.
		** ASP и Applet провалились.
		
ООП
	* Цель ООП стала повышение продуктивности конкретного человека работающего в одиночку. 
		** ООП позволяет увеличить количество кода, которое может написать и сопровождать один среднестатистический программист.
			# Были даже цифры 15тысяч в процедурном стиле против 25тысяч в с++
		** Но вот когда коллективная разработка таких показателей нет, да и не факт что производительность выше.
			# Пошли в использование паттерны, что бы хоть как то упорядочить и обуздать код.
		** С++ хороший язык но с высоким уровнем вхождения. И как правило одиночки или же маленькие коллективы делают что то крутое и хорошее. Но как правило большие группы  обречены на провал.
			# Вспоминается гаусова кривая, в разработку вовлекается много средних разработчиков и им нужно сделать максимально больше при меньших телодвижениях за рабочий день. И тут нужны др. средства.
			# У майкрософт есть финансы и средства растянуть график вправо. Но у др. контор нет таких ресурсов.
			# Для F35 был разработан софрт в 10миллионов строк на c++ но был разработан свой стандарт которому следовали разработчики.
		!!! ООП хорошь там где есть хорошая модель предметной области. Как правило для ООП нужно хорошо прорабатывать аналитику итд. 
			# Так же ООП хорошо в искуственных средах на подобии дисплеев для отрисовки, там где вся среда создана разработчиком (т.е. создана условно идеальная среда для ООП)
		
ORM 
	* Лично я не имею опыта работы с ORM но автор считает, что это довольно плохая идея (применять ORM в проекте)
		# Проще сделать хорошо продуманную модель данных в DB а дальше прогонять SQL запросы.
		# Часто под предлогом применения ORM еще и независимость от БД (но так ли часто реально большое приложение меняет СУБД? Да и сомнительно, что не придется менять код)
		# ORM (Hibername) - часто лишь усложняет код. Добавляет еще больше кода и путаницы на язык на котором разрабатывается а не на СУБД.
		# Часто выгребается слишком много из базы а дальше уже в коде происходит более детальная выборка.
		# Часто бывает и обратное, что ORM генерит слишком много мелких запросов.
	
	* Часто показатель большой информационной системы является отношение числа таблиц к чисту строк (тысяч строк без учета тестов)
		# 1 к 1-2 - пороговое значение.
		# 1 к 3-4 - следует серьёзно заняться изученим вопроса переделки частей системы.
	
SAAS
	Программа как был продуктом так и остается продуктом. И не может быть услугой.
		# Но теперь те кто эксплуатирует программу предоставляет услуги на базе данной программы. (Как такси, на базе автомобиля оказываются услуги извоза)
		
Проектирование
	Очень просто делать сложно, но очень сложно сделать просто.
	
	* Концептуальное устройство - это результат анализа а не результат синтеза. Является строго определенным, так как отразает реальный процесс сущность.
	* Логическое устройство - это результат синтеза и череды вопросов при проектировании "а для чего этот модуль..". Не определен строго, рождается в ходе проектирования.
	* Физическое утройство - это результат синтеза на стадии проектирования реализации. Так же называется звено tier
	
	Доля системного анализа все падает и падает.
		# От сюда выбор той или иной технологии определяется по принципу «прочитали статью, у этих парней получилось, сделаем и мы так же».
		# В итоге в качестве прослойки появляются лишние фраемворки, тонны кода, доп. сереализаци/десереализация итд.
		# Критичность основной массы проектов в ИТ снижается, соответственно, большая часть решений переходит из технической плоскости в управленческую. Эта тенденция будет только усиливаться.
		
	
	Хорошему проекту нужен МАРКЕТОЛОГ - тот кто будет видеть потребность бизнеса, тот кто будет понимать веенья, тот кто будет выявлять потребности пользователей, анализировать рынок.
		* Технарь маркетолоку нужен лишь для оценки возможности релизации, сроков, сложности итд.
		
	!!!Учитесь у лидеров рынка, их успех не от «просто так».
	!!!Следуйте совету Джобса: «Обычные художники заимствуют – великие воруют».
	!!!Прикладная разработка не место для эстетического наслаждения от красот технологий. Это бизнес.
	!!!Надо оценивать эффективность архитектуры не в терминах красот, а в терминах трудозатрат.
		# С прикладной разработкой всё относительно просто: есть функционал, оцениваемый заказчиком или маркетологами в конкретную сумму, есть трудозатраты на его реализацию, остальное – прибыль от деятельности.
		
Паттерны:	
	Для новичка чтение паттернов является лишним. Он должен поломать голову, придумать свой вариант а потом можно читать.
		Да и показательно, что для каждого языка придумывают свои шаблоны.
	
	Так же поразительно - сейчас везде говорят о шаблонном подходе или шаблонном мышлении. Хотя всегда поддерживался творческий подход.
	
Новые технологии
	Часто новые технологии это стандартизация и за эту стандартизацию приходится платить.
		Примером тому может служить БД в виде двоичных файлов (которая за 6ть лет приобрела объем в 3ТБ) задача была, перевести на современные средства хранения информации в итогде база в SQL Server составила 6ТБ после оптимизации 4,5TБ (как пример 3х питовое поле индикации состояния пришлось перекладывать в байт минимальный тип в БД итд)
	При этом те программисты, что разработывали раньше ПО были погружены в процесс и проблематику по максимому, что давала хороший результат как при разработке, так и при поддержке. Была хорошая документация даже по прошествии большого числа времени с такой документцией приятно работать. Сейчас же все иначе, документация если и есть, то не является содержательной и полезной.
	
	
	Дж. Фокс [2] выводит из своего опыта проектной работы в IBM важную мысль, что большой ошибкой является привлечение к процессу внутреннего тестирования и обеспечения качества посредственных программистов. По его мнению, компетентность специалиста в этом процессе должна быть не ниже архитектора соответствующей подсистемы. Действительно, ведь оба работают примерно на одном уровне, просто один занят анализом, а другой – синтезом.
	

Итого:
	* В итоге в голове отложилось что разработчик должен быть полностью погружен в тек. задачу. Отличает разработчиков тех времен от нынешних что была полная погруженность в автоматизируемый процесс, хорошая документация при разработке.
	* Сейчас зачастую применяются большие фраемворки для одной малой задачи, одной маленькой функциональности приходится тащить за собой целые тонны кода и без того испещеренных ошибками кода, добавляется еще много ненужного
		# При этом контроль теряется - человек не способен контролировать такие большие фраемворки и что там творится какие там баги. Т.е. тем самым мы просто вносим все больше энтропии.
		# Слишком много прослоек, и тут добавляются новые проблемы, слишком много всего. Не возможно просто предугадать что и где упадет, что где происходит.
	* ООП и др. методологии не панацея. Есть лишь подходящие инструменты или не подходящие для решения конкретной задачи.
	* SQL - это хорошо! Много задач можно решить праильным применением СУБД.
	* Слишком много информации приводит к фрагментации знаний, отрывочности.
	* Какчество ПО такое, потому, что это требует бизнес. Софт не критичный - ошибки простительны (это же не космическая отрасель). Для решения задач создаются инструменты для средних разработчиков соответственно в разработку идут непрофессионалы итд. итп.
	
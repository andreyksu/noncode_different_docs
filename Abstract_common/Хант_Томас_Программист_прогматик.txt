- Рекамендует книгу Ивар Джекобсон в части требований.
- Стр 205(187) - приведен пример что должен содеражать вариант использования (по мотивам А Кокбэрну)

Основная мысль в книге, относиться ко всему критически и оценивающе (касается и требований и инструментов и методологий)

Глава_1
	* Позаботьтесь о вашем ремесле 
		# Cмысл делать, если не делать это качественно.
	* Думай о своей работе
		# Во время работы, думайте только о совоей работе.
	* Продумайте о варианте решения проблемы а не варианты отговорок.
		# Нужно думать о решении проблем и причинах проблем а не о том как отмазаться.
	* Все начинается с разбитого окна. 
		# Т.е. одно попустительство порождает дальнейшие попустительства.
	* Энтропия ростет
		# Это относится к ПО в первую очередь.

	$ Эд Йордан - сздание приемлемых ПО - приемлемых для ваших пользователей, служб сопровождения и сточки зрения вашего же собственного спокойствия.
		Приемлемых - значит отвечающих требованиям пользователей.
		Многие предпочтут иметь Хороших программистов но сегодня, чем Отличных но завтра. Так же и с ПО. Возможно стоит дать пользователям пусть еще и не до конца готовый продукт. Но их ответ, реакция будет полезной для разработки.

	При разработке ПО нужно знать когда остановиться и прекращаться шлифовать, и добавлять свистелки. Очередным мазком можно все испортить.

	*Относитесь к своим знаниям как к портфелю ценных бумаг - а в этот портфель нужно инвестировать постоянно.
		# Портфель нужно ПОСТОЯННО пополнять, обновлять. Главное РЕГУЛЯРНО!
		# Соотносить с тек. рынком, учитывая потребности рынка.	
		# Ценные бумаги должны быть из разных сфер.

	* Учите как минимум по одному языку программирования каждый год.
	* Читайте по одной технической книге ежеквартально. Как привыкните по одной в месяц.
	* Ходите на конференции, общайтесь. Изоляция это смертельно для IT.
	* Подпишитесь на информационную рассылку.
		# Вообще по новостям да и по тек. интересу/проекту/задаче.

	* Собеседник
		# Знайте что хотите сказать. Готовьтесь к разговору.
		# Знайте своего собеседника. Мы говорим когда хотим донести информацию, и ведь для этого нужно знать что хочет слышать собеседник, как он слышит, как он мыслит.
		# Перед тем как просить - нужно подумать, а интересно ли сделать человеку это и что его может подубить.
		# Помнити психотип собеседника - кому-то нравится вводная и обширные объяснения, кому-то нравятся сухие факты. Кому-то нравятся отчеты объемные, кому-то пояснительные записки.
		
	* Отвечайте на письма, сообщения людей
		# Даже если ответ будет звучать "посмотрю чуть позже" итд. "Я вернутьс к вопросу чуть позже"

Глава_2
	* Избегайте дублирования
		# Создавайте библиотеки, создавайте автогенерируемые доки итд
		!!! По возможности нужно делать все через методы, даже те же величины или возврат разницы или длины, все делать через методы, так как можно будет потом добавить уловия для ускорения рассчета(допустим если не изменились параметры, то возвращаем из КЭШа стр. 26(43))
	* Ортогональность
		# Изменения в одном модуле, компоненте не должны влиять на др. модули или компоненыты.
		# Исключайте взаимодействие между объектами, не относящимися друг к другу.
			$ Ортогональный подход подвигает к многократному применению, так как модуль имеет конкретную и четкую сферу применения, с черченным кругом задач.
			$ Локализация ошибок, т.е. они будут присутстовать только 
		# Ортогональные системы это системы независимые, изменения по одной из осей не влияет на вторую ось.
			$ Сохраняйте вашу программу несвязанной
				% Пишите малые модули, не расскрывая лишнее для вшених модулей
			$ Избегайте глобальных данных
				% А что если понадобится, что бы Ваша программа была многопоточной.
				% Часто Singleton применяется в Java как источник глобальной переменной - но это ошибка.
	* Стрельба трассирующими.
		# По сути это разработка прототипа - но протоитп это, нечто, что уже содержит в себе некое законченное и отлаженное приложение (по сути одноразовая программа, которая не будет завершена, может быть написана на высокоуровневом языке, и этот протопит потом будет безжалостно выкинут)
		# А стрельба трассирующими, это по сути только отработка пусть и с ошибками но отработка того, что предпологается разрабабывать (это каркас, на базе которого будет сроиться система)
		~ И то и то это области риска - когда опасно сразу разрабатывать детальные модели, требования меняются, заказчик сам не знает что хочет, платформа для нас новая итд.
	* Делайте оценки
		#Оценку нужно делать исходя из контекста и понимая какая точность при этом нужна. Сделав оценку можно избежать многих проблем.
		
Глава_3
	* Нужно давать типы, наименование переменных, полей в том виде, что человек поймет прочитав это поле, значение, переменную итд. Даже когда исхоное ПО уже было удалено, а базы в виде XML уже остались и тип <TelNum>2323-333-33<TelNum> - будет понятен любому.
		# Примером может служить и текстовые настроечные файлы для Linux 
	
	* Используйте систему контроля версий.
	* При решении или возникновении дефекта - не нужно думать, что где-то что-то не так (в библиотеках )
	* Используйте и не пренебрегайте как командной строкой так и средствами работы с тектом grep, sed, awk, perl, python, ruby

Глава_4
	* Как и в жизни должны быть контракты
		# Перед тем как писать модуль, нужно прописать то что он доджен делать "Предусловия, Постуслования, Инварианты класса"
			$ Контракт: Для того что бы использовать модуль вы должны выполнить условия ..., если вы их выполните, то получите что ожидаете, если нет, то получите исключение.
		# Рекомендуется писать "скромные" программы - проявите строгость в том что вы принимаете до начала работ и обещать как можно меньше взамен.
	
	
Глава_5
Закон Диметра	
	* По примеру работы с подрядчиком и субподрядчиком - будучи заказчиком меня не интересует кто и сколько субподрядчиков, об этом забодится головной подрядчик и он же отвечает за их работу и качество.
		# Вот нечто аналогичное должно можно и нужно делать при проектировании.
			$ Подобный подход позволит избежать связанность модулей и компонентов, и изменение в одном классе повлечет за собой меньше последующих корректировок.
			
	* Нужно выносить все подробности в файлы или др. конфигурационные хранилища.
		# Возмжоно внесение изменений без перекомпиляции.
		# Делает систему более гибкой и настраиваемой.
		
	* При проектировании думайте что ваш модуль будет использоваться в параллельном режиме, в этом случае пропадут из кода глобальные переменные, модуль станет более независимым.
		# Но не стоит усугублять. Имеется ввиду, что это поможет лучше понять где и что.
		
	* Класс или модуль считается четко определенным если у него имеется одна четко обозначенная обязанность.
	
	
	* Модель - это по сути данные. Не распологает ни о контроллерах и о физуальных представлениях.
	* Визуальное представление - некоторая интерпретация модели. Подписывается на изменения в модели и на логические события приходящие от контроллера.
	* Контроллер - механизм координации и не должен оссоциироваться с усройством ввода любого типа. Способ контроля визуального предсатвления и снабжения модели новыми данными. Он осуществляет публикацию событий для модели и визуального представления.
	
Глава_6
	* Сложность алогоритмов
		# Рассматривается сложность алгоритмов в контексте времени выполнения.

	* При использовании подхода контрактной разработки, хорошо разрабатывать модульные тесты и входные данные для них.
	

Глава_7
	* Требования политики и требования к программе не являются одним и тем же.
		# Требования к политики често меняются и не нужно встраивать их в софт (сегодня одни имеют доступ к делам сотрудников, завтра еще другие итд)
		# Данные требования должны быть разделены по разным группам и между ними могут быть лишь ссылки.
		
	* Поработатйте с пользователем что бы понять его потребности.
		# Нично не дает понимание потребностей пользователя если не стать этим пользователем.
		
	* Документы не должны быть излишни детализированными. Документы должны быть в меру абстрактными.
		# Где то уместно просто требование, без излишней детализации или же без варианта использования.
		# Варианты использования также должны быть несколько абстрактными.
		
	* Всегда нужно поддерживать и развивать глоссарий проекта.
		
	* Начинайте тестировать с самого начала (написали чуть-чуть) кода, потестировали (написали тесты).
		# Программа не считается написанной пока не пройдет тестирование.
			$ Модульное тестирование
			$ Комплексное тестирование (тестирование взаимодействия модулей)			
			$ Подтверждение правильности и верификация
			$ Тестирование в условиях нехватки ресурсов, ошибки и их исправление
			$ Тестирвоание произвеодительности
			$ Тестирование удобства использования
	
	* Комментарии должны обсуждать - почему выполняется та или иная операция ее задачу и цель. А как это делается объясняется самим кодом.
		
	Программисты прогматики не укланяются от ответственности. Вместо этого они испытывают радость, принимая вызовы и распространяя свой опыт.
	
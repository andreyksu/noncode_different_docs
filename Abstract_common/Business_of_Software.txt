Эрик Синк
Bussines of Softvare

1. 	Автор предлагает не тягаться с групными конторами, а брать заказы, что крупным конторам будут не интересны.
	Как правило это узкоспециализированные области. Т.е. не горизонтальные направления, а вертикальные направления (допустим не XL или OS, а допустим что то специализированное для стоматологии).

2. 	Так же не стоит браться и бороться за слишком большие суммы, так как вероятно, что заказ не удастся выполнить (слишком большой объем работы и есть шанс его не выполнить).

3. 	Так же автор предлагает работать только на свои деньги а не на деньги инвестров. Компания будет работать лишь до того времени пока не начнет работать в убыток, и не потрати все деньги. В др. же случае, при достижении данного положения, компании уже не будет, а платить придется.
	Чем больше вы берете кридет тем больше нужно зарабатывать (а что если доход ограничен?)

4. Маленькие конторы должны писать продукты а не платформы (не нужно городить свои платформы, уже все есть).

5. Чаще стоит покупать готовые продукты для решения нецелевых задача. Лучше сконцентрироваться на целеевых задачах бизнеса и клиентах.

6. Автор считает, что на всех позициях в компании должны быть разработчики. (начиная от самих программистких задач, заканчивая менеджментом и др. областями) особенно это касается маленьких фирм.
	Так же автор делает четкое разграничение между разработчиком и программистом. Разаработчик по его мнению, должен делать все задачи начиная от программирования, тестирования, написанием технической документации и общением с клиентом для понимания целей проекта/продукта (не только при обследовании но и при поддержке).

	Все как в Google (Судя по книге "Как тестируют в Goodle").

7. Нужно постоянно учиться, это должно быть не событийно а должно быть постоянным процессом (на работе да и везде). Это стиль бытия.
	- Самое важное учиться на сових ошибках (часто люди старательно пытаются скрыть свои ошибки, забывая что на них нужно учиться и их нужно разбирать с тек кто может выступить в виде наставника).
	- Опять же это делает человека более уязвимым - по этой прчине не нужно придвавать широкой огласке (только для соратников).

8. Если у предполагаемого продукта нет конкурентов, то нужно насторожиться, а есть ли место сбыту, если даже конкурентов нет.
	Избегание конкурентов - это избегание клиентов. Т.е. Конкуренты там где есть клиенты.
	Люди делают деньги побеждая конкурентов, а не избегая их.

8.1 Перечень вопросов:
	- Решает ли продукт какую-то реальную проблему?
		Нужно продукт что будет решать проблему и за что люди будут готовы отдать денег (цена от 500 - 1000 $)
	- Кто выши будущие конкуренты?
		* Нужно тщательно изучить конкурентов.
		* Как вы будете конкуририровать к др. играками на рынке?
	- Есть ли у продукта отличительные списки?
		Просто выпустить продукт с идентичными параметрами и завоевать часть рынка - не выход, за схожую функциональность люди не будут рисковать и будут покупать уже изветных играков.
	- Сколько времени уйдет на разработку такого продукта?
		Сколько времени придется сидеть без денег?
	- Как продавать?
		Нужно что бы покупался продукт через интеренет!
	- Сколько потребуется времени на техническую поддержку?
	- Хватит ли доходов, даже еслидела пойдут как ожидалось? А если в 5 раз меньше?

9. Есть вариант быть "прилипалой" т.е. писать плагины к уже существующему продукту (который будет решать конкретную задачу).
	- Нужно понимать как выходить на рынок в виде плагина.
	- Как отнесется к этому вендор?
		* Возможно вендор сам станет конкурентом, узнав о насущной проблеме и закрыв его самостоятельно.

10. Очень важно продумать позиционирование продукта. Дать понять людям для чего этот продукт нужен. При этом должно быть понятно из первой строки.
	Нужно ориентироваться на узкий круг на специфический круг задач.

11. Как выйти на рынок?
	Нужно найти "страдающего прагматика" которому нужно решить свою проблему.
	И продавать и ориентироваться на него.

12. Очень важно понимать что выбор технологии один из важнейших шагов.
	Нужно понимать, что выбрав Java или C# нужно будет поставить и установить покупателям еще и эти виртуальные машины и их либы - а это может отпугнуть.

13. И снова о важности наличия конкурентов.
	- Их наличие свидетельствует о наличии потребноcти.
	- Не обязательно быть лидером среди конкурентов, второе или третье место не означает проигрышь - они имеют приличных доход.
	- Выпустив продукт первым, есть шанс оценить чего не хватает в уже выпущенном приложении, чем недовольны потребители, и какие ошибки совершили при выпуске продукта да и в самому продукте (быть может сервис итд).

14. Если постоянно рисковать, то обязательно попадешь в яму.
	Если рисковать, то стоит рисковать на незначительных/небольших вещах.

15. Проводит разные аналогии (называя их принципами) между жизненными принципами и разрабткой/ведением бизнеса в разработке.

16. Создавайте блоги, где вы будете вести тематические или около тематические форумы или публикации.
		- Это может быть даже статьи о технических вещах или еще о чем-то подобном. В любом случае это покажет покупателям, вашу заинтересованность и ваши ориентиры в лучшем свете.
		- Создавая чаты или форумы, есть возможность собирать обратную связь, как по функционалу так и проблемам.
		- Создайте место, где пользователи могут обсудить с теми кто уже купил ваше ПО.

17. Создавайте демо версии. Мало кто сейчас захочет покупать ПО не попробовав его функционости, учитывая сколько оно стоит.
		- Можно сделать гарантированный возврат денег, после пробы, в течении 30 дней (а можно от 30 и до 50 дней). Не так много людей жалеют сделать возврат. Но это даст прозрачность.
		- По мнению автора, нет смысла делать сильную защиту от взлома, те кто хочет взломать - они взломают его.

18. Цена сильно зависит от позиционирования.
		- Как спозиционировали, так и нужно задавать цену.
		- Нужно помнить, что слишком низкая цена, не дает основание доверять продукту, и настораживает при покупке (хорошая вещь не может стоить дешево).
		- Цена это не просто цифра.

19. Всегда отвечайте на вопросы.
		- Сегодня очень важна техническая поддержка.

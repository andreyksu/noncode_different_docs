Рек(Ключевые процессы тестирования. Глава 3. Выполнение тестов. Стр 93)
	1. Верификация исправленных дефектов (1/4 судя по графику)
	2. Выполнение запланированных ручных и автоматизированных тестов (2/4)
	3. Исследовательское тестирование. (1/4)
	
	стр 344 - описаны действия основные + стр 345 доп. пояснение.
	стр 368 - так же про то, что первое действие это валидация исправлений.
	стр 376 - туда же

---------------------------------------------------------------------
Рек(Ключевые процессы тестирования.)
	- Модульное тестирование UnitTesting - [программист]
	- Компонентное тестирвоание, тестирование подсистем (фаза тестирвоания направленная на проверку компонентов системы или ее подсистем по отдельности) - [программист]
	- Комплексное или интеграционное тестирование (фаза тестирвоания на которой проверяются взаимосвязи и интерфейсы между парами и группами компнентов или подсистем системы) - [тестировщики]
			Комплексное тестирование посвящено поиску ошибок в связях и взаимодействию компонентов.
	- Системное тестирование() фаза на которой проверяется поведение системы как в целом так и в частностях и ее функциональность) - [тестировщики]
	- Приемо-сдадочные испытания, пользовательское приемочное тестирование. - [тестировщики], [БА и СА]
	- Альфа и бетта тестирование - [БА и СА] поведенческое тестирование.
	
	- Для оптимального поиска и устранения дефектов необходимо подвергнуть систему структурному и функциональному тестированию, а так же тестированию в реальных условиях.
	 - Параллельная работа - конкуретная работа.
	 - Работа со временем (везде где есть календари, учет времени, запуск чего-то по ремени(задач или еще чего), остановка ПО смещение времени запуск ПО просмотр поведения)
		- Важно проверить назначение задач или то, что должжно выполняться автоматически.
		- Для отчетов или же печатных форма должны быть проверены поля и из изменение, соответствие действительности.
	 - Остановка ПО при многосерверености в момент передачи данных
	 - Отмена различных действий(в момент их выполнения)
	 - Остановка ПО и запуск ПО когда действие остановилось на середине.
	 - Тестирование на объемных данных.
	 - Тестировние стабильности - выполнение одного и того же на протяжении нескольких дней.

---------------------------------------------------------------------
Методы и методики генерации тестов:
	- На базе требований.
	- На базе UseCase, WorkFlow.
	- На базе рисков RiscBaseTesting.(Неформальный анализ, Метод стандарта ISO 9126, Методика стоимости обнаруженя проблемы, Анализ видов ошибок и их вленияне)		
		Рэкс стр. 39, 438, (440-443 покрытие + риски расписаны на графике)
		Функциональность.
		Нагрузка производительность, объем
		Надежность, стабильность работы.
		Перегрузки, обработка ошибок, восстановление.
		Обработка дат и времени.
		Качестов данных
		Производительность.
		Безопасность.
		Установка/перенос.
		Документирование
		Интерфейсы.
			- Нужно сосредоточить внимение на том что нужно потестировать и не принимать во внимение много нериальных условий.
			- Тестирование несущесвующих или малоприоритетных кейсов - дают ложное ощущение о качестве системы. Они тратят время проекта как у БА так и у программистов. В то время как серьезные дефекты не обнаружаются и остаются в системе. (Рэкс стр. 35) Т.е. есть ряд ошибок которе не повлияют на выпуск системы.
				Хотя и привествуется обнаружение разных ошибок - но все заканчивается необработанными отчетами об ошибках или невыполненными наборами тестов.				
			- Начинается с анализа перечня различных категорий проблем, присущих системам, а затем конкретезируются виды ошибок в рамках этих категорий.
					- Нуждно оценить какие области будут покрывать тесты. И при написании тестов нужно начинать с минимального описания и детализации - просто набросок.
					- На основании знания расков качества можно набрасть перечень тестовых сценариев а так же оценить время их выполнения.
					- Иследовать по одному риску качества, сопостовляя с ними тестовые сценарии и фиксируюя информацию о покрытии тестами.
			- Определяются риски качества дальше они приоритеризуются(Рэкс. стр. 40 по Серьезности, Вероятности возникновения, Приоритетности) и исходя из этого в зависимости от приоритетов выделяются группы.						
				- Подробное тестирование
				- Сбалансированное тестирование
				- Тестирование по возможности
				- Информирование о наблюдаемых дефектах
	- Классы эквивалентности:
		Если от выполнения двух тестов ожидается один и тот же результат, они считаются эквивалентными.
			- Все тесты предназначены для выявления одной и той же ошибки
			- Если один тест выявляет ошибку, то и остальные сделают то же
			- Если один не выявляет ошибку, то и остальные этого не сделают
	- Граничные значения.
	- Диаграммы состояния и переходов.
	- Метод парных значений(нужно с ними разобраться)
	
Сами ошибки и их цель:
	- Обнаружение ошибок которые будут устранены, или предотвращат их внесение.
	- Обнаружение ошибок которые не будут исправлены но о кторых будет известно.
	- Проведение тестов, которые снижают (потенциальные затраты) риски.
	- Обеспечение проекта своевременной, точной и заслуживающей доверия информацией.

Работа с тестами/тесткейсами.
	Написание новых тестов (новые могут возникнуть в момент анализа системы и выявления новых рисков, которые не были обговорены или прописаны. Так же из за бреши в анализе БА или СА.)
	Редактирование существующих
	Удаление существующих по причине изменения ПЗ, требований, функционала.
	
Тесты выделяемые на регресс
	- Часть ПО к которым принадлежит новые фичи.
	- Те области с которыми сопряжены новые фичи(доработали корзину и нужно проверить оплату).	
	- Далее идет приоритезация тестов исходя из рисков и частоте использования фунционала.
	- У Рэкса есть глава где кратко затронут вопрос о регрессе(общая суть, состоит в том, что нужно на регресс вытаскивать больше функционала ибо мы не всегда имеем данные о том что и как было исправленно и как это может повлиять)
	
---------------------------------------------------------------------
Определение стратегии, тактики и составляющие работы тестирования(Рэкс стр 171):
	- Для тестирования функционала будет использовано авто тестирование(покрываем риски).
	- Тестирование нагрузки будет производиться через API + к готовым инструментам 
	- Тестирование безопасности будет проводиться вручную
	- Тестирование падений и восстановления так же будет провдиться вручную.
Определинеи критериев начала, окончания и продолженя  каждого вида тестирвоания(Рэкс стр. 163.).
	- Определение тестов на регресс. Как будем решать этот вопрос.

---------------------------------------------------------------------
При определении времени:
	- Сложость фичи
	- Опыт тестирования подобного функционала
	- Опыт работы с этим постановщином и программистом (командой)
	- Интеграция с др. системами.
	- Наличие автоматизации.
	- Снимать метрики в ходе тестирования. (т.е. опыт из прошлых проектов.)
	
Планирование:
	- Определить основные фазы проекта + временные параметры/границы
	- Декомпозиция задач на подзадачи + определение по времени. (но перед этим нужо оценить каждую задачу и активность. нужно определить зависимости от др. групп.)
		Каждая задача должна быть детерминированна однозначно по времени + один человек ответственный за задачу. Задача должна быть короткая про времени.
		Определить входнрые и выходные документы.
		Оценка ресурсов для задачи.
		Оценка зависимостей(от чего зависим)
		Независимость после начала.
	- Если тестирование не будет управляться качеством - то оно лего перейдет в безрассудную трату времени, денег и сил. Что доставит лишние проблемы.
	- В реальных проектах нужно находить баланс между тем, что нужно тестировать и тем что мы можем протестировать - исходя из реальных условий проекта. Денег, сроков итд.
	- Предыдущий проект может быть примером как по числу дефектов так и по затратам времени. - Но лишь приближенно.
	- Первое с чего нужно начать:
		Определить сроки исходного проекта - начало тестирования, итерации, окончания определенного вида тестирования. Дальше имеея эти сроки начать планировать время для тестирования. Рэкс предлогает планировать с конца проектов.
	- После того как опеределны временные рамки тестирования исходя из проектных времен. Необходимо начать декомпозицию задач.
	!!! Правило 9месяцев - не всегда увеличение людей приводит к ускорению процеса, бывает даже приводит к замеделению. Ребенок родится через 9месяцев не зависимо от числа участников.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Отчеты по тестированию(Рэкс):
- Должны быть понятными всем, должны быть полезными для руководства. Легки для восприятия. Они должны позволять понять, что имеем после проведенного тестирвоания, что првоеренно, что не првоеренно.
- Рекс говорит - что обязательно в отчетах пишет, кроме того что было проверено еще и то что не было проверено (Об этом же говорится и в интервью с Google) 
- Так же нужно помнить - что нереалистичные ожидания от руководства - это целая проблема и с ней нужно бороться.
- Основная ценность тестирвоания в его своевременном информировании.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Процесс тестирования является контексто зависимым. 
	И при планировании времени или построения плана графика нужно это учитывать. Учитывать эти связи. 
	Так же есть риски из за этого, выполнение или невыполение задач др. группами приводит к тому что гр. тестирования так же затягивает свои сроки. Это нужно учитывать при декомпозиции.
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
глава 10-11
Генерация тестов:
1. Разработать тесты, что покрывают риски.
2. Разработать тесты для критического раздела системы, который еще не покрыт тестами. (Условия, которые могли бы спровоцировать определенный набор проблем или смоделировать практическоие испльзование системы)
3. Спроектировать, разработать, документировать средства тестирования, тестовую среду и процесс выполнения тестов.
4. Проверить систему тестов (статические и динамические тесты).
	Классы эквивалентности, Use-case итд это методы направленные на минимизацию тестов(количества тестов) - Рэкс стр.300-302
	
Тестовое покрытие:
	Это оторажение тестов на свойства/риски/функционал системы (обычно выбирают бинарноую оценку да/нет - покрывает/не покрывает) - Рэкс стр.306
	
При написании тестов не нужно покрывать все сразу глубоко - стоит седалть все итерративно. А потом дорабатывать в части глубины. Так же не стоит брасаться в глубокие тесты по высоким рискам оставив без внимания риски не очень высокие. Иначе получим проверку лишь части функционала. Рэкс стр 328.

Интересная идея, сделать отслеживаемость выполняемого кода при тестировании. Можно так же и на опытную эксплуатацию выполнять аналогичные вещи.

Хорошим показателем качества системы является, то что разработчики пишут тесты и тестируют свои разработки самостоятельно - Рэкс стр. 343


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Глава 12
Подготовка сборки(тестовых версий):
- Нужно четко понимать, что будет включено в новую сборку. Какой новый функционал будет включен, какие баги будут исправлены. 
	При этом нжуно понимать, что новые доработки, что будут отложены на следующие итарции могут повлиять непредсказуемо на уже проверенный и ранее рабочий фцнкционал. По этому откладывая влючение нового функционала и соответственно проверку мы лишь увеличиваем риски.
	Опять же заблокированные тесты из за ошибки или по др. причинам, лишь увеличивают риск, что проблемы будут обнаружены лишь в последний момент.
- Нужно искать компромис. Между частотой поставки ПО с новыми фичами и необновления(т.е. раобта со старой сборкой).
	В одном случае мы имеем неглубокое тестирование - и слишком частый регресс.
	В др. случае мы имеем проверку и фиксацию ошибок, что возможно были исправлены.
- Сборка должна иметь файл изменений или список изменений. Тестировщики должны работать внимательно с этой информацией. Все должны четко понимать, что будет в системе и что нужно включить. При этом нужно соблюдать разумную частоту деплоя новых сборок.
- Сборка должна быть обязательно нумерована. Иметь версию итд. Что дает понимание с чем работаем.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Глава 13
- На оснве приоритетов рисков, ограничений и др. соображений - выбрать комплект тестов(из всего множества тестов) - которые должны быть выбраны в данном тестовом цикле.
- Провести тесты, локализовать ошибки, отчет об ошибках.
- Подготовить отчет о проведенном тестировании, о выполненых или невыполныных тестах
- Ежеденовно готовить отчеты о проведенном тестировании, уточнять ответственных за тестирование компонентов, пересматривать планы и приоритеты.
- Необходимо указывать время прохождения тестов(затраченное время) - т.е. та информация что содержится сейчас в тестах являетс полной. (В тех тестах что сейчас есть на проекте)
- Так же важно анализировать найденные ошибки их включать в тесты и анализировать возможные ошибки.
- Пример перехода от важных ошибок к глянцу - Рэкс стр 383

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Глава 14 (Рэкс стр. 396)
Отчеты об ошибках
- Серьезность и приоритет - две метрики(это отсутствет сейчас в проекте)
- Приложение всяческих логов итд
- Окружение
- Корреткность писания (локализация ошибок, обобщение)
- Можно описывать дополнительно влияние ошибки на пользователей.


- Обнаружение ошибок и исправление это лишь тактический уровень полезности тестирвоания.(нужно раобтать выше, отчеты об ошибках, предотвращение ошибок на базе рисков и др. методик)

- Про нагрузку в реальных серверах и моделях стр. 478
- Хорошее высказывание про тестирование стр. 483
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Глава 1 - Выявление контекста, цели тестирования, задачи, среды, выбранного процесса, цикла итд
Глава 2 - Определение рисков системы (нужо изучить эти методики, что предлогаются. Две из них скачал)
Глава 3 - Палнирование/оценка затрат(определиние временных параметров проекта, встраивание процесса тестирование по времени, определение работ для тестирвоания в том числе и стенд и др. моментов, декомпозиция по пунктам рекамендованным в книге).
Глава 4 - Пропустил
Глава 5 - Дополнение к главе 3. Определение доп. влияний на графики и планы.
Глава 6 - План на тестирование (стенд, критерии начала и окончания тестирования каждой фазы, стратегии тестирования, определение тестов на регресс)
Глава 7 - ?
Глава 8 - Подбор тестеров - пропустил
Глава 9 - Персонал - пропустил
Глава 10 - Разработка тестов
Глава 11 - Продолжение + покрытие, так же про разные методы генерации тестов но просто перечислением
Глава 12 - Про управление версиями(должны быть версии сборок, должно регламентироваться что включается в сборку)
Глава 13 - Выполнение тестов
Глава 14 - Как составлять баги - тут есть рекамендации к составлению/описанию бага
Глава 15 - Составление отчетов по тестированию. Всякие динамики, что прошли а что нет, динамика открытих и закрываемых дефектов.
Глава 16 - Изменения в сборки риски итд, риски связанные с этим
Глава 17 - Про зрелость процесса СММ итд + как влияет тестирвоание.



Чего нет:
	Нет понимания, что проверялось и что проверено(видимо нет понимания что нужно и что должно быть)
	Нет понимания, что покрывают наши тесты, какие кейсы какие риски нет понимания. Нет никаких метрик прохождения.
	Нет понимания как проверялось и как этому доверять.
	От сюда и отчеты об ошибках отсутствуют - Вероятно нужно базироваться на критериях гр. ВПО.
	
	Так же метрика число открытых и число решенных/исправленных.
	Если тесты базируются на кейсах или на поведении пользователей, то число прошедших и непрошидших тестов можно считать косвенно качестовом (т.к. пользователи выполняя свои действия также будут вспотыкаться)
	Важно классифицировать ошибки (производительность, функциональность, UI итд.)
	

	
Чеклисты:
- Внимательная работа со временем, календарями итд особоенно если они являются тригерными (т.е. по условию что то происходит, назначаются задачи итд.)
- Параллельное тестирование или работа с одной сущностью при 2мя или более пользователями.
- Работа в нестабильном состоянии - удаление чего либо, когда это что либо используется для работы/создание др. сущности.
- Нагрузка или генерация большого числа данных.


Мысли:
1. Обязательно в названии таски указывать общие слова для поиска (т.е. унификация названий задач)
2. Градации по виду дефекта, их группировка (функционал, ui итд) - Т.е. дабы понимать, к чему дефекты относятся при оставлении статистики найденных ошибок.
3. Метрики по новым и закрытым ошибкам
4. С первого дня думать о покрытии тестами. что покрываем, как покрываем, как быть уверенным, что мы тестим то что нужно а не ерунду.

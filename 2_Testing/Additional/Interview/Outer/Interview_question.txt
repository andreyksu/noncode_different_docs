1. Различия между реляционной и нереляционной базой
	- Реляционные и нереляционные базы данных – два способа хранения данных для приложений. Реляционная база данных (или база данных SQL) хранит данные в табличном формате со строками и столбцами. Столбцы содержат атрибуты данных, а строки – значения данных. Можно связать таблицы в реляционной базе данных, чтобы глубже понять взаимосвязь между различными точками данных. С другой стороны, нереляционные базы данных (или базы данных NoSQL) используют различные модели данных для доступа к данным и управления ими. Они оптимизированы для приложений, которые работают с большим объемом данных, нуждаются в низкой задержке и гибких моделях данных. Все это достигается путем смягчения жестких требований к согласованности данных, характерных для других типов БД.
2. DELETE и TRUNCATE, определения первичного и внешнего ключа.
	- TRUNCATE — в языке SQL — операция мгновенного удаления всех строк в таблице.
3. Запросы - с использованием JOIN, группировки и вложенного запроса.
4. Видам авторизации, сессиям, видам API (REST/RESTful, SOAP, их различия), по кэшированию и инвалидации кэша, а также по CI/CD
	- REST/RESTful (REST (Representational state transfer))
		https://habr.com/ru/articles/319984/
		https://habr.com/ru/articles/483202/
5. Значительная часть вопросов была по HTTP - запросам/ответам (структура, версии, методы, заголовки, статус-коды).
	Например, про принцип работы HTTPs, идемпотентность методов, как сервер может узнать, что в запросе передан JSON и т.д.
6. Завершали эту секцию вопросы о различиях между монолитной и микросервисной архитектурой, брокерах сообщений, особенностях Apache Kafka.
	- Различия между монолитной и микросервисной архитектурой
		- Структура приложения. В монолитной архитектуре все компоненты объединены в неделимую единицу, а в архитектуре микросервисов компоненты организованы в более мелкие независимые службы, ориентированные на определенные бизнес-возможности.
		- Монолитная архитектура — это традиционная модель разработки программного обеспечения, в которой одна база кода используется для выполнения нескольких бизнес-функций. Все программные компоненты монолитной системы взаимозависимы из-за использования встроенных механизмов обмена данными внутри системы. Модификация монолитной архитектуры возможна лишь частично и занимает много времени, поскольку даже небольшие изменения затрагивают большие области базы кода. Напротив, архитектурный подход на основе микросервисов подразумевает, что программное обеспечение состоит из небольших независимых компонентов (сервисов). Каждый сервис выполняет одну функцию и взаимодействует с другими сервисами через четко определенные интерфейсы. Поскольку они работают независимо, вы можете обновлять, изменять, развертывать или масштабировать каждую службу отдельно по мере необходимости.
7. Были вопросы про:
	- Тех долг - не виден и не на поверхности.
				- https://www.youtube.com/watch?v=WlkYHcYckKU технический долг.
				- Это имеенно то что нужно будет сделать - именно нужно. Т.е. сам плохой код не является тихническим долгом - т.к. не факт что его придется править.
					- Техническим долгом может быть:
						- Недоделанный кусок из за спешке в релизе
							- Несопровождаемость
							- Нетестируемость
							- Не соответствие правилам оформления кода.
						- Отсутствие тестов
						- Отсутствие документации.
						- Сильная связанность компонентов.
				- Но технический долг может быть и вынужденным компромисом.
	- Практики shift left и shift right тестирования.
			- Принцип «Shift left» привлекает команду тестировщиков еще на ранней стадии разработки программного обеспечения. Следовательно, они могут четко понимать требования, архитектуру ПО и разрабатывать тестовые примеры уже на начальном этапе, появляется возможность исправлять все сбои как можно раньше. 
				- Это понимание позволяет тестировщикам получить полные знания о продукте, проанализировать и спроектировать различные сценарии, которые помогут команде выявить дефекты даже до того, как будет выполнено написание кода. 
				- Подход «Shift Left» фокусируется на привлечении тестировщиков до критических этапов в разработке. Это позволяет предотвращать дефекты, а не находить их в конце.
			- Принцип «Shift right» Сдвиг вправо — это практика перемещения некоторых тестов позже в процессе DevOps для тестирования в рабочей среде. Тестирование в рабочей среде использует реальные развертывания для проверки и измерения поведения и производительности приложения в рабочей среде.
				- https://club.cnews.ru/blogs/entry/import_sdvig_testirovaniya_vpravo_vozniknovenie_testops_1c27
				- Сдвиг тестирования вправо. Возникновение TestOps
				- Сдвиг вправо влечет за собой проведение дополнительного тестирования на этапах пререлизной и пострелизной версий (т.е. тестирование в продуктивной среде) жизненного цикла приложения. К ним относятся такие практики как: валидация релиза, деструктивное/хаос-тестирование, A/B и канареечное тестирование, CX-тестирование (например, корреляция поведения пользователя с тестовыми требованиями), публичное массовое тестирование, мониторинг сред эксплуатации, извлечение тестовых представлений и сценариев из данных продуктивных сред. Shift-right не только вводит такие методы тестирования, но также требует, чтобы тестировщики приобретали новые навыки, активно использовали данные продуктивных сред для разработки стратегий тестирования, сотрудничали с новыми заинтересованными сторонами такими, как SRE-инженеры и инженеры по эксплуатации. В тенденции к сдвигу вправо и расширении сотрудничества с эксплуатацией, мы видим эволюцию новой дисциплины в DevOps, которую называем TestOps.
					- Customer Experience (CX) — ключевой показатель качества для цифровых приложений
					- Канареечное тестирование проверяет новые функции в приложении, не оказывая при этом влияния на user experience или сводя это влияние к минимуму.
						Итак, канареечное тестирование — это проверка новых функций на неком ограниченном числе пользователей, с целью снижения рисков и поддержания работоспособности системы без перерывов и простоев. Мощный и практичный метод тестирования, подразумевающий инкрементное развертывание кода в live-окружении.
					- A/B-тестирование — это неотъемлемая часть процесса работы над продуктом. Это эксперимент, который позволяет сравнить две версии чего-либо, чтобы проверить гипотезы и определить, какая версия лучше. Должны ли кнопки быть черными или белыми, какая навигация лучше, какой порядок прохождения регистрации меньше всего отпугивает пользователей?
	- Scrum
		?????
1. Приемочные тесты.
2. Прогон по новому фунционалу
3. Старого фунционала - регресс.
---------------------------------------------------------------------
По знанию внутренней системы (черный, белый, серый)
По объекту тестирования (функциональное, не функционаьное, локализации, тестирования производительности, безопасности, удобства, совместимость)
По субъекту тестирования (альфа, бетта)
По времени проведения тестирования
					альфа: приемка, новых функций, регресс, тест сдачи
					бетта:...
По критерию позитивность сценариев (позитив, негатив)
По степени изолированности тестируемых компоентов (компонентоное, интеграционное, системное)
По степени автоматизированности тестирования (ручное(мануальное), авто., смешанное)
По степени подготовки к тестированию (по документации, эд-хок тестирование - т.е. смоук)
---------------------------------------------------------------------
Написание новых тестов
Редактирование существующих
Удаление существующих
---------------------------------------------------------------------
При определении времени:
- Сложость фичи
- Опыт тестирования подобного функционала
- Опыт работы с этим постановщином и программистом (командой)
- Интеграция с др. системами.
- Наличие автоматизации.
---------------------------------------------------------------------
Тест-план
	- Название тест-плана, Имя автора и номер версии
	- Оглавление
	- Введение - краткая информация о сути и проекте.
	- Документация с требованиями к ПО - здесь перечисляются ссылки на доки которые описывают проект (доки, требования, ПЗ и их приоритеты)
	- Фичи кторые будут тестироваться (название фичи и приоритет)
	- Фичи не тестируемые (почему)
	- Объем тестирования (виды тестирования которые будут прводиться и пояснения к ним)
	- Тест документация (перечисления документов тестирования которые должны быть созданы для проекта)
	- Тест-тулы (пояснения их применения и области)
	- Критерии начала/завершения (критерии начала/заверешния подготовки, критерии начала/завершения исполнения)
	- Допущения (которые влияли на составление плана и в ходе будущего тестирования)
	- Зависимости (список зависимости с пояснениями, от которых будет зависить та или иная часть тестирования)
	- Железо для тестирования ПО
	- Условаия приостановки/возобновления тестирования  (согласование с БА и СА)
	- Ответственные лица
	- Расписание (сроки, когда замораживаются требования, когда начало и окончание стадий, выпуск новых продуктов и исправлений)
	- Оценка риска (как и на что может повлиять итд)
	- Различные приложения
---------------------------------------------------------------------
Тесты выделяемые на регресс
	- Часть по к которым принадлежит новые фичи.
	- Те области с которыми сопряжены новые фичи(доработали корзину и нужно проверить оплату).
	
Далее идет приоритезация тестов исходя из рисков и частоте использования фунционала.

---------------------------------------------------------------------
Время
	- Опыт	
	- Снимать метрики в ходе тестирования.
	

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Классы эквивалентности:
	Если от выполнения двух тесто ожидается один и тот же результат, они считаются эквивалентными.
		- Все тесты предназначены для выявления одной и той же ошибки
		- Если один тест выявляет ошибку, то и остальные сделают то же
		- Если один не выявляет ошибку, то и остальные этого не сделают
		
http://www.4stud.info/software-construction-and-testing/

Обеспечение качества (Quality Assurance), Контроль качества (Quality Control), Тестирование ПО (Software Testing)
	- QA (Quality Assurance, Обеспечение качества) - совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и эксплуатации ПО информационных систем, предпринимаемых на разных стадиях жизненного цикла ПО, для обеспечения качества выпускаемого продукта.
	- QC (Quality Control, Контроль качества) - совокупность действий проводимых над объектом тестирования в процессе разработки для получения информации об актуальном состоянии объекта тестирования в разрезах: "готовность Продукта к выпуску", "Соответствие зафиксированным требованиям", "Соответствие заявленному уровню качества продукта".
	- Software Testing является одной из техник контроля качества и включает в себя активности по планированию работ (Test Management), проектированию тестов (Test Design), выполнению тестирования (Test Execution) и анализу полученных результатов (Test Analysis).

	Теперь попробую дать определения так, как я это вижу в своей "системе координат".
		- Обеспечение качества - совокупность мероприятий, сервисов и действий направленных на постоянное улучшение качества выпускаемого продукта путем улучшения процессов и систематического контроля как за соблюдением этих процессов так и за качеством выпускаемого продукта.
		- Контроль качества - систематические действия, направленные на определение текущего качества выпускаемого продукта, определение относительного изменения этого качества по отношению к предыдущему состоянию продукта и выявление тенденций в отношении улучшения или ухудшения качества в следующем состоянии продукта.
		- Тестирование - набор целенаправленных действий дающих понятие о текущем качестве продукта, подтверждающих то, что разрабатываемый продукт имеет заранее спланированное поведение и характеристики и не имеет незапланированных характеристик и поведения (т.е. дефектов).

		Основные различия:
		- QA, это превентивные действия, попытка недопустить появление дефектов. Понижение рисков появления неисправностей.
		- Тестирование - действия направленые на поиск неисправностей которые уже допущены, либо подтверждение того, что их нет.
		- Контроль качества - действия направленные на оценку текущего состояния продукта. По сути близко к тетсированию. На практике редко (на моей памяти ни разу) выделяется отдельно от тестирования. Т.е. по результатм тестирования у нас есть данные - прошел тест или нет, найдены дефекты или нет. По результатам контроля качества, мы можем вынести вердикт о функциональности продукта - годна она к релизу или нет.


---------------------------------------------------------------------
Верификация программного обеспечения – более общее понятие, чем тестирование. Целью верификации является достижение гарантии того, что верифицируемый объект (требования или программный код) соответствует требованиям, реализован без непредусмотренных фун­к­ций и удовлетворяет проектным спецификациям и стандартам. Процесс вери­фи­ка­ции включает в себя инспекции, тестирование кода, анализ результатов тестирования, формирование и анализ отчетов о проблемах. Таким образом, принято считать, что процесс тестирования является составной частью процесса верификации, такое же допущение сделано и в данном учебном курсе.

Валидация программной системы – процесс, целью которого является доказательство того, что в результате разработки системы мы достигли тех целей, которые планировали достичь благодаря ее использованию. Иными словами, валидация – это проверка соответствия системы ожиданиям заказчика. Вопросы, связанные с валидацией выходят за рамки данного учебного курса и представляют собой отдельную интересную тему для изучения.


---------------------------------------------------------------------
QA и тестирование. В чем разница?

Небольшое вступление о том, что побудило написать эту статью.
 
Для начала давайте посмотрим, что такое тестирование, или Quality Control (в дальнейшем QC). QC это применение техник контроля качества определенных артефактов. Это проверки соответствия того, что мы УЖЕ СДЕЛАЛИ некоторым ожиданиям. Например:

    Проверка соответствия функционала спецификации.
    Инспекция (review) документов относительно требований к их написанию, содержанию и формату. Документом может быть спецификация, календарный план проекта, тестовая документация и т.п.
    Инспекция (review) кода относительно стандарта кодирования, архитектурной документации, требованиям безопасности и т.п.

Если пойти дальше, то можно разделить QC на верификацию (verification) и валидацию (validation).

    Верификация проверяет артефакт на соответствие требованиям, описанным-оговоренным РАНЕЕ, т.е. смотрит в прошлое. Например, заказчик, читающий и утверждающий спецификацию, по которой уже были обсуждения делает верификацию.
    Валидация же проверяет артефакт на возможность его ДАЛЬНЕЙШЕГО использования, т.е. смотрит в будущее. Например, тестировщик, «идущий» по тестовым сценариям, которые составлены на базе спецификации, делает верификацию. Но если ту же спецификацию инспектирует тестировщик на предмет тестируемости, а разработчик на предмет реализуемости, то это уже валидация.

В большинстве случаев точное определение грани между верификацией и валидацией не так уж и важно, а тем более спекуляции на тему что есть что. Важно смещение фокуса, в указанном выше примере у разработчика, инспектирующего спецификацию фокус больше на будущем, т.е. как это реализовать.

Подводя итог, скажем что задача QC это качество артефактов (продуктов), или же другими словами промежуточных и конечных результатов работы.

Теперь давайте посмотрим на Quality Assurance (QA), оригинальные определения.

    CMMI. Quality Assurance – planned and systematic means for assuring management that the defined standards, practices, procedures, and methods of the process are applied.
    PMBOK. Perform Quality Assurance – The process of auditing the quality requirements and the results from quality control measurements to ensure appropriate quality standards and operational definitions are used.
    Wikipedia. Software quality assurance (SQA) consists of a means of monitoring the software engineering processes and methods used to ensure quality. The methods by which this is accomplished are many and varied, and may include ensuring conformance to one or more standards, such as ISO 9000 or a model such as CMMI.

Если сказать в двух словах, то QA отвечает за качество процессов, которые в свою очередь применяются для создания артефактов (продуктов). Инструментарий оценки качества процессов – аудит (см. http://it-tuning.com/?p=819).

Но и это еще не все, на самом деле QA в свою очередь является элементом Управления Качеством (Quality Management — QM). Существуют немного отличающиеся определения о составе QM, приведу важнейшие из них:

    Планирования качества – о качестве продукта, услуг начинают думать с самого начала. Определяются процессы, методологии, стандарты, критерии приемки, контрактные обязательства, целевая среда функционирования продукта и т.д.
    Обеспечения качества – собственно отвечает за качество процессов и их применение
    Контроль качества – техники контроля качества артефактов (продуктов)
    Улучшения качества – постоянные, измеримые улучшения процессов с целью сокращения расходов (деньги, время, материалы), оптимизации работы, улучшения качества продукта и т.п.
    Ответственность руководства (Management Commitment/Responsibility) по отношению к QM – причем это означает вполне конкретные действия, т.е. заинтересованность (лидирование, инициирование) элементов QM, выделение ресурсов (люди, время, деньги), обучение, внутреннее и внешнее «продвижение» отношения к качеству, контроль элементов QM.

---------------------------------------------------------------------
Как понять слабые места при разработке ПО?

У вас относительно молодая и-или быстрорастущая и-или небольшая компания, или ни одно из вышеперечисленного, но проблемы так и сыпятся? Такие как недовольный заказчик, пропущенные сроки, недопонимания, плохое качество, рассыпающийся продукт и т.п.

То этому есть, простое пояснение:

    нет порядка с применением инженерных и управленческих ПРАКТИК
    ПРОЦЕССЫ применения этих практик не установлены достаточно хорошо
    ЛЮДИ недостаточно обучены какие практики, как и когда применять


ПРАКТИКИ

Независимо от того какую методологию вы применяете, просто должны быть, пусть и реализованы по-разному:

    Планирование проекта
    Проектирование
    Анализ, документирование, утверждение требований
    Инспекции кода и документов
    Оценки работ и сроков
    Кодирование
    Юнит тестирование
    Измерения качества, количества работы и т.п.
    Управление конфигурациями
    Непрерывная интеграция
    Функциональное тестирование
    Нагрузочное тестирование
    Управление рисками
    Управление людьми
    И т.д.

ПРОЦЕССЫ
Если просто, то это где входная информация преобразуется с помощью применения практик в выходную.
Соответственно напрашиваются такие составляющие:

    Собственно наличие процессов
    Входные артефакты и их Входной контроль
    Применение такой-то практики достаточно квалифицированными исполнителями
    Выходные артефакты и их выходной контроль

ЛЮДИ
Должны как минимум:
    Быть обучены практикам и процессам
    Быть достаточно квалифицированными выполнять практики и процессы

Отсюда напрашивается довольно простой чеклист, давайте рассмотрим на двух примерах. Шкалу оценок для простоты можно сделать качественную, например, «Да-Нет», или от 1 (хуже) до 3 (лучше). Такой чеклист можно расширять или сокращать в зависимости от ваших нужд. Приведенные примеры не претендуют на однозначную правоту и полноту, важен принцип. Реализация инженерных практик, приведенных в примерах зависит от вас, от вашего проекта, методологии, заказчика и т.п.

Пример 1. Инспекция кода
Инспекция кода вообще делается? 	 
Насколько хорошо описан процесс инспекции кода? 	 
Наличие входных артефактов 	 
— код + требуемая степень покрытия кода инспекцией 	 
— стандарты кодирования 	 
— спецификация 	 
— архитектурная документация 	 
— другие особые требования к коду (безопасность, шаблоны проектирования и т.п.) 	 
Инспекция 	 
— Степень квалификации исполнителя 	 
— подготовленность исполнителя процессу инспекции 	 
— Своевременность инспекции 	 
Наличие выходных артефактов 	 
— доступность, полнота отчетности об инспектировании с комментариями как инспектора, так и последующими автора 	 
— степень исправления ошибок, найденных при инспекции 	 
— возможность проследить состояние кода до и после инспекции 	 
— отчетность о затраченном времени 	 

Пример 2. Тестирование

Тестирование вообще делается? 	 
Насколько хорошо описан процесс тестирования? 	 
Наличие входных артефактов 	 
— наличие и полнота спецификаций 	 
— наличие требований к качеству, критериев приемки 	 
— наличие и состояние прослеживаемости требований 	 
— степень вовлеченности тестировщиков в работу с требованиями и их инспекции 	 
— наличие и полнота плана по тестированию 	 
— наличие тестовых сценариев и степень их соответствия требованиям, тестовому плану 	 
— другие особые требования к тестированию, инструментарий и т.п.  	 
Тестирование 	 
— степень квалификации исполнителя 	 
— подготовленность исполнителя процессу тестирования 	 
— своевременность тестирования 	 
Наличие выходных артефактов 	 
— доступность, полнота отчетности об объеме тестирования 	 
— доступность, полнота отчетности по дефектам 	 
— отчетность о затраченном времени 	 

 

По существу, эти чеклисты являются элементами обеспечения качества (Quality Assurance), которое направлено на качество процессов. Для каждого чеклиста можно «подбивать» сумму ответов, таким образом получиться некоторый рейтинг процесса. А сделав такие рейтинги по всем процессам можно понять слабые места. Причем можно «ходить» как по всем процессам на одном проекте, так и по выбранным процессам на всех проектах в организации, понимая уровень зрелости как процесса, так и проекта.



---------------------------------------------------------------------
Главный стандарт в данной области – ISO 9126 («Стандарт для оценки качества ПО») Международной организации по стандартизации указывает, что тестирование должно осуществляться путем соблюдения следующим критериям: Functionality, Reliability, Usability, Efficiency, Maintainability, Portability

Также, действует стандарт IEEE 829-1998 («Стандарт для тнстовой документации тестирования программного обеспечения»), который определяет перечень необходимых документов для проведения тестирования, а именно: план и журнал его проведения, отчеты об общих и промежуточных результатах тестирования. 
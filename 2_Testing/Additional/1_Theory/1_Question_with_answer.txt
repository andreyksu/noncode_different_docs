~ # * + = - < >

Всё в одном месте.
    https://habr.com/ru/companies/yandex_praktikum/articles/758384/

>>> ПРОРАБОТАТЬ
1. Методики разработки ПО / подходы к разработке ПО:
            https://habr.com/ru/companies/edison/articles/269789/
            https://testengineer.ru/development-methodologies/
        - Водопадная/каскадная модель;
        - V-образная;
        - Спиралевидная;
        - Инкрементальная модель;        
        - Rapid Application Development (RAD). Методология быстрой разработки приложений
            - Разновидность инкрементальной
        - Agile Model
            - Тестирования является непрерываным и постоянной активностью. Нельзя его выделить отдельно.
        - Rational Unified Process (RUP). Рациональный унифицированный процесс

2. Что такое тестирование? В чем его суть как процесса?
    https://habr.com/ru/post/254209/
	- Тестирование – комплекс мероприятий, направленный на проведение проверок на соответствие производимого продукта требованиям, к нему предъявляемым (прямым и косвенным).
	- Да, действительно, в ходе проверок выявляются ошибки/инциденты/замечания, но это лишь побочный продукт процесса. Основным является информация о соответствии продукта требованиям, которые к нему предъявляются.

3. В чём цель тестирования?
	- Цель тестирования – предоставление актуальной информации о соответствии производимого продукта требованиям.
	- Но не количество ошибок (что нам даст информация у нас 60 ошибок)?
            - Если говорить о кол. ошибок, то это просто сырая информация (а сколько требований реализовано? а сколько ошибок критичных? а сколько исправлено?)

4. Что такое ошибка?
            Ошибка – несоответствие производимого продукта требованиям, прямым или косвенным.
        4.1. Когда нет требований, как понять что это ошибка?
                - Согласовать сценарии с БА и ProductOwner
                - Есть рекамендации по построению UI или требование к API.
        4.2. Что значит сборка без ошибок?
                - Ошибки есть, но о части мы знаем и знаем как их обойти или они не приводят к критическим последствиям. И о части мы не знаем, но они не мешают нам.
        4.3. Типы дефектов или виды дефектов?
                Severity(серьезность) vs Priority(приоритетность)
                Как ранжировали?

5. Какие бывают требования?
	- Виды требований:
		* Функциональные и нефункциональные.
	- Прямые требования и косвенные.
		* Прямые: 
			= Формаллизованные в виде UC.
		* Косвенные:
			= Специфика применения, условия применения, пользовательские стори, законодательство, нормотивные требовния итд

    5.1. Атрибуты требований (что важны для тестирования)
            - Идентификатор.
            - Трассируемость.
            - Единичность   -   Требование описывает одну и только одну вещь.
            - Завершённость -   Требование полностью определено в одном месте и вся необходимая информация присутствует.
            - Последовательность    -   Требование не противоречит другим требованиям и полностью соответствует внешней документации.
            - Атомарность   -   Требование «атомарно». То есть оно не может быть разбито на ряд более детальных требований без потери завершённости.
            - Отслеживаемость   -   Требование полностью или частично соответствует деловым нуждам, как заявлено заинтересованными лицами, и документировано.
            - Актуальность  -   Требование не стало устаревшим с течением времени.
            - Выполнимость  -   Требование может быть реализовано в пределах проекта.
            - Недвусмысленность -   Требование кратко определено без обращения к техническому жаргону, акронимам и другим скрытым формулировкам. Оно выражает объективные факты, не субъективные мнения. Возможна одна и только одна интерпретация. Определение не содержит нечётких фраз. Использование отрицательных утверждений и составных утверждений запрещено.
            - Обязательность    -   Требование представляет определённую заинтересованным лицом характеристику, отсутствие которой приведёт к неполноценности решения, которая не может быть проигнорирована. Необязательное требование — противоречие самому понятию требования.
            - Проверяемость -   Реализуемость требования может быть определена через один из четырёх возможных методов: осмотр, демонстрация, тест или анализ.

6. Расскажите о тестовой документации: виды, цели.
            Цель – зафиксировать сгенерированную и отобранную показательную проверку в виде, позволяющем тестировщику любой квалификации ее провести и суметь проанализировать полученные результаты.

        Внешняя:
            - Требования/спецификация;
            - Замечание/баг-репорт;
            - ChangeLog; 
                - Запрос на изменение (улучшение) – описание неявных/некритичных косвенных требований, которые не были учтены при планировании/реализации продукта, но несоблюдение, которых может вызвать неприятие у конечного потребителя. И пути/рекомендации по модификации продукта для соответствия им.           
            - Инструкции;            
            - Отчет о тестировании (тест репорт)
        Внутренная:
                - Тест-план (Сбор информации. Анализ информации. Принятие решений. Презентация.)
                - Тестовый сценарий;
                - Тестовый набор;
                - Чекл-лист;
                - Тест-кейс;
                - Идея проверки;

7. Из каких этапов состоит процесс тестирования?
    Урупнённный набор этапов:
        - Анализ продукт;
        - Работа с требованиями;
        - Разработка стратегии тестирования и планирование процедур контроля качества;
        - Создание тестовой документации;
        - Тестирование прототипа;
        - Основное тестирование;
        - Стабилизация;
        - Эксплуатация;

    Этапы тестирования (на уровень вниз):
        - Инициация
        - Выявление требований прямых и косвенных;
            - Генерация тестовых случаев;
            - Отбор показательных тестовых случаев;
        - Проведение проверок;
        - Фиксация результатов;
        - Анализ результатов;
        - Передача информации о соответствии проверенного продукта требованиям.

8. Критерии входа в тестирование и выхода из тестирования.
        Критерии входа:
            - Инициация – событие, которое извещает команду тестирования о необходимости сессии тестирования, а также гарантирует выполнение требований к продукту для проведения тестирования:
                - Доступно необходимое тестовое окружение;
                - Доступен билд/ресурс/предмет тестирования;
                - Код, БД, прочие компоненты объекта тестирования «заморожены», т.е. не изменяются в период всей сессии тестирования;
                - Модификация требований (хотя бы прямых) «заморожена»;
                - Известно направление тестирования;
                - Известны сроки на сессию тестирования.
        Критерии выхода:
                - Время
                - Бюджет
                - Все тест кейсы пройдены, найденные баги исправлены и перепроверены

9. Виды и уровни тестирования:
    По времени:
        - left-shift:
            - Внутреннее - до этапов разработки, на этапе выработки требований и архитектуры.
        - right-shift:
            - Предрелизное
            - Релизное
            - Альф
            - Бетта
            - A/B
            - Конореечное.

    Виды:
        - Функциональное;
        - Нефункциональное;
            - Нагрузочное (стабильность)
            - UI/UX
            - Безопасности (проникновения итд)

    Уровни(стратегии):
        Модульное (компонентное):
            Объект тестирования класс или метод - как правило функциональное. Но и может быть замер по времени - т.е. нефункциональное.
        Интеграционное:
            Компонентнный интеграционный уровень - т.е. между модулями.
            Системнный интеграционный уровень - т.е. проверяет взаимодействие между системами.
        Системное:
            Проверяется система в целом (как функциональные так и не функционыльные требования)
            При этом выявляются дефекты, такие как неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство использования и т.д. Для минимизации рисков, связанных с особенностями поведения системы в той или иной среде, во время тестирования рекомендуется использовать окружение максимально приближенное к тому, на которое будет установлен продукт после выдачи.
                Как правило проводится
                    - На базе требований.
                    - На базе случаев использования.
        Приёмочное:
            Формальный процесс тестирования, который проверяет соответствие системы требованиям и проводится с целью:
                - Определения удовлетворяет ли система приемочным критериям;
                - Вынесения решения заказчиком или другим уполномоченным лицом принимается приложение или нет.

    V-образная модель:
        Пользовательские требования;    Приемочные тесты;
        Функциональные требования;      Системные тесты;
        Архитектура;                    Интеграционные тесты;
        Программирование;               Модульное тестирование;

10. Верификация и валидация
    Верификация - проверка соответствия софта требованиям.
    Валидация проверка - что требовнаия соответствуют ожиданиям пользователя и условиям использования.


12. Что такое тест-план?
        План тестирования описывает все действия по тестированию в рамках одного проекта. Здесь вы можете найти информацию обо всем, что нужно сделать тестировщику или команде QA в ходе проекта. 
        В каждом плане тестирования указывается объект тестирования, график работы, критерии начала и окончания тестирования, стратегия, риски и список выполненных работ.

>>> ПРОРАБОТАТЬ
13. Методика/методология тестирования
        * Методология тестирования программного обеспечения определяется как стратегии и типы тестирования, используемые для подтверждения того, что тестируемое приложение соответствует ожиданиям клиента. 
            - Методики испытаний включают функциональное и нефункциональное тестирование для проверки AUT.
            - Примерами методологий тестирования являются модульное тестирование, интеграционное тестирование, системное тестирование, тестирование производительности
        * Как и процесс разработки, процесс последующего тестирования программного обеспечения также следует определенной методологии.
            - Под методологией в данном случае мы понимаем разнообразные комбинации принципов, идей, методов и концептов, к которым вы прибегаете во время работы над проектом.

14. Тест-дизайн
    - Стратегический дизайн (Что будем тестировать, а что нет. Что входит в зону тестирования, а что нет.):
        - Дымовое тестирование (smoke test) — тестирование, выполняемое на новой сборке, с целью подтверждения того, что программное обеспечение стартует и выполняет основные для бизнеса функции.
        - Тестирование критического пути (critical path) — направлено для проверки функциональности, используемой обычными пользователями во время их повседневной деятельности.
            - Тестирование критического пути направлено на изучение функциональности, используемой типичными пользователями в типичных повседневных действиях. Идея заимствована из управления проектами и трансформирована в контексте тестирования в следующее: есть большинство пользователей, которые чаще всего используют определенное подмножество функций приложения. Именно эти функции необходимо проверить, как только мы убедились, что приложение “работает в принципе” (тест на дымовую завесу прошел успешно). Если по какой-либо причине приложение не выполняет эти функции или выполняет их неправильно, многие пользователи не смогут достичь многих своих целей. Пороговое значение метрики успешного прохождения “теста критического пути” обычно составляет около 70-80-90%, в зависимости от сути проекта.
            - Чаще всего на практике, на данном уровне тестирования проверяется основная масса требований к продукту.
            - Позитивный тест критического пути — это проверка работоспособности функций программного продукта, с которыми пользователь сталкивается ежедневно.
            - Негативный тест критического пути — это проверка всевозможных вариантов нестандартного использования функциональности, используемой пользователем каждый день.
        - Расширенное тестирование (extended) — направлено на исследование всей заявленной в требованиях функциональности.

    - Тактический дизайн (когда определились, что тестировать, будем думать как):
        - Тестирование на основе классов эквивалентности (equivalence partitioning) — это техника, основанная на методе чёрного ящика, при которой мы разделяем функционал (часто диапазон возможных вводимых значений) на группы эквивалентных по своему влиянию на систему значений.
        -  Техника анализа граничных значений (boundary value testing) — это техника проверки поведения продукта на крайних (граничных) значениях входных данных.
        - Попарное тестирование (pairwise testing) — это техника формирования наборов тестовых данных из полного набора входных данных в системе, которая позволяет существенно сократить количество тест-кейсов.
        - Тестирование на основе состояний и переходов (State-Transition Testing) — применяется для фиксирования требований и описания дизайна приложения.
        - Таблицы принятия решений (Decision Table Testing) — техника тестирования, основанная на методе чёрного ящика, которая применяется для систем со сложной логикой.
        - Доменный анализ (Domain Analysis Testing) — это техника основана на разбиении диапазона возможных значений переменной на поддиапазоны, с последующим выбором одного или нескольких значений из каждого домена для тестирования.
        - Сценарий использования (Use Case Testing) — Use Case описывает сценарий взаимодействия двух и более участников (как правило — пользователя и системы).
        - RiskBaseTasting
        - BugBaseTesting

15. 7 принципов тестирования:
        Принцип 1       Тестирование показывает наличие дефектов
        Принцип 2       Исчерпывающее тестирование невозможно
        Принцип 3       Раннее тестирование
        Принцип 4       Кластаризация/скопление дефектов 80% дефектов в 20%модулей.
                                - Кластеризация дефектов — принцип, который предполагает, что небольшое количество модулей содержат в себе большинство багов. Это яркий пример применения в тестировании принципа Парето: 80% проблем таятся в 20% модулей.
        Принцип 5       Парадокс пестицидов
                                - Если те же тесты повторяются снова и снова, то «почти одинаковые» тест-кейсы не смогут помочь найти больше ошибок.
                                - Если есть некий набор повторяемых тестов, он будет бесполезен в определении новых дефектов.
                                - Чтобы решить эту проблему, тест-кейсы должны регулярно просматриваться и обновляться, должны добавляться новые тест-кейсы, ориентированные на другую функциональность или тестирующие уже существующую под другим углом.
        Принцип 6       Тестирование зависит от контекста
        Принцип 7       Заблуждение об отсутствии ошибок.
                                - Тестирование показывает наличие багов в продукте но ни как не их отсутствие.
                                - Сборка без ошибок - это сборка, в которой есть ошибка но они нам не мешают жить и выполнять задачи.
                                        - Это либо неизвестные ошибки, что нам не мешают.
                                        - Либо известные, но которые мы знаем как обойти без прикладывания сил и без последствий, если мы на неё наткнёмся.
16. Вопрос по предыдущему месту работы:
        Как построен процесс:
            - Какие данные на вход тестированию
                - Кто ставить задачу, кто говорит что смотрим?
            - Как строится процесс проверки (что проверять, а что нет?)
                - Как понять, что достаточно?
            - Чем ограничено тестирование релиза/сборки/исправления?
            - Что и как выполняется при проверке исправления?
            - Чем занимаетесь когда новых сборок нет или новая сборка есть но нового функционала нет?
                Что проверяете, какие области берёте на проверку?
                Как происходит декомпозиция в этом случае?
            - Что с безопасностью?
                - Кто ответчает за безопасность?
                - Аудит?
                    Доступность тех или иных возможностей тому или иному пользователю?
                    Когда получаем список документов/пользователей итд - в каком виде получаем их (ID?) а какое?

17. Что является обязательным и что является достаточным?
    - Как выбираются тесты кейсы?
        Приоритезация?
    - Критический путь?
        - Модель исключений
        - Модель угроз (как человеческий фактор, так и технический).
        - Восстановление работы
    - Как как оценить качественный софт или нет?




--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------
-- Выявление требований – пожалуй, один из главных шагов в процессе тестирования. Неизвестны требования – нет тестирования. Необходимо собрать всю доступную информацию о предмете тестирования, вариантах использования и т. п. Первый источник – техническая документация и юзер-стори – это прямые требования. Качество же косвенных требований во многом зависят от добросовестности, ответственности, квалификации тестировщика и всей команды проекта.
-- Генерация тестовых случаев – выявление всех возможных случаев использования продукта, его характеристик и особенностей в процессе эксплуатации. Это значит: всех случаев, которые тестировщик может «придумать» на основе прямых и косвенных требований, известных ему. Этот  этап требует высокой квалификации специалиста по тестированию.
-- Отбор тестовых случаев – отбор наиболее показательных, значимых и воспроизводимых тестовых случаев. От этого этапа зависит, насколько тестирование будет полезным, эффективным и анализируемым. Например, в «простом» примере с красной кнопкой понятно, что количество косвенных требований стремится к бесконечности, и проверять их все подряд – полный абсурд, но подобные кейсы должны быть сгенерированы хотя бы в голове проверяющего. А для того чтобы они не вошли в проверки, необходимо выполнить соответствующий отбор и проверить только, действительно ли кнопка красная.
-- Пример примитивный, но после его озвучивания соискатели перестают первым делом пытаться налить в стакан радий на тестовом задании J (кто принимал участие в собеседовании на должность тестировщика, тот знает это нехитрое задание на генерацию и отбор тестовых случаев).
-- Проведение проверок – тут все понятно. Либо согласно документации, либо ad hoc (интуитивно, свободный поиск, без документации). В любом случае это проводится согласно списку отобранных проверок. Почему-то большинство именно этот пункт называет тестированием. И в голове обывателя, незнакомого с профессией, только один этот пункт и содержится J.
-- Фиксация результатов – создание внутренней и внешней тестовой документации в формализованном виде или в виде записей и т. п. На данном этапе отчет о тестирование даже если и создается, то не считается законченным.
-- Анализ результатов – вынесение решения о соответствии проверенного продукта требованиям. Формализация данного решения и его обоснование в виде отчета о тестировании. Сюда также входят процедуры по оценке покрытия требований проверками, тайм-шитинг и пр. Таким образом, проводится анализ не только результатов, но и самой сессии тестирования.
-- Передача информации о соответствии продукта требованиям. Формально: передача внешней тестовой документации заинтересованным в ней сторонам, зачастую инициатору сессии тестирования. В общем случае: помимо документации предоставляется информация о рисках, которые были выявлены в продукте, требованиях, процессах, передаются рекомендации по отработке этих рисков и т. п. Но это – уже QA J!
-------------------------------------------------------------------------
Внутренняя документация:
    Как видно, каждый последующий вид внутренней тестовой документации в определенной мере детализирует предыдущий. У каждого документа есть свое назначение и все вместе они – инструмент для облегчения генерации, отбора и воспроизведения тестовых случаев. Кроме того хорошо структурированная, поддерживаемая, читаемая, организованная и доступная тестовая документация позволяет в долгосрочной перспективе:
            - Обеспечить стабильность покрытия требований проверками.
            - Обеспечить показательность всех проводимых проверок.
            - Обеспечить необходимость и достаточность проводимых проверок.
            - Сэкономить время на этапах тестирования, сводя их к проведению проверок и анализу  и передаче результатов.
            - Снизить входной уровень квалификации тестировщика для проведения проверок.
            - Повысить прогнозируемость сессий тестирования в части затрат времени и ресурсов.
            - Повысить прозрачность процесса тестирования для других участников процесса производства продукта.
            - Обеспечить базу знаний о продукте и истории его развития.

    Но следует учитывать, что есть и свои недостатки:
            - Стабильность покрытия. Со стремящейся к бесконечности долей вероятности, если проводится тестирование по документации, то будут проведены только те проверки, которые есть в данной документации.
            - Вероятность пропуска ошибки (чаще всего несоответствие косвенному требованию, непокрытому документацией) возрастает.
            - Плохая локализация ошибки тестировщиком. Либо полное отсутствие локализации. Фактический результат не совпал с ожидаемым – ошибка. А что это на самом деле: ошибка; проявление ошибки; инцидент, уже описанной ошибки, тестировщик не проверит (в подавляющем количестве случаев).
            - Высокий требуемый уровень квалификации специалиста для создания и поддержания тестовой документации.
            - Большие временные затраты на создание и поддержание тестовой документации.
            - Слабо прогнозируемое время актуальности тестовой документации.

-------------------------------------------------------------------------

Этапы:

Основными шагами, участвующими в данной методике тестирования программного обеспечения, являются:
        - Анализ потребностей;
        - Тест дизайна;
        - Тест реализации (прототипа?);
        - Тестирование;
        - Отладка и проверка кода или продукта;
        - Внедрение и обслуживание;

    Или:
        - Анализ продукт;
        - Работа с требованиями;
        - Разработка стратегии тестирования и планирование процедур контроля качества;
        - Создание тестовой документации;
        - Тестирование прототипа;
        - Основное тестирование;
        - Стабилизация;
        - Эксплуатация;


- Классификация жизненного цикла процесса разработки программного обеспечения происходит следующим образом:
        - Планирование
        - Анализ
        - Дизайн
        - Разработка программного обеспечения
        - Реализация
        - Тестирование программного обеспечения
        - Развертывание
        - Техническое обслуживание

-------------------------------------------------------------------------
- Отчет о тестировании (тест репорт) – документ, предоставляющий сведения о соответствии/ несоответствии продукта требованиям. Может так же содержать описание некоторых подробностей проведенной сессии тестирования, например, затраченное время, использованные виды тестирования, перечень проверенных случаев и т. п. В идеальном варианте фраза вида «Тест пройден. Ошибка не воспроизводится/Функционал работает корректно/Соответствует требованиям» означает, что продукт или его часть полностью соответствует требованиям прямым и косвенным (в производстве ПО).
-------------------------------------------------------------------------
- Тестовый сценарий
    * Тестовый сценарий – последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им  проверок корректности поведения продукта в ходе этих действий. Может содержать информацию об исходном состоянии продукта для запуска сценария, входных данных и прочие сведения, имеющие определяющее значение для успешного и показательного проведения проверок по сценарию. Особенностью является линейность действий и проверок, т.е. зависимость последующих действий и проверок от успешности предыдущих. Цель документа – стабилизация покрытия аспектов продукта, необходимых для выполнения функциональной задачи, показательными необходимыми и достаточными проверками. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.
    * Тестовые сценарии работают на более высоком уровне тестирования. Они менее подробны, как бы более «человечны» и ориентированы на «путь пользователя» по приложению/сайту.
    * Тестовый сценарий может содержать в себе много тест-кейсов.
    * Тестовый сценарий работает «на стратегическом уровне», то есть меньше вдается в подробности «как?», а описывает «почему?». Тестовый сценарий ориентирован скорее на бизнес-поведение пользователя, на его мотивацию, чем на «дотошное» выполнение с фиксацией результатов.

-------------------------------------------------------------------------
- Тест-кейс
    - Идея проверки.
    - Описание проверяемого требования или проверяемой части требования.
    - Используемое для проверки тестовое окружение.
    - Содержит условия запуска
    - Одно или несколько вводных условий/данных
    - Исходное состояние продукта перед началом проверки.
    - Шаги для приведения продукта в состояние, подлежащее проверке.
    - Входные данные для использования при воспроизведении шагов.
    - Ожидаемый результат.
    - Прочую информацию, необходимую для проведения проверки.
    - Результаты выполнения — тестовые выводы, или изменения, произошедшие в результате
    - Тест-кейс работает как бы «на тактическом уровне». Он описывает, что QA-инженеру нужно сделать и в каком порядке, и детализирует ожидаемые результаты.

-------------------------------------------------------------------------
    - Тест-план (план тестирования) – формализованное и укрупненное описание одной сессии тестирования по одному или нескольким направлениям проверок. Т.е. перечень направлений проверок, которые должны быть проведены в рамках сессии тестирования (и, сообразных этим направлениям, требований). Также может содержать в себе необходимую информацию об окружении, методике, прочих условиях важных для показательности данной сессии тестирования. Под направлением проверок также может пониматься более детализированная тестовая документация (в виде ссылки на нее): чек листы, тестовые комплекты, тестовые сценарии, на которую необходимо опираться при проведении сессии тестирования. Основная цель документа – описать границы сессии тестирования, стабилизировать показательность данной сессии.
    - Тестовый сценарий – последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им  проверок корректности поведения продукта в ходе этих действий. Может содержать информацию об исходном состоянии продукта для запуска сценария, входных данных и прочие сведения, имеющие определяющее значение для успешного и показательного проведения проверок по сценарию. Особенностью является линейность действий и проверок, т.е. зависимость последующих действий и проверок от успешности предыдущих. Цель документа – стабилизация покрытия аспектов продукта, необходимых для выполнения функциональной задачи, показательными необходимыми и достаточными проверками. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.
    - Тестовый комплект – некоторый набор формализованных тестовых случаев объединенных между собой по общему логическому признаку.
    - Чек-лист (лист проверок) – перечень формализованных тестовых случаев в виде удобном для проведения проверок. Тестовые случаи в чек-листе не должны быть зависимыми друг от друга. Обязательно должен содержать в себе информацию о: идеях проверок, наборах входных данных, ожидаемых результатах, булевую отметку о прохождении/непрохождении тестового случая, булевую отметку о совпадении/несовпадении фактического и ожидаемого результата по каждой проверке. Может так же содержать шаги для проведения проверки, данные об особенностях окружения и прочую информацию необходимую для проведения проверок. Цель – обеспечить стабильность покрытия требований проверками необходимыми и достаточными для заключения о соответствии им продукта. Особенностью является то, что чек-листы компонуются теми тестовыми случаями, которые показательны для определенного требования.
    - Тестовый случай (тест-кейс) – формализованное описание одной показательной проверки на соответствие требованиям прямым или косвенным. Обязательно должен содержать следующую информацию:
-------------------------------------------------------------------------

Методология тестирования:
    - Методоло́гия — учение о методах, способах и стратегиях исследования предмета.
    - Методология — это алгоритм поиска цели, набор приёмов, методов, средств, способов, принципов достижения цели.
    - Методология — это система принципов и способов фирмы и построения теоретической и практической деятельности, а также учение об этой системе
        * Под методологией в данном случае мы понимаем разнообразные комбинации принципов, идей, методов и концептов, к которым вы прибегаете во время работы над проектом.
    - В методологии можно выделить следующую структуру:
        * основания методологии: философия, логика, системология, психология, информатика, системный анализ, науковедение, этика, эстетика;
        * характеристики деятельности: особенности, принципы, условия, нормы деятельности;
        * логическая структура деятельности: субъект, объект, предмет, формы, средства, методы, результат деятельности, решение задач;
        * временная структура деятельности: фазы, стадии, этапы.
        * технология выполнения работ и решения задач: средства, методы, способы, приемы.

-------------------------------------------------------------------------
Стратегия тестирования:
    - Стратегия — искусство руководства; общий план ведения этой работы, исходя из сложившейся действительности на данном этапе развития.
    - Стратегия тестирования — это план проведения работ по тестированию системы или её модуля, учитывающий специфику функциональности и зависимости с другими компонентами системы и платформы.
        * Стратегия определяет типы тестов, которые нужно выполнять для данного функционала системы, включает описание необходимых подходов с точки зрения целей тестирования и может задавать описания или требования к необходимым для проведения тестирования инструментам и инфраструктуре.
        * Пример: В рамках планируемых работ будет применена нисходящая стратегия (где тестирование будет проводиться от системного/комплексного к модульному с целью нахождения ошибок)
    - Стратегия отвечает на вопросы:
        * Как, каким образом тестирование даст ответ, что данный функционал работает?
        * Что нужно сделать и чем пользоваться из инструментальных средств, для достижения целей тестирования?
        * Когда определённый функционал будет тестироваться и соответственно когда ожидать получения результатов?
    - В стратегии тестирования нелишним будет упомянуть и о критериях оценки серьезности и приоритета дефектов. Оценка серьезности дефекта зачастую вызывает споры, если таковые критерии отсутствуют. Лучше формализовать, как мы будем оценивать важность дефекта и приоритет его исправления, и место таких критериев - именно в стратегии тестирования.

---------------------------------
Что такое классы эквивалентности (эквивальентное разбиение)
        https://testengineer.ru/equivalence-classes-guide/
    Коротко: выбранные тестировщиком наборы данных (диапазоны), которые подаются на ввод в модуль, и это должно приводить к одинаковым результатам.

    Стандартные действия по методике:
        - Правильно определяются классы эквивалентности, это главное.
        - Выбирается один представитель (член) в каждом классе. Из каждого эквивалентного набора тестов выбирается один тест.
        - Выполнение тестов от каждого класса.
        - Если времени достаточно (или ситуация требует, см. далее о типах), берутся несколько членов из каждого класса. Но у опытного тестировщика классы определены правильно с начала, поэтому несколько членов будут не обязательны (избыточны = покажут те же результаты).

---------------------------------
Перечислите этапы жизненного цикла тестирования.
        https://testengineer.ru/sobesedovanie-qa-trainee-junior/
    - Планирование тестов Анализ требований, создание стратегии тестирования проекта
    - Создание тест-кейсов    QA-инженеры пишут тест-кейсы
    - Настройка тестового окружения   Настройка хард - и софт-компонентов тестового окружения
    - Выполнение тестов   Выполнение тестов и сравнение ожидаемого с полученными результатами
    - Закрытие цикла  Митинг QA-команды по результатам, оценка критериев завершения цикла, глядя на тестовое покрытие, качество, стоимость, потраченное время, критически важные бизнес-цели, и особенности продукта

---------------------------------
Тест-план:
    + Какие виды тестирования будут проводиться?
    + Полезно перечислить все виды тестовых активностей, которые впоследствии войдут в ваш план-график. Например, дизайн тестов, подготовку тестовой среды и так далее. Зачем? Чтобы ни о чем не забыть при составлении плана.
        - Что будет служить основой тестов (test basis)? Из чего вы собираетесь выводить тест-кейсы? Это могут быть требования, сценарии использования, некие внешние стандарты.
        - Аналитика от эсплуатации и ЧТЗ + анализ системы
        - Каковы критерии начала и завершения тестирования? Критерии начала тестирования обычно включают готовность необходимого окружения и успешное прохождение предыдущего уровня тестирования (например, успешная прогонка смоук-тестов является условием начала системного тестирования). Критерии завершения тестирования зависят от выбранных вами метрик, это может быть процент выполненных тестов, количество неисправленных дефектов разной степени серьезности или какие-то другие показатели. В любом случае, с этим стоит определиться.
        - Какие виды документации вы планируете создавать? Здесь важно понимать, служат ли эти документы вашим инструментом для внутренних нужд или же вы рассматриваете их как продукт, который входит в поставку.


    - Что такое тест план и как его написать?
        https://testengineer.ru/chto-takoe-test-plan-i-kak-ego-napisat/

    Тест План (План тестирования)
        http://www.protesting.ru/testing/plan.html
            Что надо тестировать?
                описание объекта тестирования: системы, приложения, оборудования
            Что будете тестировать?
                список функций и описание тестируемой системы и её компонент в отдельности
            Как будете тестировать?
                стратегия тестирования, а именно: виды тестирования и их применение по отношению к объекту тестирования
            Когда будете тестировать?
                последовательность проведения работ: подготовка (Test Preparation), тестирование (Testing), анализ результатов (Test Result Analisys) в разрезе запланированных фаз разработки
            Критерии начала тестирования:
                готовность тестовой платформы (тестового стенда)
                законченность разработки требуемого функционала
                наличие всей необходимой документации
                ...
            Критерии окончания тестирования:
                результаты тестирования удовлетворяют критериям качества продукта:
                    требования к количеству открытых багов выполнены
                    выдержка определенного периода без изменения исходного кода приложения Code Freeze (CF)
                    выдержка определенного периода без открытия новых багов Zero Bug Bounce (ZBB)
                ...

TODO:
    1. План тестирования и стратегия тестирования.
        - Хотя бы чётко перечислять этапы и что там делается.
    2. Оценка времени на тестирование.
        - Общие подходы.
    3. Практика по тест-диазайну и бизнес-анализу.
        - Здесь просто практика нужна.
----------------------------------------------------------------------
1. Методологии разработки ПО / подходы к разработке ПО:
        - Водопадная/каскадная модель;
        - V-образная;
        - Спиралевидная;
        - Инкрементальная модель;
        - Rapid Application Development (RAD). Методология быстрой разработки приложений
            - Разновидность инкрементальной
        - Agile Model
            - Почему не серебрянная пуля:
                https://habr.com/ru/companies/eaeconsult/articles/837674/
            - Кратко и понятно
            - Тестирования является непрерываным и постоянной активностью. Нельзя его выделить отдельно.
                https://vladislaveremeev.gitbook.io/qa_bible/sdlc-i-stlc/agile
        - Rational Unified Process (RUP). Рациональный унифицированный процесс

2. Что такое тестирование? В чем его суть как процесса?
	- Тестирование – комплекс мероприятий, направленный на проведение проверок на соответствие производимого продукта требованиям, к нему предъявляемым (прямым и косвенным).
	- Да, действительно, в ходе проверок выявляются ошибки/инциденты/замечания, но это лишь побочный продукт процесса. Основным является информация о соответствии продукта требованиям, которые к нему предъявляются.

3. В чём цель тестирования?
	- Цель тестирования – предоставление актуальной информации о соответствии производимого продукта требованиям.
    	- Но речь не про количество ошибок (что нам даст информация у нас 60 ошибок)?
        - Если говорить о кол. ошибок, то это просто сырая информация (а сколько требований реализовано? а сколько ошибок критичных? а сколько исправлено? а все ли сценарии проверены?)

        - С чего вы начнёте тестирование, какие цели будуте приследовать?
            - Какие действия будете выполнять (очерёдность)?
                - Если говорим о предоставлении актуальной инфонмации для проектной группы - то как и чем вы это будете обеспечивать?
            - Как себе представляете процесс тестирования?

        - Для инженера по тестированию важный навык коммуцировать и объяснять др. участникам.
            - В первом случае это узнать и уточнить поведение. Сформулировать и согласовать план проверок.
            - Во втором случае - это поясление выполняемых проверок, найденных дефектов, пояснение последствий.            
                - А для этого нужно разбираться в предмете тестирвоания.

                И это нужно не кому-то на проекте. А инженеру по тестированию т.к. именно эта роль предполагает эти действия.

            Задача рассказать подробно о дипломной работе. Технологии.


4. Что такое ошибка?
    Ошибка – несоответствие производимого продукта требованиям, прямым или косвенным.
        4.1. Когда нет требований, как понять что это ошибка?
                - Для начала: нет требований, нет тестирования.
                - Если все же тестирование будет основано на экспертности сотруника, то можно: Согласовать сценарии с БА и ProductOwner - описать и приоретизировать. Это работает и в Agile - когда документация второстепенна и тесты могут выступать спецификацией.
                    - Плюс есть рекомендации по построению UI или требование к API итд.
                    - Проверка не только явных требований но и контрактов.
                        - В том числе контрактов достигнутых устным путём но зафиксированных пусть в виде тестов - и подтверждённых через согласование. В Agile - наверное это является основным путём.
                        - Да и сам подход к выбрботке тестов - идёт через согласование с БА.
        4.2. Что значит сборка без ошибок - как это понять?
                - Ошибки есть, но о части мы знаем и знаем как их обойти или они не приводят к критическим последствиям. И о части мы не знаем, но они не мешают нам.
                    Т.е. своеобразный компромис. См. критерии качества.
        4.3. Типы дефектов или виды дефектов?
            Определятся теми же проверками. Безопасность, Функциональность, Производительность итд.
        4.4. Приоритетность и серьезность. Как ранжировали?
            Определяется целями и декларациями продукта.
                Severity(серьезность) vs Priority(приоритетность)

5. Какие бывают ТРЕБОВАНИЯ?
	- Виды требований:
		* Функциональные и нефункциональные.
	- Прямые требования и косвенные.
		* Прямые: 
			= Формаллизованные в виде UC.
		* Косвенные:
			= Специфика применения, условия применения, пользовательские стори, законодательство, нормотивные требовния итд

    5.1. Атрибуты требований (что важны для тестирования)
            - Идентификатор.
            - Трассируемость.
            - Единичность       -   Требование описывает одну и только одну вещь.
            - Завершённость     -   Требование полностью определено в одном месте и вся необходимая информация присутствует.
            - Последовательность    -   Требование не противоречит другим требованиям и полностью соответствует внешней документации.
            - Атомарность       -   Требование «атомарно». То есть оно не может быть разбито на ряд более детальных требований без потери завершённости.
            - Отслеживаемость   -   Требование полностью или частично соответствует деловым нуждам, как заявлено заинтересованными лицами, и документировано.
            - Актуальность      -   Требование не стало устаревшим с течением времени.
            - Выполнимость      -   Требование может быть реализовано в пределах проекта.
            - Недвусмысленность -   Требование кратко определено без обращения к техническому жаргону, акронимам и другим скрытым формулировкам. Оно выражает объективные факты, не субъективные мнения. Возможна одна и только одна интерпретация. Определение не содержит нечётких фраз. Использование отрицательных утверждений и составных утверждений запрещено.
            - Обязательность    -   Требование представляет определённую заинтересованным лицом характеристику, отсутствие которой приведёт к неполноценности решения, которая не может быть проигнорирована. Необязательное требование — противоречие самому понятию требования.
            - Проверяемость     -   Реализуемость требования может быть определена через один из четырёх возможных методов: осмотр, демонстрация, тест или анализ.

6. Расскажите о тестовой документации: цели, виды.
            Цель – зафиксировать согласованные и отобранные показательные проверки. Оценка времени требуемого для проверки функциоанал. Предсказуемость поведения ПО после проверки (т.к. понятна область покрытия тестами).

        Внешняя:
            - Требования/спецификация;
            - Замечание/баг-репорт;
            - ChangeLog; 
                - Запрос на изменение (улучшение) – описание неявных/некритичных косвенных требований, которые не были учтены при планировании/реализации продукта, но несоблюдение, которых может вызвать неприятие у конечного потребителя. И пути/рекомендации по модификации продукта для соответствия им.
            - Инструкции;
            - Отчет о тестировании (тест репорт)
        Внутренная:
                - Тест-план (Сбор информации. Анализ информации. Принятие решений. Презентация.)
                - Тестовый сценарий;
                - Тестовый набор;
                - Чекл-лист;
                - Тест-кейс;
                - Идея проверки;

7. Критерии входа в тестирование и выхода из тестирования.
        Критерии входа:
            - Инициация – событие, которое извещает команду тестирования о необходимости сессии тестирования, а также гарантирует выполнение требований к продукту для проведения тестирования:
                - Доступно необходимое тестовое окружение;
                - Доступен билд/ресурс/предмет тестирования;
                - Код, БД, прочие компоненты объекта тестирования «заморожены», т.е. не изменяются в период всей сессии тестирования;
                - Модификация требований (хотя бы прямых) «заморожена»;
                - Известно направление тестирования;
                - Известны сроки на сессию тестирования.
        Критерии выхода:
                - Время
                - Бюджет
                - Все тест кейсы пройдены, найденные баги исправлены и перепроверены

8. Виды и уровни тестирования:
    По времени:
        - left-shift:
            - Внутреннее - до этапов разработки, на этапе выработки требований и архитектуры.
        - right-shift (testOps):
            - Предрелизное
            - Релизное
            - Альф
            - Бетта
            - A/B - (AB testing) — метод исследования для оценки эффективности двух вариантов одного элемента.
            - Конореечное - Тестирование новой версии/функции у небольшого количества пользователей в реальном окружении.

    Типы:
        - Функциональное;
        - Нефункциональное;
            - Нагрузочное (стабильность)
            - UI/UX
            - Безопасности (проникновения итд)
            - Соответствие требованиям законадательства.

    К методологии/методы тестирования относят по уровню знания:
    Методы проектирования тестов
        - white
        - black.
        - gray

    Уровни тестирования (на каждом уровне можно производить функциональное, нагрузочное, безопасность итд):
        - Модульное (компонентное):
            - Объект тестирования класс или метод - как правило функциональное. Но и может быть замер по времени - т.е. нефункциональное.
                    - Модульные тесты должны быть независимыми. В случае каких-либо улучшений или изменений в требованиях, тестовые случаи не должны меняться.
                    - Тестируйте только один модуль за раз.

        - Интеграционное:
            Компонентнный интеграционный уровень - т.е. между модулями.
            Системнный интеграционный уровень - т.е. проверяет взаимодействие между системами.

        - Системное:
            Проверяется система в целом (как функциональные так и не функционыльные требования)
            При этом выявляются дефекты, такие как неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство использования и т.д. Для минимизации рисков, связанных с особенностями поведения системы в той или иной среде, во время тестирования рекомендуется использовать окружение максимально приближенное к тому, на которое будет установлен продукт после выдачи.
                Как правило проводится
                    - На базе требований.
                    - На базе случаев использования.

        - Приёмочное:
            - Формальный процесс тестирования, который проверяет соответствие системы требованиям и проводится с целью:
                - Определения удовлетворяет ли система приемочным критериям;
                - Вынесения решения заказчиком или другим уполномоченным лицом принимается приложение или нет.
                - Не обязательно функциональные.



    V-образная модель:
        Пользовательские требования;    Приемочные тесты;
        Функциональные требования;      Системные тесты;
        Архитектура;                    Интеграционные тесты;
        Программирование;               Модульное тестирование;


9. Верификация и валидация
    - Верификация - проверка соответствия софта требованиям.
    - Валидация проверка - что требовнаия соответствуют ожиданиям пользователя и условиям использования.


10. Что такое тест-план?
        - План тестирования описывает все действия по тестированию в рамках одного проекта. Здесь вы можете найти информацию обо всем, что нужно сделать тестировщику или команде QA в ходе проекта. 
        - В каждом плане тестирования указывается объект тестирования, график работы, критерии начала и окончания тестирования, стратегия, риски и список выполненных работ.


11. Методика/методология/стратегия тестирования:
        Методология - учение о структуре, логической организации, методах и средствах деятельности.
        Методология - учение о системе принципов и способах организации и построения теоретической и практической деятельности.
            Организовать деяетельность - означате упорядочить её в целостную систему с четко поределёнными характеристиками, логической структурой и процессом её осуществления.

        - Стратегия — искусство руководства; общий план ведения этой работы, исходя из сложившейся действительности на данном этапе развития.
        - Стратегия тестирования — это план проведения работ по тестированию системы или её модуля, учитывающий специфику функциональности и зависимости с другими компонентами системы и платформы.

        - Методика — это практический подход или набор инструкций, которые используются для достижения определенных целей или решения конкретных задач. Это конкретно описываемый подход, включающий указание шагов, процедур и методов, которые должны быть использованы для выполнения определенной работы. Методика обычно ориентирована на решение конкретной проблемы или достижение определенного результата в рамках установленных ограничений. Например (для конкретного проекта или организации), методика разработки программного обеспечения, методика тестирования программы, методика бюджетного планирования, методика управленческого учета и т.д.
        - Методология — это более общий и философский подход к исследованию, изучению и оценке методов и процедур.

12. Из каких этапов состоит процесс тестирования?
    https://habr.com/ru/articles/801531/
    SDLC - Software Development Lifecycle) - (Жизненный цикл разработки ПО) + ГОСТ 12207-2010
        Жизненный цикл программного обеспечения (software lifecycle):
            Период времени, начинающийся с момента появления концепции программного обеспечения и заканчивающийся тогда, когда дальнейшее использование программного обеспечения невозможно. 
            Жизненный цикл программного обеспечения обычно включает в себя следующие этапы:
                - Планирование
                - концепт;
                - описание требований;
                - дизайн;
                - реализация;
                - тестирование;
                - инсталляция и наладка;
                - эксплуатация и поддержка и, иногда, этап вывода из эксплуатации. 
        Данные фазы могут накладываться друг на друга или проводиться итерационно. (ISTQB)
        Период времени от концепции до первоначальной версии известен как жизненный цикл разработки, который является частью жизненного цикла программного обеспечения. С момента первого запуска система переходит в эксплуатацию (функционирование). Система остается в эксплуатации до момента прекращения использования. (ГОСТ 56920)

    STLC - Software Testing Lifecycle - (Жизненный цикл тестирования ПО)
    1   - Анализ требований:
            -- Тут же обсуждаются условия начала и окончания тестирования в части удовлетворения требований (но условий начала и окончания может быть множество - допустим бюджет).
    2   - Планирования тестирования:
            -- Определяются сроки, ресурсы, участники, роли, инструменты и окружение, определяются метрики и метод сбора метрик.
            -- План составляется на базе Требований, Тестовой стратегии, Анализ рисков.
    3   - Разработка тест-кейсов:
    4   - Настройка тестовой среды:
    5   - Выполнение тестов
    6    - Завершение цилка испытаний.


    Этапы:
        - Этапы жизненного цикла ПО:
                -1- Планирование
                -2- Анализ (выявление требований(прямые, косвенные), бизнес процессы, ограничения)
                -3- Дизайн (системный, архитектурный)
                -4- Реализация/Разработка программного обеспечения
                -5- Тестирование программного обеспечения
                -6- Развертывание
                -7- Внедрение -> Техническое обслуживание -> Сопровождение

        -5- Этапы жизненного цикла ТЕСТИРОВАНИЯ детальнее (https://testengineer.ru/zhiznennyj-cikl-testirovaniya-prilozhenij/):
                - Выявление и уяснение целей и задач что ставятся перед тестированием
                        >>> What have been done?
                        >>> Сроки; Зона ответственности(что входит в зону ответственности, что не входит); Сигнал начала и окончания тестирования
            1   - Анализ продукта;
                    - Работа с требованиями
                            >>> Выявление требований;
                            >>> Определение объёма тестов;
                            >>> Определение приоритетов тестирования;
                            >>> MatrixTracabilit;
                            >>> Определение рисков при тестировании.
            2   - Разработка стратегии тестирования и планирование процедур контроля качества;
                            >>> Определение целей тестирования
                            >>> Определение видов тестирования/среды/
                            >>> Критерии входа и выхода из тестирования
                            >>> Ресурсы требуемые для тестирования, периодичность
            3   - Создание тестовой документации
                        >>> Генерация тестовых случае/Тест дизайн; Отбор тестовых случае;
            4   - Подготовка и настройка тестового окружения;
            5   - Тестирование прототипа:
                        >>> Проведение проверок;
            5   - Основное тестирование:
                        >>> Проведение проверок;
                        >>> Фиксация результатов;
                        >>> Анализ результатов;
                            >>> Передача информации о соответствии проверенного продукта требованиям.
            6   - Стабилизация:
                        >>> Отладка и проверка кода;
                        >>> Проверка на регресс;
            7   - Эксплуатация (Внедрние и обслуживение / альфа/бетта);


13. Тест-дизайн
    - Основная цель тест-дизайна — структурировать процедуры тестирования, чтобы было легче отслеживать покрытие требований тест-кейсами.
        - Согласовать и зафиксировать перечень проверок.
        - Сделать предсказуемым тестирование.

    - Стратегический дизайн (Что будем тестировать, а что нет. Что входит в зону тестирования, а что нет):
        - Определение границ тестирования (что тестируем, а что нет);
            -- Оценка рисков;
            -- Расстановка приоритетов проверок;
        - Выделение приоритетных WorkFlow И Критического(их) пути(тей) (critical path);
        - Определение сценариев применения и пользовательских историй (Use Story Testing)
        - Определение/формирование приемочных тестов исходя из ТЗ (не путаем со Smoke. Да они могут пересекаться или полностью дублироваться, но сейчас речь не про Sanity/Smoke. Для понимания см. рис. Приемочные_тесты).


                Критический путь - 
                Приёмочные тесты -
                                Приемочные тесты — это формальные тесты, которые проверяют, отвечает ли система требованиям бизнеса. При этом во время тестирования должно быть запущено само приложение, и основное внимание уделяется воспроизведению поведения пользователей. В ходе этого тестирования возможен даже замер производительности системы.

                Сковзные тесты - 
                                Сквозное тестирование копирует поведение пользователя при работе с ПО в контексте всего приложения.
                                Сквозные тесты очень полезны, но их выполнение обходится довольно дорого, к тому же, когда они автоматизированы, такие тесты тяжело обслуживать. Рекомендуется иметь в наличии несколько основных сквозных тестов и активнее полагаться на более низкие уровни тестирования (модульные и интеграционные тесты), чтобы получать возможность быстро выявлять критические изменения.


        - Дымовое тестирование (smoke test) — тестирование, выполняемое на новой сборке, с целью подтверждения того, что программное обеспечение стартует и выполняет основные для бизнеса функции.
        - Тестирование критического пути (critical path) — направлено для проверки функциональности, используемой обычными пользователями во время их повседневной деятельности.
            - Тестирование критического пути направлено на изучение функциональности, используемой типичными пользователями в типичных повседневных действиях. Идея заимствована из управления проектами и трансформирована в контексте тестирования в следующее: есть большинство пользователей, которые чаще всего используют определенное подмножество функций приложения. Именно эти функции необходимо проверить, как только мы убедились, что приложение “работает в принципе” (тест на дымовую завесу прошел успешно). Если по какой-либо причине приложение не выполняет эти функции или выполняет их неправильно, многие пользователи не смогут достичь многих своих целей. Пороговое значение метрики успешного прохождения “теста критического пути” обычно составляет около 70-80-90%, в зависимости от сути проекта.
            - Чаще всего на практике, на данном уровне тестирования проверяется основная масса требований к продукту.
            - Позитивный тест критического пути — это проверка работоспособности функций программного продукта, с которыми пользователь сталкивается ежедневно.
            - Негативный тест критического пути — это проверка всевозможных вариантов нестандартного использования функциональности, используемой пользователем каждый день.
        - Расширенное тестирование (extended) — направлено на исследование всей заявленной в требованиях функциональности.

    - Тактический дизайн (когда определились, что тестировать, будем думать как):
        - Тестирование на основе классов эквивалентности (equivalence partitioning) — это техника, основанная на методе чёрного ящика, при которой мы разделяем функционал (часто диапазон возможных вводимых значений) на группы эквивалентных по своему влиянию на систему значений.
            -- Мы лишь предполагаем, что использование нескольких элементов из каждой группы будет достаточно показательным.
            -- Классы эквивалентности — это набор тестов, полное выполнение которого является избыточным и не приводит к обнаружению новых дефектов. Если мы ожидаем одинакового результата от выполнения двух и более тестов, эти тесты эквивалентны.
        -  Техника анализа граничных значений (boundary value testing) — это техника проверки поведения продукта на крайних (граничных) значениях входных данных.
            -- Граничные значения — это те места, в которых один класс эквивалентности переходит в другой. 
        - Попарное тестирование (pairwise testing) — это техника формирования наборов тестовых данных из полного набора входных данных в системе, которая позволяет существенно сократить количество тест-кейсов.
            -- Эта техника используется, когда нам необходимо комбинировать очень много различный вариантов входных данных.
            -- Тестовые сценарии разрабатываются таким образом, чтобы выполнить все возможные отдельные комбинации каждой пары входных параметров.
                --- https://pairwise.teremokgames.com/ 
        - Тестирование на основе состояний и переходов (State-Transition Testing) — применяется для фиксирования требований и описания дизайна приложения.
            -- Таблица переходов представляет собой все возможные комбинации начальных и конечных состояний, включая действительные и недействительные переходы, инициирующие события, защитные условия и результирующие действия. Диаграммы состояний и переходов обычно, показывают только действительные переходы и исключают недействительные переходы.
            -- Тесты создаются для покрытия типичной последовательности состояний, покрытия каждого возможного состояния, покрытия каждого возможного перехода, проверки специфических последовательностей переходов, или для проверки недействительных переходов. (ISTQB FL 2018)
        - Таблицы принятия решений (Decision Table Testing) — техника тестирования, основанная на методе чёрного ящика, которая применяется для систем со сложной логикой.
        - Доменный анализ (Domain Analysis Testing) — это техника основана на разбиении диапазона возможных значений переменной на поддиапазоны, с последующим выбором одного или нескольких значений из каждого домена для тестирования.        
            -- Использующаяся для определения действенных и эффективных тестовых сценариев в случаях, когда множественные параметры могут или должны быть протестированы одновременно. Методика базируется и обобщает методы эквивалентного разбиения и анализа граничных значений.
                --- Для понимания возьмем простой пример. Скажем, что у нас есть поле Логин и Пароль. В идеале, нам необходимо каждое поле протестировать по отдельности. Однако доменное тестирование позволяет сделать так, чтобы в одном тесте мы смогли проверить оба поля одновременно и без потери в качестве тестирования.
            -- То есть суть доменного тестирования заключается в том, чтобы разделить набор условий тестирования на те значения, которые можно считать одинаковыми, и за счет этого протестировать эффективней.
            -- Цель доменного тестирования — предоставить стратегию по выбору минимального набора показательных тестов.
                Шаги
                --- Для начала нужно разделить предполагаемые значения на отдельные группы, условия — это могут быть цифры, буквы, допустимый диапазон цифр, предполагаемые граничные значения.
                --- Далее необходимо выявить конкретный набор значений и выбрать из них наиболее показательные, представляющие каждую группу, включая обязательно границы. Здесь мы уже определяем значения, которые будем проверять.
                --- И далее необходимо скомбинировать эти значения таким образом, чтобы отдельные параметры можно было протестировать одновременно.

                Полезные хитрости
                    --- Производите сразу несколько позитивных тестов (например, ввод данных в несколько полей), вместо одного.
                    --- Не стоит комбинировать больше семи позитивных значений одновременно, иначе тест будет громоздким. В случае обнаружения ошибки ее придется долго локализовывать.
                    --- С негативными тестами так комбинировать, к сожалению, не получится, так как мы должны быть уверены, что тестируемая программа корректно отслеживает проблемы с каждым из полей.
                    --- Не стоит в одном тесте комбинировать позитивные и негативные сценарии. Каждое негативное условие всегда проверяется отдельно.
                    --- Начинайте проверку с граничных значений, так вы откините большое количество ненужных проверок.

        - Сценарий использования (Use Case Testing) — Use Case описывает сценарий взаимодействия двух и более участников (как правило — пользователя и системы).
        - RiskBaseTasting

14. 7 принципов тестирования:
        Принцип 1       Тестирование показывает наличие дефектов
                                - Тестирование может выявить тот момент, что ошибки присутствуют, но не может доказать в полной мере, что дефектов нет. Пример с машиной.
        Принцип 2       Исчерпывающее тестирование невозможно
        Принцип 3       Раннее тестирование
                                - Сохраняет деньги. Это принцип говорит о том, что чем раньше выявится та или иная проблема – тем меньше средств и трудозатрат потребуется для её устранения.
        Принцип 4       Кластаризация/скопление дефектов 80% дефектов в 20%модулей.
                                - Кластеризация дефектов — принцип, который предполагает, что небольшое количество модулей содержат в себе большинство багов. Это яркий пример применения в тестировании принципа Парето: 80% проблем таятся в 20% модулей.
        Принцип 5       Парадокс пестицидов
                                - Если те же тесты повторяются снова и снова, то «почти одинаковые» тест-кейсы не смогут помочь найти больше ошибок.
                                - Если есть некий набор повторяемых тестов, он будет бесполезен в определении новых дефектов.
                                - Чтобы решить эту проблему, тест-кейсы должны регулярно просматриваться и обновляться, должны добавляться новые тест-кейсы, ориентированные на другую функциональность или тестирующие уже существующую под другим углом.
        Принцип 6       Тестирование зависит от контекста
                                - Цели, стек технологий, сроки, выбранная модель раработки, инструменты, ожидания от качества (выбранные метрики).
        Принцип 7       Заблуждение об отсутствии ошибок.
                                - Тестирование показывает наличие багов в продукте но ни как не их отсутствие.
                                - Сборка без ошибок - это сборка, в которой есть ошибка но они нам не мешают жить и выполнять задачи.
                                        - Это либо неизвестные ошибки, что нам не мешают.
                                        - Либо известные, но которые мы знаем как обойти без прикладывания сил и без последствий, если мы на неё наткнёмся.

15. Что по вашему качество и как его оценить/метрики.
    Качество (Полезность) - это когда система выполняет/решает задачи, что были возложены на него (не больше не меньше).
    Есть метрики и характеристики качества (характеристики измеряются метриками и задаются в рамках продукта вернее при формировании замысла продекта).

    1)Функциональность;2)Корректность;3)Своевременность;4)Простота использования;
    5)Расширяемость;6)Повторное использование;7)Совместимость;8)Переносимость;
    9)Эффективность; 10)Устойчивость
    11)Обслуживаемость; 12) Поддерживаемость

    ИСО/МЭК 25010
        Функциональная пригодность
        Уровень производительности
        Совместимость
        Удобство использовния
        Надёжность
        Защищённость
        Сопровождаемость
        Переносимость

16. Покрытие кода. Метрики.

==================================================================================================================================================
1. Вопрос по предыдущему месту работы:
        Как построен процесс:
            - Как нарезаются задачи/планы/сроки на разработку?
            - Какие данные на вход тестированию (от БА, от РП):
                - Кто ставить задачу, кто говорит что смотрим?
            - Как строится процесс проверки (что проверять, а что нет?)
                - Как понять, что достаточно?
                - В части стабилизации - как оцениватеся полнота и достаточность проверки?
            - Чем ограничено тестирование релиза/сборки/исправления?
            - Что и как выполняется при проверке исправления?
            - Чем занимаетесь когда новых сборок нет или новая сборка есть но нового функционала нет?
                - Что проверяете, какие области берёте на проверку?
                - Как происходит декомпозиция в этом случае?
                - При наличии времени (в части регресса - проводятся доп. проверки)?
            - Что с безопасностью?
                - Кто ответчает за безопасность - отдельная позиция?
                - Аудит?
                    Доступность тех или иных возможностей тому или иному пользователю?
                    Когда получаем список документов/пользователей итд - в каком виде получаем их (ID?) а какое UUID?

            - Какие недостатки вы видите/видели на предыдущем месте работы? Что планируете предпринять на новом месте работы?
2. Что является обязательным и что является достаточным при проверке?
    - Как выбираются тесты кейсы?
        - Как приоритезируются и приоритезируются ли?
    - Критический путь?
        - Модель исключений исключительных ситуаций;
        - Модель угроз (как человеческий фактор, так и технический)
        - Восстановление работы;
    - Как как оценить качественный софт или нет - какие метрики и значения есть?
3. Осталось время (есть оперативная пауза - задерживается сдача, заминка во внедрении)
    Ваши действия?
    Часто слышу, что я всё проверил, всё нормально. Что это означает?
        - Есть еще задачи?
--------------------------------------------------------------------
Задачи:
1. Есть функционал создания пользователя через WebAPI.
    - Этим функционалом и созданным пользователем мы пользуемся в дальнейшем.
    - Я как разработчик/аналитик/ProjectOwner - готов ответить на ваши вопросы и уточнения.

    - Какие проверки вы будете выполнять?
        - С чего начнёте?
        - Создание через WebAPI
            - Ответ - ведь WebAPI это основной функционал;
            - В БД - посмотреть в хранилище - ДА, но что это даст?
                - Ведь не факт, что мы работаем с SQL БД.
        - Рестарт сервера приложений?
        - Необходимая и достаточная проверка?
        - Есть интеграция в внешними системами?
            - Как получают данные из нас.
            - Могут ли получить данные из БД или прямо запросом?
                - Кто может получать данные - полномочия?

2. Есть многострочный редактор, у редактора есть настройка обрезать по заданной длине текст.
    Ваши проверки и уточняемые требования.
        - Обрезка по границе слова.
        - Если нет разделения строк?
        - Если на одной строке по одному символу?

--------------------------------------------------------------------------------------------------------------------------------------------------
Обязательные стандарты для изучения.
ISO 29119
IEEE 829\1008
TPI Next&TMap
TMMI
ISTQB
--------------------------------------------------------------------------------------------------------------------------------------------------

Всё в одном месте.
    https://habr.com/ru/companies/yandex_praktikum/articles/758384/
--------------------------------------------------------------------------------------------------------------------------------------------------
1. Методологии разработки ПО / подходы к разработке ПО:
        https://habr.com/ru/companies/edison/articles/269789/
        https://testengineer.ru/development-methodologies/
        https://testengineer.ru/sdlc/
--------------------------------------------------------------------------------------------------------------------------------------------------
2. Что такое тестирование? В чем его суть как процесса?
        https://habr.com/ru/post/254209/
--------------------------------------------------------------------------------------------------------------------------------------------------
3. В чём цель тестирования?
--------------------------------------------------------------------------------------------------------------------------------------------------
4. Что такое ошибка?                   

    Приоритет (priority) — это степень важности, присваиваемая багу. Другими словами определяется, насколько срочно это ошибка должна быть исправлена.
        Приоритет — инструмент менеджмента, и перед его определением последний должен ответить минимум на следующие вопросы:
        Как баг влияет на сроки?
        Как баг влияет на процесс тестирования?
        Как баг влияет на работу остальных тестировщиков?
        Каковы затраты необходимы на устранение бага?
        Должны ли мы изменить требования к ПО?

    Критичность (severity) — это важность воздействия конкретного дефекта на разработку или функционирование компонента или системы.
        Критичность ошибки определяется тестировщиком, который обнаружил баг, но перед этим он должен ответить себе на такие вопросы:
        Как эта ошибка будет влиять на процесс тестирования?
        Как эта ошибка будет влиять на клиента?
        Как эта ошибка влияет на систему?
        Как эта ошибка влияет на сроки тестирования?
        Блокирует ли эта ошибка другие тесты?
        И т.д.
--------------------------------------------------------------------------------------------------------------------------------------------------
5. Какие бывают ТРЕБОВАНИЯ?
--------------------------------------------------------------------------------------------------------------------------------------------------
6. Расскажите о тестовой документации: цели, виды.

    Внутренняя документация:
    Как видно, каждый последующий вид внутренней тестовой документации в определенной мере детализирует предыдущий. У каждого документа есть свое назначение и все вместе они – инструмент для облегчения генерации, отбора и воспроизведения тестовых случаев. Кроме того хорошо структурированная, поддерживаемая, читаемая, организованная и доступная тестовая документация позволяет в долгосрочной перспективе:
        - Обеспечить стабильность покрытия требований проверками.
        - Обеспечить показательность всех проводимых проверок.
        - Обеспечить необходимость и достаточность проводимых проверок.
        - Сэкономить время на этапах тестирования, сводя их к проведению проверок и анализу  и передаче результатов.
        - Снизить входной уровень квалификации тестировщика для проведения проверок.
        - Повысить прогнозируемость сессий тестирования в части затрат времени и ресурсов.
        - Повысить прозрачность процесса тестирования для других участников процесса производства продукта.
        - Обеспечить базу знаний о продукте и истории его развития.

    Но следует учитывать, что есть и свои недостатки:
        - Стабильность покрытия. Со стремящейся к бесконечности долей вероятности, если проводится тестирование по документации, то будут проведены только те проверки, которые есть в данной документации.
        - Вероятность пропуска ошибки (чаще всего несоответствие косвенному требованию, непокрытому документацией) возрастает.
        - Плохая локализация ошибки тестировщиком. Либо полное отсутствие локализации. Фактический результат не совпал с ожидаемым – ошибка. А что это на самом деле: ошибка; проявление ошибки; инцидент, уже описанной ошибки, тестировщик не проверит (в подавляющем количестве случаев).
        - Высокий требуемый уровень квалификации специалиста для создания и поддержания тестовой документации.
        - Большие временные затраты на создание и поддержание тестовой документации.
        - Слабо прогнозируемое время актуальности тестовой документации.

    - Отчет о тестировании (тест репорт) – документ, предоставляющий сведения о соответствии/ несоответствии продукта требованиям. Может так же содержать описание некоторых подробностей проведенной сессии тестирования, например, затраченное время, использованные виды тестирования, перечень проверенных случаев и т. п. В идеальном варианте фраза вида «Тест пройден. Ошибка не воспроизводится/Функционал работает корректно/Соответствует требованиям» означает, что продукт или его часть полностью соответствует требованиям прямым и косвенным (в производстве ПО).

    - Тестовый сценарий
        * Тестовый сценарий – последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им  проверок корректности поведения продукта в ходе этих действий. Может содержать информацию об исходном состоянии продукта для запуска сценария, входных данных и прочие сведения, имеющие определяющее значение для успешного и показательного проведения проверок по сценарию. Особенностью является линейность действий и проверок, т.е. зависимость последующих действий и проверок от успешности предыдущих. Цель документа – стабилизация покрытия аспектов продукта, необходимых для выполнения функциональной задачи, показательными необходимыми и достаточными проверками. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.
        * Тестовые сценарии работают на более высоком уровне тестирования. Они менее подробны, как бы более «человечны» и ориентированы на «путь пользователя» по приложению/сайту.
        * Тестовый сценарий может содержать в себе много тест-кейсов.
        * Тестовый сценарий работает «на стратегическом уровне», то есть меньше вдается в подробности «как?», а описывает «почему?». Тестовый сценарий ориентирован скорее на бизнес-поведение пользователя, на его мотивацию, чем на «дотошное» выполнение с фиксацией результатов.

    - Тест-кейс
        - Идея проверки.
        - Описание проверяемого требования или проверяемой части требования.
        - Используемое для проверки тестовое окружение.
        - Содержит условия запуска
        - Одно или несколько вводных условий/данных
        - Исходное состояние продукта перед началом проверки.
        - Шаги для приведения продукта в состояние, подлежащее проверке.
        - Входные данные для использования при воспроизведении шагов.
        - Ожидаемый результат.
        - Прочую информацию, необходимую для проведения проверки.
        - Результаты выполнения — тестовые выводы, или изменения, произошедшие в результате
        - Тест-кейс работает как бы «на тактическом уровне». Он описывает, что QA-инженеру нужно сделать и в каком порядке, и детализирует ожидаемые результаты.

---------------------------------------------------------
        - Тест-план (план тестирования) – формализованное и укрупненное описание одной сессии тестирования по одному или нескольким направлениям проверок. Т.е. перечень направлений проверок, которые должны быть проведены в рамках сессии тестирования (и, сообразных этим направлениям, требований). Также может содержать в себе необходимую информацию об окружении, методике, прочих условиях важных для показательности данной сессии тестирования. Под направлением проверок также может пониматься более детализированная тестовая документация (в виде ссылки на нее): чек листы, тестовые комплекты, тестовые сценарии, на которую необходимо опираться при проведении сессии тестирования. Основная цель документа – описать границы сессии тестирования, стабилизировать показательность данной сессии.
        - Тестовый сценарий – последовательность действий над продуктом, которые связаны единым ограниченным бизнес-процессом использования, и сообразных им  проверок корректности поведения продукта в ходе этих действий. Может содержать информацию об исходном состоянии продукта для запуска сценария, входных данных и прочие сведения, имеющие определяющее значение для успешного и показательного проведения проверок по сценарию. Особенностью является линейность действий и проверок, т.е. зависимость последующих действий и проверок от успешности предыдущих. Цель документа – стабилизация покрытия аспектов продукта, необходимых для выполнения функциональной задачи, показательными необходимыми и достаточными проверками. Фактически при успешном прохождении всего тестового сценария мы можем сделать заключение о том, что продукт может выполнять ту или иную возложенную на него функцию.
        - Тестовый комплект – некоторый набор формализованных тестовых случаев объединенных между собой по общему логическому признаку.
        - Чек-лист (лист проверок) – перечень формализованных тестовых случаев в виде удобном для проведения проверок. Тестовые случаи в чек-листе не должны быть зависимыми друг от друга. Обязательно должен содержать в себе информацию о: идеях проверок, наборах входных данных, ожидаемых результатах, булевую отметку о прохождении/непрохождении тестового случая, булевую отметку о совпадении/несовпадении фактического и ожидаемого результата по каждой проверке. Может так же содержать шаги для проведения проверки, данные об особенностях окружения и прочую информацию необходимую для проведения проверок. Цель – обеспечить стабильность покрытия требований проверками необходимыми и достаточными для заключения о соответствии им продукта. Особенностью является то, что чек-листы компонуются теми тестовыми случаями, которые показательны для определенного требования.
        - Тестовый случай (тест-кейс) – формализованное описание одной показательной проверки на соответствие требованиям прямым или косвенным. Обязательно должен содержать следующую информацию.
            Отличается от чек-листа тем что
                - Имеет конкретные входные данные и конкретные выходные данные.
                - Имеет под собой конкретный вариант/путь проверки.

                Т.е. чек-лист говорит что првоерить, тест-кейс говорит как проверить. Т.е. именно при написании тек-кейсов возникает техники тест-дизайна такие как (классы эквивалентности)

--------------------------------------------------------------------------------------------------------------------------------------------------
7. Критерии входа в тестирование и выхода из тестировнаия.
--------------------------------------------------------------------------------------------------------------------------------------------------
8. Виды и уровни тестирования.
--------------------------------------------------------------------------------------------------------------------------------------------------
9. Верификация и валидация
--------------------------------------------------------------------------------------------------------------------------------------------------
10. Что такое тест-план? Из чего состоит. Цели и задачи.
    Норм описано:
        https://testgrow.ru/lecture30

Тест-план:
    + Какие виды тестирования будут проводиться?
    + Полезно перечислить все виды тестовых активностей, которые впоследствии войдут в ваш план-график. Например, дизайн тестов, подготовку тестовой среды и так далее. Зачем? Чтобы ни о чем не забыть при составлении плана.
        - Что будет служить основой тестов (test basis)? Из чего вы собираетесь выводить тест-кейсы? Это могут быть требования, сценарии использования, некие внешние стандарты.
        - Аналитика от эсплуатации и ЧТЗ + анализ системы
        - Каковы критерии начала и завершения тестирования? Критерии начала тестирования обычно включают готовность необходимого окружения и успешное прохождение предыдущего уровня тестирования (например, успешная прогонка смоук-тестов является условием начала системного тестирования). Критерии завершения тестирования зависят от выбранных вами метрик, это может быть процент выполненных тестов, количество неисправленных дефектов разной степени серьезности или какие-то другие показатели. В любом случае, с этим стоит определиться.
        - Какие виды документации вы планируете создавать? Здесь важно понимать, служат ли эти документы вашим инструментом для внутренних нужд или же вы рассматриваете их как продукт, который входит в поставку.


    - Что такое тест план и как его написать?
        https://testengineer.ru/chto-takoe-test-plan-i-kak-ego-napisat/

    Тест План (План тестирования)   http://www.protesting.ru/testing/plan.html
        Что надо тестировать?
            описание объекта тестирования: системы, приложения, оборудования
        Что будете тестировать?
            список функций и описание тестируемой системы и её компонент в отдельности
        Как будете тестировать?
            стратегия тестирования, а именно: виды тестирования и их применение по отношению к объекту тестирования
        Когда будете тестировать?
            последовательность проведения работ: подготовка (Test Preparation), тестирование (Testing), анализ результатов (Test Result Analisys) в разрезе запланированных фаз разработки
        Критерии начала тестирования:
            готовность тестовой платформы (тестового стенда)
            законченность разработки требуемого функционала
            наличие всей необходимой документации
            ...
        Критерии окончания тестирования:
            результаты тестирования удовлетворяют критериям качества продукта:
                требования к количеству открытых багов выполнены
                выдержка определенного периода без изменения исходного кода приложения Code Freeze (CF)
                выдержка определенного периода без открытия новых багов Zero Bug Bounce (ZBB)
            ...

            Мастер тест-план (master test plan)
            Уровневый тест план (level test plan)

        1. Цели и задачи тестирования;
        2. Тестируемые бизнес-процессы;
        3. Элементы тестирования;
        4. Область тестирования;
        5. Применяемые виды и методы тестирования;
        6. Тестовые среды;
        7. Ожидаемые результаты тестирования;
        8. Ограничения тестирования;
            Это стабы или отдалённость от реальной среды.
        9. Риски тестирования;
            Это именно про процесс, сроки, качество тестирования (отсутствие компонентного тестирования) - события, которые могут привести к проблемым и их степень влияния.
        10. План проведения тестирования.

        Тест План (План тестирования) 
            3) Введение (ЦЕЛИ/ЗАДАЧИ Тестирования): (описываются цели и задачи для заказчика - не обязательно внешнего)
                Могут быть не только проверка работоспособности/функциональности, но и подготовка к приёмосдаточным испытаниям, или проходение аудита(регулятора).
                Или проверка исправлений и замечаний.
            4) Объект тестирования (ЧТО НАДО ТЕСТИРОВАТЬ): описание объекта тестирования: системы, приложения, оборудования;
            6) Функции, которые нужно протестировать (ЧТО БУДЕМ ТЕСТИРОВАТЬ): подробный список функций для проверки и время, за которое они должны быть проверены. Можно описать бизнес процессы.
            7) Функции, которые не нужно тестировать (ЧТО НЕ БУДЕМ ТЕСТИРОВАТЬ): указывается, что не те стируется, какие фичи, что остаётся вне тестов.
                И тут возможнные риски. см. 5 и 17
            8) Подходы (КАК БУДЕМ ТЕСТИРОВАТЬ): Описываются методы и виды тестирования, уровни, которые будем применять.                    
                    Благодаря этому клиент может получить полную картину действий по тестированию.
                9) Критерии прохождения тестов (МЕТРИКИ):
                    - Критерии начала тестирования: Билд готов, Требования и код не изменяются, Тестовая среда готова.
                    - Критерии окончания тестирования: Все согласованные тесты готовы; Ошибки исправлены; итд.
                10) Критерии остановки и требования для возобновления тестирования: по какой причине может быть остановлено тестирование.
            11) Результаты тестирования: описание итогов тестирования, сессии тестирования. Описывается в каком виде будут представлены отчёты.
                12) Оставшиеся задачи тестирования: Х
                13) Требования среды: Х
                14) Требования по части кадров и их обучения: Х
            15) Обязанности: В этом разделе описываются сферы ответственности каждого члена команды QA. Удобно составить таблицу с тремя столбцами — имя, должность и обязанности.
            16) Расписание (КАЛЕДРАНЫЙ ПЛАН): Тест план должен также включать дедлайны. Команде нужно как-то оценивать скорость работы. Для этого им нужно знать, сколько времени отводится на тестирование. Если есть несколько этапов тестирования, нужно расписать их порядок и сроки.
            5) Проблемы и риски: описываются риски команды, дедлайна т.е. риски в ходе тестирования
                Мол не проводим взаимодействие с реальными системами а выполянется со стаб.
                17) Планирование рисков и непредвиденных обстоятельств: Х
                    Риск(событие), тригер - какое событие пораждает этот риск, действия.
            18) Утверждение: Кто согласовывает, с кем составлен
                Те кто принимает решение должны ознакомиться, что будет делаться а что нет. Какие ресрусы, какие риски итд.

--------------------------------------------------------------------------------------------------------------------------------------------------
11. Методика/методология тестирования.
    См. вопрос 1. Там идёт речь о методологии разработки ПО. Именно МЕТОДОЛОГИЯ
        Алистер Кокберн предположил, что методология - это набор условностей, которым команда соглашается следовать. 
        Методология - учение о СТРУКТУРЕ, логической организации, методах и средствах деятельности.
        Методология - учение о СИСТЕМЕ принципов и способов организации и построения теоретической и практической деятельности.
            ИТОГО: Методология - учение об организации деяетльности.

    Как я понял:
        Исходя из задач и целей и вводных данных:
            Выбираются методологии тестировния (белый, серый, чёрный)
            Далее формируется стратегия:
                Что будет проверяться, что не будет проверятсья, что является началом и окончанеим тестирования
                Как будем подходить к снаряду, кто будет тестировать как и когда.

                Под каждый объект и вид тестирования - выбирается методика тестирования.

        Или наоборот, сначало стратегия (исходя из задач), исходя из стратегии - методология и потом методика.
            Но с др. стороны так разграничить не удастся - из входныдх данных поступает информация касающаялся и стратегии и методологии.

    Для тестирования проекта разрабатывается стратегия (в некоторой терминологии - план тестирования), которая строится на одной или нескольких МЕТОДОЛОГИЯХ.
        - Например, для тестирования юнитов используется методология белого ящика (в просторечии - юнит тестирование).
            - А вот выбрав методологию, допустим юнит-тестирование мы уже будем выбирать методику тестирования - т.е. как будем проверять исходя из выбранной методологии.
        - Для тестирования бизнес функциональности (т.е. кейсов использования, покрывающих решение какой-нибудь бизнес задачи) применяем методология черного ящика.

        - Методология тестирования программного обеспечения определяется как стратегии и типы тестирования, используемые для подтверждения того, что тестируемое приложение соответствует ожиданиям клиента. 
            - Методики испытаний включают функциональное и нефункциональное тестирование для проверки AUT.
            - Примерами методологий тестирования являются модульное тестирование, интеграционное тестирование, системное тестирование, тестирование производительности
        - Как и процесс разработки, процесс последующего тестирования программного обеспечения также следует определенной методологии.
            - Под методологией в данном случае мы понимаем разнообразные комбинации принципов, идей, методов и концептов, к которым вы прибегаете во время работы над проектом.

        - Методология тестирования программного обеспечения определяется как стратегии и типы тестирования, используемые для подтверждения того, что тестируемое приложение соответствует ожиданиям клиента.

    - А вот примером методики может служить методика тестирования для накопителя или для процессора.

    Стратегия тестирования:
        - Тестируем руками, чёрным ящиком, тесты пишем либо по спецификациям либо по существующему функционалу. Проектируем тесты сверху-вниз, разбивая приложение на тестовые области по логике операций приложения (новая команда, добавить удалить участника команды, удалить команду, что будем если удаляем непустую команду и т.д.). Для каждой области выделяем короткий список тестов, который будет выполняться в пакете дымового тестирования на выкатке новой версии.


    - «Методология (от «метод» и «логия») – учение о структуре, логической организации, методах и средствах деятельности» (Советский энциклопедический словарь).
    - «Методология – система принципов и способов организации и построения теоретической и практической деятельности, а также учение об этой системе» (Философский энциклопедический словарь).
    Если обобщить эти определения и придать бóльшую строгость, то можно дать следующее:
    - Методология – это учение об организации деятельности. Такое определение однозначно детерминирует и предмет методологии – организация деятельности.

    В этом случае методологию можно рассматривать очень широко – как учение об организации любой человеческой деятельности: и научной, и любой практической профессиональной деятельности, и художественной, и игровой и т.д. – с одной стороны. С другой стороны – и индивидуальной, и коллективной деятельности.

    Таким образом, методология рассматривает организацию деятельности. Организовать деятельность означает упорядочить ее в целостную систему с четко определенными характеристиками, логической структурой и процессом ее осуществления – временнόй структурой (исходя из пары категорий диалектики «историческое (временнόе) и логическое»).

    Логическая структура включает в себя следующие компоненты: субъект, объект, предмет, формы, средства, методы деятельности, ее результат.

    Качество (успешность, эффективность) метода проверяется практикой, решением научно-практических задач — то есть поиском принципов достижения цели, реализуемых в комплексе реальных дел и обстоятельств.
----------------------
    Методология тестирования:
        - Методика — это практический подход или набор инструкций, которые используются для достижения определенных целей или решения конкретных задач. Это конкретно описываемый подход, включающий указание шагов, процедур и методов, которые должны быть использованы для выполнения определенной работы. Методика обычно ориентирована на решение конкретной проблемы или достижение определенного результата в рамках установленных ограничений. Например (для конкретного проекта или организации), методика разработки программного обеспечения, методика тестирования программы, методика бюджетного планирования, методика управленческого учета и т.д.
        - Методология — это более общий и философский подход к исследованию, изучению и оценке методов и процедур. Она представляет собой более фундаментальный уровень понимания, охватывающий общие принципы, цели и философию, которая лежит в основе определенной области знаний или исследования. Методология описывает стратегии, используемые для определения, разработки и анализа методов, а также принципы исследования. Например, методология исследования, методология обучения, методология управления проектами и т.д.

        - Уровень абстракции. 
            - Методика представляет собой более конкретный и практический подход, описывающий шаги и методы для достижения определенных целей в рамках определенной области. Методология же — это более абстрактный и теоретический подход, устанавливающий общие принципы и стратегии для использования методов в различных контекстах.
        - Область применения.
            - Методика ориентирована на решение конкретных задач в определенной области деятельности или знаний. В то время как методология применяется для изучения и организации методов, применимых в различных областях исследования.
---------------------------------------------------------
    Стратегия тестирования:
        - Стратегия — искусство руководства; общий план ведения этой работы, исходя из сложившейся действительности на данном этапе развития.
        - Стратегия тестирования — это план проведения работ по тестированию системы или её модуля, учитывающий специфику функциональности и зависимости с другими компонентами системы и платформы.
            * Стратегия определяет типы тестов, которые нужно выполнять для данного функционала системы, включает описание необходимых подходов с точки зрения целей тестирования и может задавать описания или требования к необходимым для проведения тестирования инструментам и инфраструктуре.
            * Пример: В рамках планируемых работ будет применена нисходящая стратегия (где тестирование будет проводиться от системного/комплексного к модульному с целью нахождения ошибок)
        - Стратегия отвечает на вопросы:
            * Как, каким образом тестирование даст ответ, что данный функционал работает?
            * Что нужно сделать и чем пользоваться из инструментальных средств, для достижения целей тестирования?
            * Когда определённый функционал будет тестироваться и соответственно когда ожидать получения результатов?
        - В стратегии тестирования нелишним будет упомянуть и о критериях оценки серьезности и приоритета дефектов. Оценка серьезности дефекта зачастую вызывает споры, если таковые критерии отсутствуют. Лучше формализовать, как мы будем оценивать важность дефекта и приоритет его исправления, и место таких критериев - именно в стратегии тестирования.
--------------------------------------------------------------------------------------------------------------------------------------------------
12. Из каких этапов состоит процесс тестирования?

Этапы тестирования:
    -- Выявление требований – пожалуй, один из главных шагов в процессе тестирования. Неизвестны требования – нет тестирования. Необходимо собрать всю доступную информацию о предмете тестирования, вариантах использования и т. п. Первый источник – техническая документация и юзер-стори – это прямые требования. Качество же косвенных требований во многом зависят от добросовестности, ответственности, квалификации тестировщика и всей команды проекта.
    -- Генерация тестовых случаев – выявление всех возможных случаев использования продукта, его характеристик и особенностей в процессе эксплуатации. Это значит: всех случаев, которые тестировщик может «придумать» на основе прямых и косвенных требований, известных ему. Этот  этап требует высокой квалификации специалиста по тестированию.
    -- Отбор тестовых случаев – отбор наиболее показательных, значимых и воспроизводимых тестовых случаев. От этого этапа зависит, насколько тестирование будет полезным, эффективным и анализируемым. Например, в «простом» примере с красной кнопкой понятно, что количество косвенных требований стремится к бесконечности, и проверять их все подряд – полный абсурд, но подобные кейсы должны быть сгенерированы хотя бы в голове проверяющего. А для того чтобы они не вошли в проверки, необходимо выполнить соответствующий отбор и проверить только, действительно ли кнопка красная.
        --- Пример примитивный, но после его озвучивания соискатели перестают первым делом пытаться налить в стакан радий на тестовом задании J (кто принимал участие в собеседовании на должность тестировщика, тот знает это нехитрое задание на генерацию и отбор тестовых случаев).
    -- Проведение проверок – тут все понятно. Либо согласно документации, либо ad hoc (интуитивно, свободный поиск, без документации). В любом случае это проводится согласно списку отобранных проверок. Почему-то большинство именно этот пункт называет тестированием. И в голове обывателя, незнакомого с профессией, только один этот пункт и содержится J.
    -- Фиксация результатов – создание внутренней и внешней тестовой документации в формализованном виде или в виде записей и т. п. На данном этапе отчет о тестирование даже если и создается, то не считается законченным.
    -- Анализ результатов – вынесение решения о соответствии проверенного продукта требованиям. Формализация данного решения и его обоснование в виде отчета о тестировании. Сюда также входят процедуры по оценке покрытия требований проверками, тайм-шитинг и пр. Таким образом, проводится анализ не только результатов, но и самой сессии тестирования.
    -- Передача информации о соответствии продукта требованиям. Формально: передача внешней тестовой документации заинтересованным в ней сторонам, зачастую инициатору сессии тестирования. В общем случае: помимо документации предоставляется информация о рисках, которые были выявлены в продукте, требованиях, процессах, передаются рекомендации по отработке этих рисков и т. п. Но это – уже QA J!

--------------
Перечислите этапы жизненного цикла тестирования.
        https://testengineer.ru/sobesedovanie-qa-trainee-junior/
    - Планирование тестов Анализ требований, создание стратегии тестирования проекта
    - Создание тест-кейсов    QA-инженеры пишут тест-кейсы
    - Настройка тестового окружения   Настройка хард - и софт-компонентов тестового окружения
    - Выполнение тестов   Выполнение тестов и сравнение ожидаемого с полученными результатами
    - Закрытие цикла  Митинг QA-команды по результатам, оценка критериев завершения цикла, глядя на тестовое покрытие, качество, стоимость, потраченное время, критически важные бизнес-цели, и особенности продукта

--------------------------------------------------------------------------------------------------------------------------------------------------
13. Тест-дизайн

Model-based testing is a software testing technique where the run time behavior of the software under test (тестируемое ПО) is checked against predictions made by a model. A model is a description of a system’s behavior. Behavior can be described in terms of input sequences, actions, conditions, output, and flow of data from input to output. It should be practically understandable and can be reusable; shareable must have a precise description of the system under test.

    Data Flow
    Control Flow
    Dependency Graphs
    Decision Tables
    State transition machines

---------------------------------------------------------
Динамические техники тест-дизайна
Черный ящик:
    - Эквивалентное Разделение (Equivalence Partitioning — EP) — это техника, при которой входные данные разбиваются на классы эквивалентности, которые затем используются для тестирования программного обеспечения. Например, для тестирования формы входа на сайт, классы эквивалентности могут быть созданы на основе типа введенных данных (например, электронная почта или пароль).
    - Случаи использования (Use case testing) — это техника, которая используется для тестирования программного обеспечения на основе его функциональности. В этой технике тесты разрабатываются на основе сценариев использования программного обеспечения, чтобы убедиться в его соответствии требованиям заказчика.
    - Анализ Граничных Значений (Boundary Value Analysis — BVA) — это техника, при которой тесты разрабатываются на основе значений, находящихся на границах допустимых входных данных. Например, если программа принимает числа от 1 до 100, то тесты должны быть разработаны для проверки значений 1, 100 и значений, находящихся вблизи этих границ.
    - Комбинаторные техники (Combinatorial Test Techniques) — это техника, которая используется для создания тестов, покрывающих все возможные комбинации значений входных данных. Такие тесты позволяют выявить множество ошибок, которые могут быть пропущены при других подходах.
    - Переходы между состояниями (State transition) — это техника, которая используется для тестирования программного обеспечения, в котором состояние системы меняется в зависимости от входных данных. Тесты разрабатываются на основе переходов между состояниями программы.

    - Classification Tree Method — это техника, которая используется для создания иерархических деревьев классификации, которые затем используются для создания тестовых сценариев.
    - Domain testing — это техника, при которой тесты разрабатываются на основе области допустимых значений входных данных, выделяя подмножества, которые представляют собой разные домены. Например, при тестировании приложения для продажи автомобилей, один домен может представлять собой список доступных марок автомобилей, а другой — диапазон цен.
    - Decision Table Testing — это метод, при котором все возможные комбинации входных параметров и соответствующих им выходных результатов записываются в таблицу. Эта таблица затем используется для определения комбинаций входных значений, которые нужно протестировать, чтобы покрыть все возможные комбинации.
    - User Journey Test — это техника, при которой тесты разрабатываются для эмуляции реальных пользовательских сценариев использования приложения. Это помогает выявить потенциальные проблемы, с которыми могут столкнуться пользователи при использовании приложения, и улучшить пользовательский опыт.
    - Random Testing — это метод, при котором тесты выбираются случайным образом из всех возможных комбинаций входных параметров. Цель этого метода — проверить приложение на предмет непредвиденных ошибок и ошибок, которые могут произойти в нестандартных ситуациях.
    - Scenario Testing — это техника, при которой тесты разрабатываются для проверки различных сценариев использования приложения, которые могут произойти в реальной жизни. Тестирование сценариев помогает выявить проблемы, которые могут возникнуть при выполнении определенных действий пользователем.
    - Syntax Testing — это техника, при которой тестирование проводится на корректность синтаксиса входных данных и команд, которые отправляются в приложение. Тестирование на синтаксическую корректность помогает выявить ошибки ввода данных и неправильные команды, которые могут привести к сбоям в работе приложения.
    - Check List Based Testing — это техника, при которой тесты создаются на основе чек-листа, который содержит список вопросов и пунктов для проверки. Эта техника может помочь в создании более полных и систематических тестов.
    - Risk-Based Testing — это техника, при которой тесты разрабатываются на основе анализа рисков. Она помогает определить наиболее критические области приложения и создать тесты для этих областей с высоким приоритетом.
    - Cause-Effect Graphing — это техника, при которой строится график причинно-следственных связей для исходных данных и их комбинаций. Она позволяет определить наиболее важные и рискованные комбинации входных данных и создать тесты для их проверки.
Основанные на опыте:
    - Исследовательское тестирование (Exploratory testing) — это техника, при которой тестировщик изучает систему, ее функциональность и потенциальные проблемы в процессе тестирования. Она помогает обнаружить неожиданные ошибки и улучшить качество продукта.
    - Предугадывание ошибки (Error Guessing — EG) — это техника, при которой тестировщик использует свой опыт и интуицию для предсказания возможных ошибок и создания тестов для их проверки.
    - Ad-hoc testing — это техника, при которой тестировщик тестирует систему без заранее определенного плана или сценария. Она позволяет быстро находить проблемы, которые могут быть пропущены другими техниками.
     -Attack Testing — это техника, при которой тестировщик пытается найти уязвимости и нарушить безопасность системы путем проведения специально спроектированных атак.

Практические примеры использования техники тест-дизайна
Конкретные примеры применения техники тест-дизайна могут различаться в зависимости от конкретного проекта и тестируемого продукта. Вот несколько практических примеров:
    - Equivalence Partitioning (EP): если тестируется веб-форма для регистрации пользователей, можно разделить все возможные варианты ввода данных на эквивалентные группы, например: правильный адрес электронной почты, неправильный адрес электронной почты, пустое поле для электронной почты, длинное поле для электронной почты.
    - Boundary Value Analysis (BVA): если тестируется приложение для работы с числами, можно проверить работу приложения на крайних значениях, например, максимальное и минимальное значение, а также на значениях, которые находятся непосредственно перед этими граничными значениями.
    - Combinatorial Test Techniques: если тестируется сложное приложение с множеством вариантов настроек и комбинаций, можно использовать техники комбинаторного тестирования для создания тестовых наборов, которые покрывают все возможные комбинации настроек.
    - State Transition Testing: если тестируется приложение, которое имеет несколько состояний, можно разработать тест-кейсы для проверки переходов между этими состояниями.
    - Domain testing: если тестируется приложение, которое обрабатывает определенный диапазон данных (например, даты, временные интервалы), можно разработать тесты, которые покрывают все возможные варианты входных данных, включая граничные значения.
    - Risk-Based Testing: если тестируется приложение, которое имеет много возможных ошибок, можно использовать риск-анализ для определения наиболее вероятных проблем и сосредоточить тестирование на этих областях.
    - Exploratory testing: если тестируется новое приложение или функциональность, которая не имеет точного описания или спецификации, можно использовать исследовательское тестирование для поиска ошибок и проблем в интерфейсе и функциональности.

Белый ящик
    - Выражение (Statement), Ветвь (Branch), Условие (Condition), Решение (Decision) — это техники структурного тестирования, при которых тесты создаются на основе анализа кода программы. Они позволяют проверить все возможные ветвления в коде и выявить ошибки, связанные с его логикой.
    - Конечный автомат (FSM) — это техника структурного тестирования, при которой тесты создаются на основе модели конечного автомата, описывающей все возможные состояния системы и переходы между ними.
Cтатические техники тест-дизайна
    Reviews
        - Неформальное ревью (Informal review): это техника, при которой разработчики, тестировщики и другие заинтересованные стороны обсуждают код или документацию в неформальной обстановке, чтобы выявить потенциальные проблемы и улучшения.
        - Техническое ревью (Technical Review): это техника, при которой эксперты по технологии проводят формальный процесс обзора программного обеспечения для обнаружения ошибок и улучшения качества.
        - Инспекция (Inspection): это формальная техника обзора, которая включает в себя процесс систематического анализа программного кода с целью выявления дефектов и улучшения качества.
        - Прохождение (Walkthrough): это техника обзора, при которой автор или исполнитель программного кода демонстрирует свою работу другим участникам команды для получения обратной связи и выявления потенциальных проблем.
    Статический анализ:
        - Стандарты (Standards): это техника, которая использует установленные стандарты и руководства для определения требований к тестированию и оценки соответствия продукта этим требованиям.
        - Поток данных (Data Flow): это техника, которая использует модель потоков данных для исследования программного кода и выявления потенциальных проблем.
        - Путь (Path): это техника, которая использует модель пути выполнения для исследования программного кода и выявления потенциальных проблем.
        - Поток управления (Control Flow): это техника, которая использует модель потока управления для исследования программного кода и выявления потенциальных проблем.
---------------------------------------------------------
https://testengineer.ru/equivalence-classes-guide/

Классы эквивалентности (эквивальентное разбиение)
    Коротко: выбранные тестировщиком наборы данных (диапазоны), которые подаются на ввод в модуль, и это должно приводить к одинаковым результатам.

    Стандартные действия по методике:
        - Правильно определяются классы эквивалентности, это главное.
        - Выбирается один представитель (член) в каждом классе. Из каждого эквивалентного набора тестов выбирается один тест.
        - Выполнение тестов от каждого класса.
        - Если времени достаточно (или ситуация требует, см. далее о типах), берутся несколько членов из каждого класса. Но у опытного тестировщика классы определены правильно с начала, поэтому несколько членов будут не обязательны (избыточны = покажут те же результаты).


https://ru.hexlet.io/courses/qa-engineer-workflow/lessons/test-design-techniques/theory_unit

Доменное тестирование:
    Доменное тестирование (domain analysis) — методика разработки тестов, использующаяся для определения действенных и эффективных тестовых сценариев в случаях, когда множественные параметры могут или должны быть протестированы одновременно.

    Очень часто классы эквивалентности, относящиеся к позитивным проверкам, можно проверять совместно.

    Возьмем для примера такие требования:
        Размер файла: до 200 МБ
        Имя файла: от 5 до 24 символов, только латиница
        Форматы файлов: только изображения

    В этом случае нужны такие проверки:
        Загрузить файл менее 200 МБ
        Загрузить файл с именем hexlet
        Загрузить файл с расширением .jpg

    Можно заменить одной проверкой:
        Загрузить файл менее 200 МБ, с именем hexlet.jpg

Попарное тестирование (pairwise)
    Попарное тестирование – техника тест-дизайна, при которой тест-кейсы создаются так, чтобы выполнить все возможные отдельные комбинации каждой пары входных параметров.

    Достаточно проверить комбинации пар входных параметров, потому что ошибки чаще всего находятся именно на перекрестке двух параметров. Исключения бывают, но они достаточно редкие.

Таблица принятия решений
    Таблица решений или матрица решений — способ компактного представления модели со сложной логикой; инструмент для упорядочения сложных бизнес требований, которые должны быть реализованы в продукте.

    Это взаимосвязь между множеством условий и действий.

    Таблица принятия решений представляет собой таблицу с двумя осями — вертикальной и горизонтальной. В вертикальной оси перечислены функциональные аспекты приложения, которые должны быть проверены, в то время как в горизонтальной оси перечислены различные варианты использования приложения. Каждый элемент таблицы содержит информацию о том, следует ли проверять соответствующий функциональный аспект для данного варианта использования приложения.

    Таблица принятия решений содержит следующие элементы:
        - Условия — список возможных условий
        - Варианты — комбинация из выполнения и/или невыполнения условий этого списка
        - Действия — список возможных действий (вариантов исхода)

    Например, кредит выдаётся людям, удовлетворяющим трём условиям:
        Возраст: 18-60 лет
        Гражданство: Россия
        Стаж работы: более 5 лет ИЛИ средняя месячная зарплата за год больше 100 тысяч рублей

>>>     Условие             Значение 1  Значение 2  Значение 3  Значение 4
        Возраст 18-60       да          да          да          нет
        Гражданство РФ      да          да          да          да
        Стаж больше 5 лет   да          нет         да          да
        ЗП выше 100 тысяч рублей нет    да          да          да
>>>    Действие                
        Кредит одобрен      да          да          да          нет
        Кредит передан в др. банк нет   да          нет          да

        Шаг 1: Подготовьте список входных параметров с возможными доступными значениями:
        Шаг 2: Создайте строки с каждым именем параметра в первом столбце.
        Шаг 3: Создайте тестовую таблицу на основе всех возможных комбинаций параметров и заполните эти данные в следующих столбцах таблицы.
        Шаг 4: Попробуйте найти тестовые примеры, которые «дублируются», например, где результаты зависят от 1 параметра, а остальные параметры не имеют значения. Эти тестовые случаи могут быть исключены из окончательного набора тестов.

        Где использовать?
            Таблица решений может описывать сложные правила/требования. Условия — это входные данные, действия — это ожидаемый результат, а столбцы — тестовые примеры

        TODO: Проработать https://practicum.yandex.ru/blog/chto-takoe-tablica-prinyatiya-resheniy/
---------------------------------------------------------
Техники тест-дизайна
    Техники тест-дизайна помогают:
        Исключить непродуктивные тест-кейсы и сократить общее количество кейсов
        Покрыть тестами как можно больше функциональности
        Провести все тесты и не пропустить ничего важного

    Для работы с кодом (white-box) важны такие аспекты:
        Покрытие операторов
        Покрытие условий
        Покрытие путей
        Покрытие функций
        Покрытие вход/выход
        Покрытие значений параметров

    В работе с требованиями (black-box) тестирование проходит иначе:
        Классы эквивалентности
        Доменное тестирование.
        Граничные значения
        Попарное тестирование
        Таблица принятия решений
        Диаграмма состояний и переходов
        Тестирование вариантов использования
--------------------------------------------------------------------------------------------------------------------------------------------------
14. 7 принципов тестирования:
--------------------------------------------------------------------------------------------------------------------------------------------------
15. Что по вашему качество и как его оценить.
Качество:

https://www.tstu.ru/book/elib3/mm/2015/loskutov/pages/2_kriterii_kachestva_programmnogo_obespechenija.html
Качество - это когда система выполняет/решает задачи, что были возложены на него (не больше не меньше).
    Для комерческих - это в том числе и повышение прибыли или сокращения расходов.

    Разработка ПО - это услуга/продукт.

    В целом система качества предприятия регламентируется целым семейством стандартов ИСО–9000 [14].
    Отношения в области качества программного обеспечения вычислительных систем регламентируются стандартом ИСО–9126.
        ИСО–9126 рассматривает качество в контексте:
            - Заказчика (определяет внешние факторы/критерии качества)
            - Разработчика

    Универсальных методов оценки качества программного обеспечения нет и методов, которые может использовать заказчик при оценке качества заказываемого программного обеспечения еще до его заказа, практически нет.
        Качество определяется только исходя из ОПЫТА эксплуатации и анализа, при этом, в ходе эксплуатации, происходит изменение понимания и представления о качестве.
            Известны случае:
                - Когда были завышены требования к качеству (слишком высокие требования к обработки поверхности, по ходу эксплуатации требования снижали)
                - И обратно, когда требования к качеству обрабатываемой поверхности повышались.

        Спиралевидный подход, что принят в Японии - «спираль познания»
            в Японии: знание появляется только на основе практики, опыта в форме интуиции, ощущений и аккумулируется, накапливается только при работе коллективов:
                - Через обобществление, путем описания интуитивных ощущений по аналогии с другими знаниями;
                - Обобщением разнородного опыта и поиском закономерностей;
                - Выработкой языков, систем и теорий для точного и явного выражения знания.


Критерии качества программного обеспечения:
    Качество и его оценка в случае с программным обеспечением вычислительных систем – это сложное, не формализуемое и не имеющее однозначной оценки понятие.
        Тем не менее, отрасль «управление и оценка качества» складывается, и как следствие формируются необходимые понятия и представления на основе научных трудов, стандартов корпораций и отраслевых государственных стандартов.

Основные характеристики качества ПО описаны в стандарте ISO 9126: это функциональность, юзабилити, поддерживаемость, эффективность,  масштабируемость, надёжность.

Внешние факторы качества

    1)Функциональность;2)Корректность;3)Своевременность;4)Простота использования;
    5)Расширяемость;6)Повторное использование/масштабируемость;7)Совместимость;8)Переносимость;
    9)Обслуживаемость/поддерживаемость;
    10)Эффективность; 11)Устойчивость/надёжность

Рассмотрим внешние факторы качества программного обеспечения (т.е. не только приложений, но и различных библиотек или иные API).
            https://www.tstu.ru/book/elib3/mm/2015/loskutov/pages/2_1_vneshnie_faktory_kachestva.html
    - Функциональность. Программное обеспечение не должно уметь больше, чем необходимо, поскольку это делает ее громоздкой для конечного пользователя и осложняет дальнейшее развитие, при этом программное обеспечение должно быть корректным, т.е. делать то, что от него требует пользователь.
    - Корректность. Программное обеспечение должно функционировать в соответствии с техническим заданием, другими словами, должно делать то, что от него ждут и не содержать ошибок.
    - Своевременность. Программное обеспечение должно появляться ровно тогда, когда оно необходимо. Если выход задерживается, то вероятнее всего, в нем уже не будет смысла для конечного пользователя либо он понесет убытки.    
    - Простота использования. Освоение программного обеспечения не должно вызывать затруднений для конечного пользователя.

    - Расширяемость. «Software must be soft» — программное обеспечение должно быть гибким, т.е. развиваться в соответствии с потребностями пользователей.
    - Повторное использование. Любой компонент программного обеспечения должен обладать возможностью повторного использования. Это помогает избежать дублирования кода и «размножения ошибок».
    - Совместимость. Программное обеспечение должно корректно работать в окружении другого программного обеспечения.
    - Переносимость. Программное обеспечение должно легко переноситься между различными вычислительными системами.

    - Обслуживаемость - мне кажется это тоже должно быть. Но почему-то этого пункта нигде нет.

    - Устойчивость. Нештатные и аварийные ситуации, которые могут возникнуть во время эксплуатации программного обеспечения вычислительных систем, не должны приводить к плачевным последствиям.
    - Эффективность — это способность программного обеспечения как можно меньше зависеть от ресурсов оборудования [1]. Программа должна работать за приемлемое время на как можно более широком круге вычислительных систем (имеются в виду различные по производительности конфигурации, но одной и той же платформы).    
    

    Википедия:
        Ка́чество — философская категория, выражающая совокупность существенных признаков, особенностей и свойств, которые отличают один предмет или явление от других и придают ему определённость. Качество предмета или явления, как правило, не сводится к отдельным его свойствам. Оно связано с предметом как целым, охватывает его полностью и неотделимо от него. Поэтому понятие качества связывается с бытием предмета. Предмет не может, оставаясь самим собой, потерять своё качество. Например, переход в новое качество.
            Лёд - имеет качество - превращаться в воду (но превратившись в воду, теряет такое качеств и теряется такой предмет)

        Качества - выражается характеристикой.

        Показатель качества может выражаться в различных физических единицах измерения (например, секунда, метр, м², м³, км/ч, грамм, вольт, ватт, и др.), условных единицах измерения (балл, рубль, FLOPS, процент избирателей и др.), а также быть безразмерным (вероятность наступления ожидаемого события, и др.).

        В настоящее время категорию качества обычно определяют с помощью понятия свойства. Свойство есть любой признак, относительно которого предметы могут быть сходны между собой или отличаться один от другого, т.е. форма, величина, цвет, объем и т.п. 
        --- Для каждого данного предмета свойства подразделяются на существенные и несущественные. 
            ----- К несущественным свойствам предмета относят те, которые предмет может приобретать или терять, оставаясь в то же время все тем же самым предметом. 
            ----- Существенным называют такое свойство, утрачивая которое предмет перестает быть самим собой, становится чем-то иным. Совокупность или система существенных свойств предмета и есть его качество. Именно качество определяет существование предмета как особой сущности, отличной от других, и детерминирует его свойства, проявляющиеся в отношениях с другими предметами.

        Локк разделяет все качества на первичные – присущие самим телам (плотность, протяженность, форма, движение или покой и число) и вторичные – не присущие самим по себе вещам, а представляющие собой лишь ощущения субъекта (цвета, звуки, вкусы и т. п).

        https://terme.ru/termin/kachestvo.html
        Качестов - фигурирующая в философии еще с античных времен (входит в четверку базовых категорий познания, отобранных Аристотелем) философская категория, выражающая то, что присуще всем материальным явлениям и отличает их от других явлений, а именно: совокупность свойств, структурность, функциональность Под качественными изменениями подразумевают те изменения в свойствах и характеристиках вещи, которыми предопределяются существенные изменения ее самое.

        Термин качество продукции имеет несколько различных определений, например:
            - В стандарте ГОСТ 15467-79[1]: совокупность свойств продукции, обусловливающих её пригодность удовлетворять определённые потребности в соответствии с её назначением.
            - В стандарте ИСО 8402—86[2]: «Качество — совокупность свойств и характеристик продукции или услуги, которые придают им способность удовлетворять обусловленные или предполагаемые потребности потребителя».
            - В стандарте ГОСТ Р ИСО 9000-2015[3]: «Качество — степень соответствия совокупности присущих характеристик объекта требованиям».
            - В учебнике Огвоздина В. Ю.[4]: Качество продукции — это совокупность объективно присущих продукции свойств и характеристик, уровень или вариант которых формируется при создании продукции с целью удовлетворения существующих потребностей.

        Дело в том, что в науке уже есть понятие, которое означает способность товара или услуги соответствовать предъявляемым требованиям (удовлетворять потребности):
            в экономике это понятие названо термином полезность (англ. utility)[9];
            в политической экономии это понятие названо потребительной стоимостью, которая также определена как полезность[10];
            в энциклопедическом словаре Вебстера качество, подходящее для применения, также определено как полезность[11].


            Иначе говоря, способность качества предмета удовлетворять потребности называется не качеством, а полезностью. В этом понятии выражаются не сами по себе свойства вещей, а отношения людей к этим свойствам. Наглядным примером понятия «полезность» может быть наше отношение к лекарственным препаратам, каждый из которых, обладая своим собственным качеством (свойствами и характеристиками), может быть полезен одному и бесполезен или, более того, вреден другому. В связи с принятыми в науке определениями качества и полезности[5][9][10][11], соотношение между этими понятиями можно выразить следующей формулой: полезность = качество + удовлетворение потребностей. 
--------------------------------------------------------------------------------------------------------------------------------------------------
16. Покрытие кода. Метрики.

    Code Coverage Methods
    Following are major code coverage methods:
        Statement Coverage - прохождение проверка условий if/else swich/case итд. Процент = (проверяемые условия/всего условий)*100%. Каждое условие должно проверяться хотя-бы один раз.
            What is covered by Statement Coverage?
                Unused Statements
                Dead Code
                Unused Branches
                Missing Statements
        Decision Coverage - Цель тестирования покрытия решений состоит в том, чтобы охватить и подтвердить весь доступный исходный код, проверяя и гарантируя, что каждая ветвь каждой возможной точки принятия решения выполняется по крайней мере один раз.
            - Each entry and exit point is invoked
            - Each decision takes every possible outcome
            - Each condition in a decision takes every possible outcome
            - Each condition in a decision is shown to independently affect the outcome of the decision.
        Branch Coverage
        Toggle Coverage
        FSM Coverage (Finite State Machine)


        https://www.tstu.ru/book/elib3/mm/2015/loskutov/pages/4_3_metody_strategii_belogo_jashhika.html
                        - Покрытие операторов
                            - Обязательное но не достаточное. Каждый оператор должен быть выполнен хотябы 1 раз.
                        - Покрытие решений/переходов
                        - Покрытие условий
                        - Критерий покрытия условий и решений.

        --------
        - Cчитается, что следует стремиться к покрытию кода на уровне 80 %. Попытки достичь более высокого уровня покрытия могут обойтись слишком дорого, но при этом не принести соответствующей выгоды.
            - Покрытие кода — не панацея: высокий процент покрытия не дает гарантии решения всех проблем, если при этом не тестируются критически важные части приложения или если существующие тесты недостаточно надежны, чтобы заранее отлавливать все ошибки.
            - Покрытие функций: сколько объявленных функций было вызвано.
            - Покрытие операторов: какая доля содержащихся в программе операторов была выполнена.
            - Покрытие веток: сколько выполнено веток контрольной структуры (например, операторов if).
            - Покрытие условий: какая доля логических подвыражений была протестирована на истинные и ложные значения.
            - Покрытие строк: сколько строк исходного кода протестировано.

        - Эти показатели обычно выражаются как количество фактически протестированных элементов, количество найденных в коде элементов и процент покрытия (количество протестированных элементов/количество найденных элементов).
        - Эти показатели взаимосвязаны, но различимы.
--------------------------------------------------------------------------------------------------------------------------------------------------
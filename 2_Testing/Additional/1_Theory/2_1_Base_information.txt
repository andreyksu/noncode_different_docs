http://software-testing.ru/forum/index.php?/topic/28768-voprosy-na-sobesedovanii-dlia-qa-sobesedovanie-dl/


1. Уровни тестирования:
	Компонентное (component)/ модульное тестирование (module, unit testing) — это тестирование отдельных компонентов ПО [IEEE 610];
	Интеграционное тестирование (integration testing) — это тестирование, выполняемое для обнаружения дефектов в интерфейсах и во взаимодействии между интегрированными компонентами или системами.

	Следует также понимать что такое big-bang тестирование, тестирование «сверху вниз», восходящие и инкрементное тестирование;

	Системное тестирование (system testing) — это процесс тестирования системы в целом с целью проверки того, что она соответствует установленным требованиям;
	Приёмочное тестирование (acceptance testing) — это формальное тестирование по отношению к потребностям, требованиям и бизнес процессам пользователя, проводимое с целью определения соответствия системы критериям приёмки (критерии выхода, которым должны соответствовать компонент или система, для того, чтобы быть принятыми пользователем, заказчиком или другим уполномоченным лицом) [IEEE 610], с чего следуют такие виды, о которых желательно не забывать: 
		пользовательское приёмочное тестирование (user acceptance testing);
		производственное приемочное тестирование (factory acceptance testing) — это приемочное тестирование, проводимое на стороне разработчика программного продукта и проводящееся сотрудниками компании-поставщика с целью определить, соответствует или нет компонент или система как программным, так и аппаратным требованиям;
		стороннее приемочное тестирование (site acceptance testing) — это приёмочное тестирование пользователями или заказчиком на своей стороне. Проводится с целью определить как соответствие бизнес-процессу, так и удостовериться, что данная система или компонент удовлетворяет потребностям пользователей или заказчика. Обычно включает в себя проверку как программного обеспечения, так и технической базы;
		эксплуатационное приемочное тестирование (operational acceptance testing) — это эксплуатационное тестирование в фазе приемочного тестирования, обычно выполняемое пользователем и/или сотрудниками с администраторским доступом, в рабочей среде (возможно, симулированой), фокусируясь на функциональных аспектах (восстанавливаемость, поведение ресурсов, устанавливаемость и техническое соответствие).

	Альфа-тестирование (alpha testing) — это моделируемое или действительное эксплуатационное тестирование потенциальными пользователями/заказчиками или независимой командой тестирования на стороне разработчиков, но вне разрабатывающей организации. Альфа-тестирование часто применяется к коробочному ПО в качестве внутреннего приёмочного тестирования;
	Бета-тестирование (beta testing) — это эксплуатационное тестирование потенциальными и/или существующими клиентами/заказчиками на внешней стороне никак не связанными с разработчиками, с целью определения действительно ли компонент или система удовлетворяет требованиям клиента/заказчика и вписывается в бизнес-процессы. Бета-тестирование часто проводится как форма внешнего приёмочного тестирования готового программного обеспечения для того чтобы получить отзывы рынка;
	
2. Когда следует заканчивать тестирование?
	Критерии выхода (exit criteria) — это набор общих и специфичных условий, согласованных заранее с заинтересованными сторонами, для того, чтобы процесс мог официально считаться завершенным. Цель критериев выхода — предотвращение возможности, когда задание считается завершенным, однако еще существуют отдельные незавершенные части задания. Критерии выхода используются для отчетности, а также планирования того, когда остановить тестирование.
	Проще говоря, как критерии входа определяют начало тестирования, так и критерии выхода определяют его окончание и ПО готово к следующему этапу жизненного цикла (внедрение и т.д.).
	
	все заранее предопределенные области ПО как «рисковые» протестированы и такой статус понижен/удален;
	все ошибки тщательно задокументированы и доведены менеджменту/акционерам/заказчикам;
	все тесты с высоким приоритетом пройдены и соответственно помечены как «Pass»;
	все требования документации SRS (Спецификация требований ПО);
	STR утверждено собственником проекта;
	протестирована архитектура ПО;
	ни одна серьезная или критическая ошибки не остаются открытыми;
	90-95% всех тестов сделано.

3. Критерии/условия начала тестирования?
	Критерии входа (entry criteria) — это набор общих и специфичных условий для продолжения процесса с определенной задачей, например, фаза тестирования. Цель критериев входа — предотвращение начала задачи, которое может потребовать больше (бесполезных) усилий, чем на устранение не пройденных критериев входа.
	Проще говоря для Вас, как будущего тестировщика, критерии входа следует понимать как основные условия, которые должны быть выполнены до того, как Вы и Ваша команда могут начать тестирование.
	
	все дефекты, которые относятся к ранним стадиям (проектирования) закрыты и проверены;
	код проверенный с помощью осуществления «Unit» тестов;
	основные функциональные возможности ПО готовы для тестирования;
	имеется документация, которая определяет требования;
	все тестировщики ознакомлены с архитектурой ПО;
	все тестировщики ознакомлены с целями проекта;
	готова среда тестирования;
	доступные для использования билды;
	утверждены план тестирования и/или тестовые случаи.
	
4. Валидация и верификация:
	Реальный вопрос, на который мы ищем ответ: строим ли мы продукт правильно?	
	Процесс верификации (verification) выполняется, чтобы убедиться, что каждый этап жизненного цикла разработки ПО (разработка, тестирование и т.д.) строится на основе предопределенных требований (requirements) и спецификаций (specifications) и без каких-либо отклонений от них. (см. № 7)
	
	Опишите различные мероприятия процесса верификации.
		анализ различных аспектов тестирования (сроки, ресурсы, персонал, стоимость, инструменты тестирования и т.д.);
		покрытие операторов (statement coverage) — процентное отношение операторов, исполняемых набором тестов, к их общему количеству; покрытие условий (condition coverage) — процент исходов условий, которые были проверены набором тестов. 100% покрытие условий требует, чтобы каждое отдельное условие в каждом выражении решения было проверено как Истина и Ложь; покрытие альтернатив (decision coverage) — процент результатов альтернативы, который был проверен набором тестов. Стопроцентное покрытие решений подразумевает стопроцентное покрытие ветвей и стопроцентное покрытие операторов;
		рецензирование (review) — это оценка состояния продукта или проекта с целью установления расхождений с запланированными результатами и для выдвижения предложений по улучшению. Примерами рецензирования могут служить: управленческое рецензирование, неформальное рецензирование, технический анализ, инспекция и разбор;
		разбор (walkthrough) — это пошаговый разбор, проводимый автором документа для сбора информации и обеспечения одинакового понимания содержания документа;
		инспекция (inspection) — это тип равноправного анализа, основанный на визуальной проверке документов для поиска ошибок. Например, нарушение стандартов разработки и несоответствие документации более высокого уровня. Наиболее формальная методика рецензирования и поэтому всегда основывается на документированной процедуре.
		
	Приведите примеры верификации в зависимости от уровней тестирования. (см. № 11)
		Модульное тестирование (unit testing):
			-проверка осуществления проектирования программного обеспечения.
		Интеграционное тестирование (integration testing):
			-тестирование на интеграцию между всеми соответствующими компонентами до того как ПО перейдет к следующему уровню (system).
		Системное тестирование (system testing):
			-обеспечение соответствия системы предопределенным требованиям и спецификации.
		Приёмочное тестирование (acceptance testing):
			-убедитесь, что система отвечает требованиям клиента.
			
			
5. Критичность (severity) — это важность воздействия конкретного дефекта на разработку или функционирование компонента или системы. 

	Критичность ошибки определяется тестировщиком, который обнаружил баг, но перед этим он должен ответить себе на такие вопросы:
	Как эта ошибка будет влиять на процесс тестирования?
	Как эта ошибка будет влиять на клиента?
	Как эта ошибка влияет на систему?
	Как эта ошибка влияет на сроки тестирования?
	Блокирует ли эта ошибка другие тесты?
	И т.д.

	Каждая компания может определить свою собственную шкалу для степени критичности (серьезности), но есть несколько уровней, которые используются почти всеми командами:
	Blocker/show-stopper (блокирование) — ПО или конкретный компонент не подходит для использования/тестирования (полный отказ, краш системы и т.д.) и нет обхода.
	Примеры: система рухнет, когда пользователь нажимает кнопку «Пуск»; система не запускается после повреждения инсталлятора; отключение ПО, вызванное аппаратными сбоями.
	Critical (критический) — главная функциональность не работает как надо, есть обходной путь, который может повлиять на целостность испытаний.
	Пример: ПО может рандомно крашиться, используя различные функциональные возможности; ПО вырабатывает противоречивые результаты, основные требования не удается подтвердить.
	Major (важный) — поражение незначительных функциональностей, нет влияния на другие компоненты, и есть быстрый и действующий обход.
	Пример: Пользователь не может использовать определенную функциональность напрямую, но может использовать ее же, воспользовавшись доступом к ней из разных модулей.
	Minor (второстепенный, незначительный) — незначительное воздействие на определенном месте, нет необходимости создавать обходной путь, целостность ПО не затронута.
	Примеры: ошибки орфографии, улучшения, запрос на изменение
	
6. Можно ли начинать тестирование без рабочей сборки?

7. Что такое матрицы трассировки?
	Для измерения покрытия требований, необходимо проанализировать требования к продукту и разбить их на пункты. Опционально каждый пункт связывается с тест кейсами, проверяющими его. Совокупность этих связей — и является матрицей трассировки (traceability matrix). Проследив связи, можно понять какие именно требования проверяет тестовый случай.

	Тесты не связанные с требованиями не имеют смысла. Требования, не связанные с тестами — это «белые пятна», т.е. выполнив все созданные тест кейсы, нельзя дать ответ реализовано данное требование в продукте или нет.
	
8. Что такое тестирование на основе рисков?
	Определяются наиболее важные части системы, затем устанавливается порядок их тестирования, затем следует, собственно, тестирование.
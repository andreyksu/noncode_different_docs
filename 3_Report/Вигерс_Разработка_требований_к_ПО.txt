Глава 1
	- На ошибки внесенные на этапе сбора требований приходится 40-50% всех дефектов обнаруженных в программе (Davis 2005)

	Требования должны быть всегда приоритезированны (к ближайшему будущему - высокоприоритетные, среднему промежутку - среднеприоритетные, и к гипотетическому - низкоприоритетные). И задокументированны! 
			Поечему-то нет слов про важность требований - есть только понятие базовые требования. Дальше по тексту есть приоритезация US и UC - по частоте использования, критичности для бизнеса итд. (стр.192)

		Требования - это спецификация того, что должно быть выполнено/реализованно. - Все требования должны соответствовать бизнес-цели.
			В них описано поведение системы, свойства или ее атрибуты.
			Они могут служить ограничениями в процессе разработки системы.
		Требования к продукту:
				Бизнес требования - высокоуровневая бизнес цель заказчика или организации.
				 	Описывают почему организации нужна такая система, т.е. какие цели планируется достигнуть с помощью системы или ПО (Снижение затрат, повышение прибыли итд тип).
				Пользовательские требования - задача, которую определенные классы пользователей должны иметь возможнсть выполнять в системе или требуемый атрибут продукта.
					Кроме целей и задач, что должны быть выполнены пользователем для достижения бизнес-цели заказчика, еще описывают и характеристики, что могут приносить пользу самому пользователю удовлетворение от работы.
					Так же описывает, что пользователь должен иметь возможность делать с системой (может быть описано в виде UserSotry или UseCase) - Пример: пользователь должен иметь возможность зарегистрироваться на посадку в самолет.
					Также кроме пользователя могут быть требования др. "заинтересованных лиц"
					Часто фиксируются в виде (Вариантов использования или Пользовательских Историй)
				Функциональное требование - описание требуемого поведения системы в определенных условаиях.
					Описывает, что разработчик должен реализовать, что бы пользователи выполняли свои задачи (пользовательские требования) в рамках бизнес-требований.
					Содержит слова "Должен", "Должна" - Пример:	у пассажира должна быть возможность распечатать посадочные талоны на все рейсы на которые он зарегисрирован. Если в профиле пассажира не указаны предпочтения, по выбору места, система резерварования должна сама назначить ему место.
				Системные требования - Требования верхнего уровня к продукту, состоящему из многих подсистем, кторые могут представлять ПО или совокупность ПО и оборудования.
					Может описывать требования к протоколу, отзывчивости итд
				БизнесПравила - корпоративная политика, государственная, законодательные ограничения.
					По сути могут вылеваться в новые требования.
				Атрибуты качества (Quality Attributes) - уровень поддерживаемости и облуживаемости, восстановления после сбоя итд
				Характеристика (Feature) - это набор логически связанных функциональных требования, кторые предоставляют ценность для пользователя и удовлетворяют бизнес-цели. Однако нужно пониимать, что не всегда эти требования высокоприоритетны - Пример: закладки в браузере, проверка орфографии в браузере.

				Функциональне требования документируются в спецификации требований к ПО(software requirement specification) - описание ожидаемого поведения системы указывается как можно полное (шаблон стр. 223-234)
					Именно данные требования используются тестировщиками, разработчиками и рук. проектом - в том числе для планирования и для оценки рисков.

			Порядок формирования требований:
				Требования к ПО состоят из 3х уровней - бизнес-требования, пользовательские и функциональные.
				> На основе выявленной бизнес-потребности, требования рынка или интересной концепции менеджеры продукта или маркетологи определяют бизнес-требования
					>После чего, аналитики работая с представителями пользователей - выявляют пользовательские требования. Каждое новое пользовательское требование должно быть сопоставлено бизнес-требованию. (Как потом сказано в Главе 8, пользовательские требования описываются с виде UC и US).
						>На основе пользовательских требований - аналитики или менеджеры продукта определяют функции, которые дадут возможность пользователям выполнять их задачи, во имя удовлетворения бизнес целей.
				Разработчикам необходимы функциональне и нефункциональные требования чтобы создать решение с желаемой функциональностью, не выходя за рамки налагаемых ограничений.
				!!!Тестировщики определяют, как проверять правильность реализации требований (примемочные тесты если это US, функциоанльные тесты если это UC).

				Именно куратор, менеджер проекта должен принимать решение расширять ли рамки текущего проекта или итерации, что бы включить новое требование. Это решение которе оказывает влияние на график и бджет проекта, и за которого может придется пожертвовать др. возможностями. Т.е. это гарантирует, что именно правильные люди принимают решение.


		Требования к проекту:
			Документ, где описана среда разработки, ограничения бюджета, руководство пользователя или требования для выпуска продукта и продвижение его в поддерживаемую среду, планирование по проекту, информация о тестировании.
				Описывают
					- физические и аппаратные ресурсы, оборудование.
					- потребности в обучении
					- требования и процедуры для выпуска продукта и сборок.
					- вопросы по сртификации итд итп

		Последовательность Разработки требований:
			- Выявление (elicitation) - определение классов ожидаемых пользователей; понимание задач и целей, и бизнес-целей, которым соответствуют эти задачи; изучение среды в которой будет использоваться данная система.
			- Анализ (analysis) - анализ информации полученной от пользователей (отделение функциональных от нефункциональных требований что были озвучены); детализация высокоуровневых требований до нужного уровня; распределение требований по комопнентам, согласование приоритетов реализации
			- Документирование (specification)
				Спецификации требований - для пользовательских и системных требований. Документ о концепциях и границах - содержит безнес-требования. Пользовательские требования - содержатся в пользовательских требованиях.
			- Утверждение/проверка (validation) - согласование с гр. разработки; разработка приемочных тестов, которые должны подтвердить, что разработанный продукт на основе требований удовлетворить поставленные бизнес-требования.
					Здесь важна итеративность - уточнение, детализация итд.

		Управление требованиями:
			- Версионность требований - так же определение основной версии требований соответствующих определенному выпуску продукта/версии или итерации.
			- Оценка влияния предполагаемых треований и внедрение одобренных требований в проект.
				Цель - снизить разрушительное влияние на проект от изменений в требованиях.
			- Обновление планов проекта в соответствии с изменениями в требованиях


		Общие выдержки:
			30-50% общего бюджета расходуется на переделку уже готового
			70-85% стоимость передлок связанных с ошибками в требованиях. Крупные переделки не несут ничего кроме растраты и разочарования. При переделках, то что было протестированно уничтожается и приходится занова.
			Часто проблема возникает из за недостаточного вовлечения пользователей не только на этапе выявления но и при оценке результатов итерации (необходимо демонстрировать, обсуждать и корректировать - опять же понимать с кем).
			Часто требования разростаются по ходу проекта - необходимо каждый раз анализировать а удовлетворяют ли он безнес-требованиям, перед тем как включить новые требования.
			Часто реализовываются фичи и бантики - а без учета пользователя потребностей пользователя, а возможно это не имеет ценность для него, возможно стоит потратить на его реальные потребности, что помогут быть ему более эффективным.
		

Глава 2 Требования с точки зрения клиента

	Структура исследуемого предприятия
		Нужно обязательно выявить структуру предприятия, выяснить кто является бенифициантом системы и в какой форме. Т.е. пользователь, заказчик, др. отделы которые возможно непосредственно не будут иметь контакт с системой, но могут зависить от нее или влять на нее и ее внедрение.
		В любом случае любые требования должны удовлетворять бизнес-цели и ограничениям.

	Куратор требований:
		На  самом раннем этапе проекта нужно выделить ответственного за принятие решений в области требований - Куратр (это может быть рук. или владелец продукта, а может быть представителем заказчика).
		 	Именно он определяет и решает что включать, чем рисковать при выпуске продукта, определяет вектор итд.
			Также нужно определить правила принятия решения - которые описывают порядок принятия решения - как и кто принимает решение(голосованием, единолично итд) - и должны быть поставлены в известность все лица

	Соглашение по требованиям:
		- клиенты должны подтвердить, что требования удовлетворяют их потребности
			Когда требуется завизировать требования, необходимо дать разъяснения, что требования являются базовыми и возможны изменения в них, в изменением сроков и ресурсов проекта.
		- разработчики подтверждают, что понимают требования и способны их реализовать.
		- тестировщики подтверждают, что требования поддаются проверке
		- руководство подтверждает, что требования соответствует их бизнес-цели.

Глава 3 Рекамендуемые приемы формулирования требований
		См. пункте "Последовательность Разработки требований" в главе 1. - на самом деле это итеративный подход - на каждом этапе как правило приходится совершать шаг назад. При анализе будет ясно, что нужно уточнить ряд требований и дополнит, при документировании возможно потребуется что-то дополнительно проанализировать, что бы закрыть пробелы в знаниях итд.

		Примерный процесс создания требований(стр. 52) - попунктно и довольно подробно.

		Последовательность действий подходящих большенству проектов:
			1. Определить бизнес-требования
			2. Определить классы пользователей
			3. Определить представителей пользователей
			4. Определить лиц, ответственных за принятие решений по требованиям (это уже относится к внутренней кухне разработки)
			5. Спланируйте выявление требований
			6. Определите пользовательские требования (часто в Виде Вариантов использования или Пользовательских Историй)
			7. Определите приоритет пользовательских требований
			8. Сформулируйте пользовательские требования
			9. Выведите функциональные требования
			10 Смоделируйте требования
			11. Определите атрибуты качества
			12. Пересмотрите требования
			13. Разработайте прототип
			14. Разработайте или расширьте архитектуру
			15. Распределите требования по компонентам
			16. Разработайте тесты на основе требований
			17. Проверьте пользовательские, функциональные, нефункциональные требования, модели анализа и прототипы.


		Детализация "Последовательность Разработки требований"
			Выявление требований:
				- Определение концепции продукта и границ проекта.
					Документ содержит:  бизнес-требования к продукту. Концепции, кторые помогут понять заинтересованным лицам назначение продукта. Границы, которые определяю что реализоваывать в этой версии продукта, а что в следующей.
						Концепция от версии к версии остается постоянно, а вот границы меняются от версии к версии.
				- Определение классво пользователей и их характеристик:
					Можно разделить по: частоте работы с ПО, использыемым функциям, уровню привелегий и опыту работы итд. Так же стоит описать их обязанности, местоположение, и личные характеристики - что могут повлиять на архитектуру ПО.
				- Выбор сторонника продукта в каждом классе пользователей:
					Как праило выбирается самый позитивно настроенные и влиятельный, если даже не политически то энтузиазмом.
				- Работа с пользователями для выяснения назначения продукта:
					Выяснить какие задачи пользователем требуется выполнить средствами ПО и какую пользу хотят извлечь. Так же как клиент должен взаимодействовать с системой для выполнения каждой задачи.
				- Определение системных событий и реакции на них
					Какие сигналы происходят/приходят к системе и как она должна на них реагировать. Какие сигналы генерирует сама система или может быть отчеты автомтаические.
				- Проведение интервью для выявления требований (на едине)
				- Проведение совместных семинаров (это уже совместные семинары по выявлению требований)
				- Наплюдение за пользователями на рабочих местах.
					Строятся диаграммы рабочих потоков и диаграммы потоков данных. Позволяет выявить этапы и принимаемые решения. Позволяет увидеть взаимеодействие пользователей. Все это позволяет адаптировать под текущий процесс.
				- Анализ документов:
					Документация и описание текущих процессов, исследование конкуретнов, информация о текущих система. Все это должно помочь определиться что оставить из существующего, что исключить...
				- Изучение отчетов о проблемах рабтающих систем с целью поиска новых идей
					По сути выявление что хотели бы увидеть пользователи в новых системах, что по их мнению является бесполезным итд. Т.е. пользователю просто проще делать сравнение чем делать анализ с нуля.

			Анализ требований:
				Очень пользно представить требования в разных представлениях - текстуально, в графическом виде, в виде тестов. Часто позволяет проанализировать что не хватает в требованиях или найти противоречивость.
				- Моделирование среды приложения:					
				- Создание пользовательского интерфейса и технических прототипов:
				- Анализ осуществимости требований:
				- Определение приоритетов требований:
					Нужно для того, что бы команда реализовывала именно необходимые требования в первую очередь.
				- Создание словаря данных:
				- Моделирование требований:
					Создание диаграмм и визуализация требований
				- Анализ интерфейсов между системой и внешним миром:
				- Распределение требований по подсистемам:

			Спецификации требований:
				- Внедрение шаблонов документов требований:
					Создайте стандартыне шаблоны документов
				- Определение источников требований:
					Вероятно будет полезно для понимания кто из пользователей был инициатором этого требования. Было сформированно на базе вариантов применения или пользовательских историй.
				- Присвоение уникальных идентификаторов всем требованиям:
				- Документирование бизнес-правил:
					корпаративные политики, правительственные распоряжения итд
				- Определение нефункциональных требований:
					Производительность, надежность, удобство использования, возможность внести изменения.

			Проверка требований:
				- Рецензирование требований
				- Тестирование требований
				- Определение критериев приемки (приемочные тесты)
					Проконсультироваться с пользователям, как бы они првоерили, что система соответствует их ожиданиям.

			Управление требованиями:
				- Определение процесса управления изменениями
				- Анализ влияния изменений требований
				- Создание базовой версии и управление версиями требований.
				- Ведение журнала ведения требований.
				- Отслеживание состояния всех требований
					Отложено, реализованно итд итп
				- Создание матрицы связи требований.

			Управление проектом:
				- Выбор цикл или  модери разработки
				- Планирование подхода к работе с требованиями
				- Оценка усилий на работу с требованиями					
				- Планы реализации проетка должны быть основаны на требованиях
					Планируйте время на основе времени реализации функциональных требований что определены на основе первоначальной концепции продукта и границах проекта.
				- Опрделение лиц, ответственных за принятие решений по требованиям
					Кто будет устроянть противоречия в полученной информации от пользователя,  оценить запросы на изменения.
				- Пересмотр обязательств по проекту при изменении требований
					Команда принимает обязательство предоставить определенные наборы требований в рамках определьнно бюджета за определенное время - и при добавлении или изменении времени, нужно учесть что и время и бюджет может поплыть.
				- Анализ, документирование и управление рисками, свазанными с требованиями
					Выяснить и задокументировать требования связанные с требованиями, и неоходимо предотвратить или минимизировать вероятность их возникновения.
				- Извлечение уроков из прошлого.

Глава4
	Вода про свойства аналитика и его характеристики - кого брать и как обучать.

---------------------
Часть 2 Разработка требований

Глава 5 Определение бизнес-требований
			Требования не соответсвующие бизнес-цели проекта, РЕАЛИЗОВЫВАТЬСЯ не должны.

	Формулировка бизнес-требований
		Бизнес требования:
			В основе лежат, бизнес возможности, бизнес цели, критерии успеха, положения о концепции.
				Важно при выявлении бизнес-требований оценить всех участников бизнеса. Если заказчик является магазин то у него цель побольше продать, а у покупателя цель быстрее купить и выгоднее. Соответсвенно аппарат или терминал, что заказывает магазин должен удовлятворять ну или не сильно противоречить различным участникам процесса.
		Концепция продукта:
			Краткое описание планируемого продукта, который нацелен на достижение поставленных бизенс-целей. Стратегия продукта.
			Убедитесь, что концепция решает задачу.
			Меняется медленно, в основном из за изменения или детализации бизенс-требований или стратегии продукта.
			Границы - показывают на какую часть концепции будет направлена текущая итерация продукта.
		Границы проекта:
			Показывает на какую часть концепции продукта будет направлена так. итерация, так же отображает что в рамках проекта из концепции а что во вне проекта.
			Изменяется более динамично чем конецпция. Меняется каждую итерацию.

	Шаблон документа о концепциях и границах
		Бизнес требования
			- Исходные данные
				Содержатся обоснование или содержание нового продукта. Возможно описываются предистории или причини приведшие к потребности.
			- Возможности бизнеса
				Описываются бизнес-задачи которые решеются посредством этого продукта, или бизнес-процессы, для улучшения которых требуется продукт, а также среду, в которой система будет испльзоваться.
				Описываются и сравниваются конкурирующие решение и преимущества тек. продукта. Опишите потребности не только пользователей тек. заказчика но и для всего рынка, дабы возможно было писать перимущества.	
			- Бизнес-цели
				Важные преимущества бизнеса, предоставляемые продуктом в количественном и измеряеомом виде. Пример: достигнуть объема продаж на Х% за Y месяцеов итд.
				Имея перечень бизнес-целей, задайте себе вопрос "что мешает нам достичь этот ориентир" - что бы определить более подробную бизнес-задачу. "А задачем нам вообще важне этот оринетир" - что бы лучше понять бизнес-задачу. При наличии бизнес-задачи - "Как определить что задача решена." и так далее пока не полуится получить список функций кторые позволят решить задачи для достижения целей.
				Хорошо показано на стр.95(114)
			- Критерии успеха
			- Положение о концепции проекта
				Хорошее описание на стр.97(116)
			- Бизнес-риски
				Важно разделять бизнес-риски от рисков проекта.
			- Предположения и зависимости
				При определении целей итд итп, люди ставят предположения: Пример: новый сайт должен увеличить посещаемость посетителей на 200 пользователей в день и тратить их по 2$.
				Однако стоит задать вопрос, а что елси мы не достигним этих целей. Здесь нужно задуматься и о рисках.
				Так же стоит указать зависимость от партнеров или от предписаний регулирующих органов.

		Рамки и ограничения проекта
			Когда создается новый хим. элемент химик описывает что получается и не получается в результате этой реакции. Так же в рамках проекта стоит определить его рамки и ограничения: что может делать система, а что не может.
			Границы проекта описывают концепцию и круг действий предложенного решения.
			В ограничениях указывается определенные возможности которые не будут включены в продукт (по причине дороговизны или выходящие за предполагаемые границы продукта).
			Границы должны быть указаны как на верхнем уровне при определении - какие бизнес-цели преследовать. И на низком уровне границы определяются на уровне функций, пользовательских историй, вариантов использования или событий и реакции на них. И на каждом уровне границы не должны выходить за рамки более высокого уровня. Пользовательские требования должны соответствовать бизнес-целям. А функциональные требования - пользовательским в заданных границах.
			- Основные функции
				Выделить основные функции продукта, что выгодно отличает от предыдущех проектов и от конкуретнов. Исключить функции  что возможно интересны, но не приносят пользы.
			- Объем превоначально запланированной версии
				Нужно избегать включение в первые версии продукат, все функции, или функции что должны когда-то быть реализованны. Нужно выбрать важные функции, нацеленные на массовую аудиторию - дабы больше найти поддержки. Так же сказано, что пусть по функционалу будет реализованно не так много, сколь эта часть будет завершенной и стабильной. Что принесет поддержку у пользователей. Также стоит сделать основной упор именно на архитектуре.
			- Объем последующих версий
				Стоит подготовить план на следующие итерации. Чем будет дальше по срокам план, тем границы его будут более расплывчатыми. В этом плане лучше испльзовать короткие итерации, они дадут эффект от частоты показа, и накопленных замечаний пользователей.
			- Ограничения и исключения
				Если, что то не должно быть включено в одну из версий, или по чему-то была достигнута договоренность, то обязательно нужно указать: "Данная возможнсоть в будущей/текущей версии поддерживаться не будет"

		Бизнес-контекст
			Профили заинтересованных лиц
			Приоритеты проекта
			Особенности развертывания

		Отображения границ в графическом виде:
			Контекстная диаграма:
				Отображает конечные внешине элементы по отношению к системе взаимодействуют с системой, какую информацю получают и передаеют. Здесь важно без указания детализации системы итд. Важно указать внешние объекты, систему и какие потоки данных протекают между ними.
			Карта экосистемы:
				Отображает с какими системами (ПО или железом) работает программа.
			Дерево функций:
				Отображает дерево функций до L3. L2 это подфункция L1, L3 - Это подфункция L2.
			Список событий:
				Отображате какие события приходят от систем или пользователей, какие события генерируются автоматически по таймеру итд. Но не описывает как на них реагировать.
				Хорошо сочленять с "Картой экосистем"

		Не забывайте о границах
			Границы это не смитирельная рубашка, это структура. И границы могут меняться, если того требует удовлетворение заказчика и бизнес-целей.
			Выдвигая новое требования, нужно задаваться вопросом, а попадает ли оно в границы проекта?			
			Именно бизнес цели рождают границы.

Глава-6 Как отобрать пользователей для работы над проектом.
		Отбор пользователей для работы над проектом.
			По частоте использования продукта и по опытности (для неопытных важно упорядоченность и подсказки, для опытных важены клавиатурыне сочетания и настраиваемость)
			По рангу и заинтересованности, возможности принять политическое решение во благо продвижения продукта.
			Вычисление игнорирующих и негативных.
			Кроме прямых пользователей и косвенных важно рассмотреть тех же админов или внедренцев, на легкость установки и настройки.

		Определение класса пользователей
			Начните с МОЗГОВОГО ШТУРМА - далее группировать и классифицировать, выявляя общие задачи и цели. Тут важно не пропустить ни один класс.
			Хорошим источником может служить структурную схему предприятия/оргштатка (класс пользователей может находиться в разных отделах, а в отдном отделе несколько классов пользователе)
			После выделения классов пользователей хорошо составить - образ/архетип пользователей т.е. типичного представителя.

		Если среди пользователей или фокус группы есть фантазеры и др. подобные личности, то вас захлестнет волна сложных и мало потребных функций. Нужно привлекать именно все виды и классы пользователей. Особенно четко понимая, какие основне фичи нужны.

		Так же нужно выделить ответственного за принятие решения при спорных требованиях приоритетах, человека ответственного за принятие решения. Быть может это будет продутОвнер.

Глава-7	Выявление требований
		Выявление требований это совместный аналитический процесс, который включает - сбор, обнаружение, извлечение и определение требований.

		При выявлении требований, нужно попытаться понять из чего проистекают данные требования, чем они пораждены итд.
		Нужно понимать, почему система должна выполнять те или иные требования, может это уже требования устаревшей системы.
		Результат этапа формулирования требований - это согласованное представление о потребностях всех заинтресованных в проекте лиц.
		Концентрация на ключевых моментах и процессах а не на интерфейсе пользователей, внимение к потребностям а не к хотелкам.

		Основные методы:
			Интервью
			Семинары
			Наблюдение
			Опросный лист
			Изучение документации (корпаративные стандарты, описание процессов итд тип). В документах могут быть описаны просессы или др. вещи, о которых пользователь не знал, а все выполнялось по кнопке текущей системы. Но есть риск - устаревшая документация, по факту уже все поменялось, но доку не поправили.

			Перед встречей с пользователями, бывает полезно подготовить модели. Для пользователей бывают удобными и легко-воспринимаемыми: варианты использования и потоки процессов. Пользователям проще поправить текущую модель чем придумывать новую.

		Действия после выявления требований:
			Рассылка протоколов
			Документирование открытых проблем (можно в BugTrack или в IssuTracker)

		Классификация представленной информации:
			Бизнес требования
				Хорошее описание стр. 156(175)
			Идеи решения
			Требования к данным
			Ограничения
			Требования к внешним интерфейсам
			Атрибуты качества
			Функциональные требования
			Бизнес-правила
			Пльзовательские требования

		Нужно избегать подразумеваемых требований или самособой разумеющееся. Ибо можем получить, что у каждого свое разумение свое и получим иное от предполагаемого, или кто то вообще может не подумать об этом и это не будет реализованно.

		Поиск упущенных требований (перечитывая уже написанные требования, как правило очень тяжело найти то что пропустили):
			- Раскладывать высокоуровневые требования на низкие (позволит еще раз проанализировать, что и как)
			- Проанализировать что у каждого класса пользователей есть хотябы одно требование от которого они выигрывают.
			- Проверка пограничных значений
			- Визуализация требований - в море требований  часто теряешься, по этой причине визуализация даст более полный и наглядный вид.
			- Создайте набор требований характерный для программ: протоколирование ошибок(журнал ошибок), отчетность, архивирование и восстановление данных, конфигурирование пользовательских параметров.
			- Создание модели данных - каждый вид данных/объектов должен от куда-то браться, а здесь можно пронаблюдать цикл и проследить кейсы.

				!!!Не тратьте слишком много времени на анализ, а не пропущено ли что то.

Глава 8 Как понять требования пользователей:
		
		Два варианта формирования требований:
			Пользовательские истории
			Варианты использования.
				Т.е. это два варианта, что позволяет ориентироваться не на ПО а на задачах пользователя и его взаимодействии с ПО в результате чего он получит выгоду.
				Опять же это подходит для приложений, сайтов итд. Допустим для авто-мойки не подходит - здесь 1-2 кейса пользовательских - помыть машину, но внутри функций море (управление двигателями, компрессорами, шампунь итд итп т.е. тут именно системные требования).

			Вариант использования (use case) - описывает последовательность взаимодействия системы и внешнего действующего лица, в результате которого действующее лицо получит полезный результат. (Здесь может быть не пользователь, а система).
				Шаблон описания: Глагол + Объект.				
			
			Пользовательская история - краткое, простое описание функции с точки зрения человека, которому нужна эта возможность.
				Как <тип пользователя>, я хочу <цель>, чтобы <причина>

			Система отслеживания химикатов:
				UC: Заказать химикат
				US: Как химик я хочу заказать химикат, чтобы выполнять эксперементы.

			Название UC -> дисскусия -> Спецификация UC -> Анализ -> Функциональные требования -> Тесты (помогают определить, правильно ли реализован вариант исплоьзования)
			US -> дисскусия -> Уточненные US (набор более мелких и направленных историй) -> Дисскусия -> Приемочные тесты (помогает выявлять вариации базовой пользовательской истории - варианта использования)

			UС - представляет более подробные сведения о том, как пользователь представляет себе взаимодействие с системой для решения задачи.
			US - представляет краткую формулировку потребностей пользователя.
			Книги Cohn-2011, Leffingwell-2011 в части US и UC.

		UC
			Кто или что уведомляется, если что-то происходит внутри системы?
			Кто или что предоставляет системе информацию или сервисы?
			Кто или что помогает системе среагировать и выполнить задачу?

			Диаграмма: система заключается в прямоугольник - что дает понимание внутренней части системы(кейсы) и внешней части системы(пользователи, др. системы)

			Вариант использования - это отдельное, независимое действие, которое действующее лицо может выполнить для получения определенного значимого результата. Один вариант исплоьзования может охватывать несколько схожих действий с одной целью.
			Сценарий - это описание одно случая использования системы. Т.е. вариант это набор сценариев, а сценарий отдельный пример варианта использования.

			Шаблон UC - рис. 174
				Обязательно должны быть описаны исключения(в банкомате нет денег, у поставщиков(ни у одног) нет соответствующего продукта, разрыв сети итд) - от сюда и тесты, если нет денег тоооо..., если нет продукта у поставщиков то....

			При описании UС могут быть уточнены и безнес-правила. 

		Определение UC:
			- Определение действующих лиц -> бизнес процессы поддерживаемые системой -> варианты испльзования для действий в которых участвуют действующие лица и система
			- Выразить бизнес процесс в терминах определенных сценариев -> обобщение сценариев в варианты использования -> определение действующих лиц для варианта использования.
			- Ответ на вопрос "Какие задачи должна система выполнить, чтобы реализовать этот процесс или преоборазовать данны в выходные" - эти задачи могут быть вариантами использования.
			- Определить внешние события, на которые система должна реагировать, а затем соотнести эти события с участвующими лицами и конкретными вариантами использования.
			- Ответ на  вопрос "Какие цели нужно каждой из внешних сущностей достичь и сипользование системы?"

		Хорошо подготовить на базе вариантов использования - концептуальные вараинты тестирования без завязки на интерфейс. Помогает понять, как система должна реагировать при тех или иных ситуациях. Так же создавались тесты которые не были покрыты тек. функциоанльными кейсами. 
			Что самое важно на стр. 188. В гибкой разработке функциональные требования могут быть заменены приемочными тестами.

		Многи считаю UC - именно функциональными требованиями. А разработчики реализуют именно не бизнес-треования, ни пользовательские требования, а именно функциональные требования реализуют и отдельные фрагменты поведения системы.

Глава 9 Бизнес правила:
		При выявлении требований важно не забыть про бизнес-правила (требования законодательства, корпаративной политики итд) - они в свою очередь вырождаются в функциональные требования.

Глава 10 Документирование требований:
		> У требования должен быть уникальный идентификатор.
		> Если по требованию еще не достаточно информации, то такое требование должно быть помечено, что оно требует уточения и что его не стоит брать в разработку.
		> Требования не должны содержать примеры интерфейса, максимум наброски в схематическом виде.

		Шаблон/спецификации описан на стр. 225

Глава 10 Пишем идеальные требования:
		- Единственный путь улучшения навыков написания требований - есть опыт. Лучший способо ускорения навыка - это подружиться с СА и вести взаимное рецензирование, что поможет добиться более внятных требований и структурированности.
		- При написании требований - требование должно быть задокументированно не только на естественном языке, но и в графическом или ином способе. Т.е. требование должно интерпретироваться разными людьми одинаков, и соответствовать цели автора. Это куда важно чистаты или условной приверженности определенному стилю.

		Системная или пользовательская точки зрения:
			Нужно разделять два этих подхода и не смешивать их:
				- "Система должна"
					Пример общего шаблона:[необязательное предварительное условие][необязательный тригер события] система должна [ожидаемая реакция системы]
					"Если запрошенный химикат есть на складе химикатов, система должна отобразить список всех хранимых на складе контейнеров с указанным химикатом" - здесь нет тригера.
				- "Пользователь должен"
					Пример общего шаблона:[Класс пользователя или действующего лица] должен иметь возможность [выполнить что-то] [с каким-то объектом][условие выполнения, время отклика или декларация качества]
					"Химик должен иметь возможность повторно заказывать любой химикат, который он ранее заказывал, путем извлечения и редактирования параметров ранее введенного заказа"

		Язык и стиль:
			Первым формулируется цель/потребность/функциональность
			Потом детали (обоснование, источник, приоритет и др. атрибуты требований)
			Наличие диаграмм, таблиц  - позволяет оживить монотонное перечисление требований.
			Не обозначать одно понятие разными требованиями - дабы не ввести путаницу.

		Основные  пункты что помогут сделать требования более ясными:
				Ясность и лаконичность
				Ключевое слово "должна" - shall
					Слово "Должна" - описывает четкое говорит о требуемой функциональности. Не нужно применять разные формулировки: "обязана, надлежит, будет"
				Испльзуйте активный залог:
					стр. 245-246
				Раздельные требования:
					Участники не должны видеть длинные повествоватеьлные предложения, кторые содержат несколько требований и выделять из них отдельные требования. Такие предложения изночально должны быть разбиты на различные требования с предварительным состоянием итд итп.

		Уровень детализации
			- Высокоуровневое треование доложно быть разбито на столь мелкие, что бы они объясняли и дополняли суть происходящего.
				Все еще зависит от того, кто будет привлекаться к разработке внутренная группа или внешняя, кто к тестированию, их опыт итд
			- Мера покрытия требования тестами - если тестов для покрытия требования требуется ни очень большое количество - то уровень детализации выбран верный.

		Способы представления:
			Текствое представление является основным но важно его дополнять еще и таблицами, и графической информацией.
			Важно представить как сгруппировать однотипные требования.

		Предотвращение неоднозначности:
			- Неоднозначные слова. Используйте только те термины, что даны в глоссарии, и избегайте из синонимов.
			- Не используйте наречие - они привносят субъективность. (Уместно, разумно, приблизительно, обычно) стр. 250
			- Точная формулировка и указание границ, на пограничных значениях
			- Не использовать негативные, отрицающие требования.

		Предотвращение неполноты:
			Ориентация на выявлении пользовательских задач, а не на функций системы помогает не упустить функциональность. Использование моделей анализа также помогает обнаружить пропущенные требования.
			Для представления сложной логики испльзуйте таблицы и деревья принятия решений.
			В конце главы даны примеры и разбор неудачных требований стр. 255-259

Глава 12: Лучше один раз увидеть, чем 1024 раза услышать!
		Важно представлять информацию не только в текстовом виде, но и визуальными способами (таблицы, графические модели анализа, прототипы пользовательского интерфейса, приемочне тесты, деревья и таблицы решений):
			- Диаграмма потока данны (data flow diagrams DFD)
			- Диаграмма рабочих потоков, такие как диаграммы swimlane
			- Диаграмма переходов состояний (state-transition diagrams, STD) и таблицы состояний
			- Карты диалоговых окон
			- Таблицы и деревья решений
			- Таблицы событий и реакций
			- Деревья функций
			- Диаграммы вариантов использования
			- Диаграммы процессов
			- Диаграммы сущность-связь (entity-relationship diagrams ERD)
			на стр. 263 хорошая табличка, которая помогает связать пожелания пользователя к модели.

		Выбор правильного представления:
			На странице (стр. 265) показана детальная информация по тому какая информация должна быть представленна определенным способом.

		Диаграмма потоков данных:
			- Позволят определять процессы преобразования системы, совокупность [хранилище]данных или материалов, которыми система управляет, и потоки данных или материалов между процессами, хранилиами и внешним миром.
				Хорошо отображает как данные перемещаются в системе.
				Люди и системы выполняют процесс, в которых используются, изменяются и производятся данные, по этому UC или диаграмма swimlane не в состоянии показать весь цикл жизни того или иного элемента данных.
				Но подробности преобразования данных в процессе лучше видны в диаграммах UC и swimline.
			- Контекстная диаграмма по сути является верхнеуровневой диаграммой по отношению к диаграмме потоков данных. В частности, кружок, что означает систему вцелом, разделяется на отдельные процессы и уже описывается какая информация ходит внутри, т.е. мы берем контекстуню диаграмму и расписываем уже внутренности, при этом оставляя видимо все остальное как есть, просто детализирова/расписав систему на более мелкие процессы.(по конекстной диаграмме см. главу 5).
				При необходимости, производится детализация еще ниже, берется конкретный кружок(процесс) и детализируется уже на отдельной диаграмме аналогичным способом. До момента пока нельзя будет представить виде теста, диаграммы swimline, или диаграммы действий.
				Функциональные требования уже точно определят, что происходит внутри каждого простейшего процесса.
			на стр. 270 есть рекамендации.

		Диаграммы swimlane:
			Один из способов представления шагов, из которых состоит бизнес-процесс или операции предлагаемой программной системы. Это вариант блок-схемы, разделенной на видимые подкомпоненты, которые нразываются дорожками. Дорожки могут представлять разные системы или действующих лиц, которые выполняют шаги процесса. Данные диаграммы чаще всего применяются для отображения бизнес-процессов, последовательности процессов или взаимодействия системы и пользователя. 
			Показывают, что происходит внутри кружка в диаграмме потоков данных.
			Здесь могут быть отображены те терминальные элементы, что не видны на контекстной диаграмме а следовательно и на диаграмме потоков данных, но видны на диаграмме экосистемы.

		Диаграмма переходов состояний и таблицы состояний:
			позволяет получить лаконичное, полное и недвусмлесленное представление о состоянии объекта или системы. Она наглядно показыват возможные переходы между состояниями.

		Карта диалоговых окон:
			Нужно перечитать.

		Таблицы и деревья решений (стр. 281):
			Это хорошие способы документации требований (или бизнес-правил), позволяющие не пропустить ни одну комбинацию условий.

		Таблицы событий и реакций:

		UML диаграммы:
			Далается акцент, на том, что применяется при ООП подходе в разработке.
			Как мне показалось, Все верхние диаграммы дублируют UML.
		
Глава 13. Опеределение требований к данным:
		Моделирование отношений данных:
			Диаграмма сущность связь - entity-relationship diagrams ERD. В UML аналогом выступает модель данных.
			Но у ERD есть плюс, в виде связи, которая говорит/подсказывает какого вида связь.

		Словарь данных:
			Можно  сформировать таблицу данных, что будет содержать параметры, ограничения, описания данных. В одном месте. Допустим ФИО. Его длина итд.

		Спецификация отчетов:
			стр. 300-305

Глава 14 Обратная сторона функциональности: атрибуты качества ПО.
	SMART: Specific-конкретными, Measurable-измеряемыми, Attainable-достижимими, Relevant - актуальными, Time-sensitive - ограниченными во времени.

		Как лекго использовать
		Как быстро он работает
		Как редко отказывает
		Как ведет себя в в неожиданных ситуациях.

		Атрибуты качества:
			- Встроенные системы: 								производительность, эффективность, надежность, устойчиваость, безопасность, эргономика.
			- Интернет-приложения и корпаратинвные приложния:	доступность, целостность, функциональная совместимость, производилельность, масштабируемость, безопасность и удобство использования.
			- Настольные и мобильные системы:					производительност, безопасность, удобство и простота использования

		Атрибуты качества делятся на внешние (видимые/оцениваемые пользователем) и внутренние
			см. стр.312 расписано детально, а с 317 по 340 идет полное подробное пояснение этих терминов.

		Изучение атрибутов качества:
			- Важно при выявлении US или UC поинмать и согласовывать с пользователями, какие атрибуты качества являются важными и критичными в данном кейсе. Важно так же трассировать или отображать эти требования/ограничения на дигараммах UC, US или ссылаться/привязываться к функциональным.
			- Так же, так как атрибуты качества могут идти в разрез между по тем или иным причинам. Необходимо приоритезировать их.
			- Есть ряд вопрос, что бывает полезно задать пользователяю см. стр 315 + задать вопрос, что по их мнению является неприемлимым.

		Атрибуты качества могут служить источником функциональных требований! Пример: система должна подавать сигнал когда она работает на автономном источнике питания, допустим для системы дыхания у медиков.

		Так как атрибуты качества могут быть причиной по изменению архитектуры или др. важных фундаментальных частей, атрибуты качества нужно выявлять на раннем этапе.

Глава 15: Прототипы как средство снижения риска.
		Различают 
			Одноразовые прототипы - прототипы которые идут лишь на показ, не имеющие дальнейшее продолжение. Не обязательно программаная реализация, моежт быть даже наброски.
			Эволюционные прототипы - прототипы, что страятся с хорошим анализом, с проработкой архитектуры и др. основопологающих вещей. Т.е. становится основой для дальнейшей разработки. Так же может служить для оценки возможности построения той или иной архитектуры, т.е. апробации.

		При создании прототипа нужно избегать дискусий на тему цвета црифта, фона итд. Важно получить ответную реакцию, так ли поняли пользователя, уточнить что-то, понять реакцию пользователя.
		Можно готовить прототип как шаги вариантов использования.

		Для оценки прототипа важно привлекать как опытных пользователей так и новичков, так как новичкам может понравиться простота использования а опытным может не нравиться отсутствие каких-то возможностей.

		Как вариант можно применять средства разработки одноразового прототипа отличные от тех, что применяются для продукта. Для того, чтобы избежать ситуации когда будут требовать оставить одноразовый прототип на испльзование (так как изначально для его проектирования не уделялось должное внимание качесту кода итд, и оно не может быть основой для дальнейшей работы.)
			Опять же плюс такого подхода - избежать зацикленности на деталях. Можно сразу присекать такие попытки, аргументируя отличием.

Глава 16: Определение приоритетов требований:
		Приоритеты - это способ разрешения борьбы между конкурирущющими требования за ограниченные ресурсы.
		При определении приоритетов необходимо учитывать:
			- потребность клиентов
			- относительная важность требований для клиентов;
			- посоедовательности, в которой должны предоставляться функции;
			- затраты на удовлетворение каждого требования.
			- технический риск
			- Сложность реализации
			итд

		Хорошо разделять приоритеты на два вида:
			Важный - важный для бизнеса
			Срочный - срочно к сроку.

		Много воды, но суть в том, что нужно оценивать требования не только как срочные, но и как объект требующие ресурсы, несущие риск итд.

Глава 17: Утверждение требований:
	Уровни тестирования и соответствие видом треобваний/работ.

		Приемочные тесты - пользовательские требования
		Тесты системы(системыне тесты) - на функциональных требованиях
		Тесты целостности (интеграционные тесты) - на архитектуре системы (Дизайн)
		Модульные тесты(unit) - разработка.

		Тесты на этапе разработки требований дают:
			Устранение неясности и неоднозначности в трактовке требований
			Пропуски в спецификации требований к ПО
			Доработка и уточнение требований исходя из выявленных недоработок (недообследования или анализа только со стороны созидания а не деструктивного характера)
			Согласованность и непротиворечивость.
			Соответствие потребностей, ограничений и требований
			Проверяемость требований.
			см. стр. 400 Контрольный список дефектов

		Верификация - позволяет определить соответствует ли требованиям продукт (т.е. продукт разработа в соответствии с требованиями)
		Аттестация/утверждение - требования удовлетворяют потребность клиентов.

		Экспертиза - один из действенных способов проверки качества документа
			Неформальная экспертиза - чтение отдельными людьми без обсуждения, может выполняться в ходе знакомства с продуктом (риски: требования могут остаться понятыми по разному, т.к. читает один и не обсуждает)
			Формальная - в виде совещания и обсуждения. Участвующие лица
				Автор или его представители
				Представитель заказчика
				Люди что будут выполнять работу на базе этих требований
				Люди отвечающие за работу продуктов

		Тестирование требований:
			Концептуальные варианты использования - на базе вариантов использования.

		Примемка пользователем/заказчиком.
			Приемочные тесты стр. 411.

Глава 18: Повторное использование требований:
	Пропустил.

Глава 19: От разарботки требований к следующим этапам:
		Для оценки времени на разарботку требований предлагается использовать прошлый опыт (предыдущих проектов)	

		Три показателя:
			Процент общей работы.
					Пердполагается 15% на аналитику. Т.е. из 1000часов на проет, затраты на аналитику 150ч.
			Отношение разработчик - бизнес-анатлитик.
					6:1 т.е. 1 аналитик рождает требования для загрузки 6х программистов.
					Для тиражируемых 3:1
			Разбиение действий (получают оценки "снизу вверх").
					Оценка числа рабочих потоков. пользовательских историй, экранных форм, отчетов


				Именно требования определяют запланированный объем работы по проекту, план, семты и графики следует разрабатывать на совен требовний.
					Однако следует помнить, что наиболее важный результат проекта - это та система, которая соответствует бизнес-целям, а не та, что реализована в соответствии со всеми требованиями.

		Оценка размера проекта и объема усилий на основе требований:
			Базовый размер проекта можно ценить на основе функциональных требований, пользовательских историй, моделей анализа, прототипов или элементов пользовательского интерфейса
				- количество отдельно тестируемых требований
				- баллый функций
				- баллы историй
				- количество, тип исложность элементов пользовательского интерфейса
				- оценка строк кода, необходимых для реализации отдельных требований.

		!!! Оценки нужно постоянно обновлять, так как проект и вводные постоянно двигаются, то и оценки должны быть корректируемыми.

		Часто решение по архитектуре(дизайн) накладывает ограничиняи и вместе с тем раскрывает новые моменты, что могут повлиять на сроки.
			Предлагается делать дизайн до начала реализации конкретного компонента, при этом имея общий дизайн на все ПО - пусть и укрупленный и без детализации но этот дизайн - архитектура должна быть.
			Дизайн отображает все функциональные требования и не включает ничего лишнего. стр. 445

!!!стр.447 От требований к тестированию - перечитать

Глава 20: Проекты гибкой разработки:
	Водопадная:
		Проблемы возникают из за невозможности подстраиваться под изменения которые присущи всем проектам (изменения в требованиях от пользователя, изменения в векторе развития итд). Т.е. когда мы сформировали полныей и объемный перечень требований, внести изменения в такой набор становится невозможным.

	Гибкая:
		Основной отличительной чертой является постоянная адаптация под меняющиеся условия и требования заказчика, под меняющиеся приоритеты заказчика. Демонстрация и получение обратной связи.
		Задача - поставка ПО в конце итерации, даже если сделана 1/1000 части ПО - но эта часть должна быть способна работать в продакшене.

	Так как водопадная модель предполагает вовлечение клиента лишь на стадии выявления и формирования требований а так же на этапе приемки - во время разработки приходится более детально детализировать требования, которые описывают все детали.
	Так как в гибкой разработке заказчик принимает участие на и в разработке, требования могут быть детализированы менее подробно. В некоторых пользовательских историях может предоставляться немного подробностей, а детально описываться только самая рискованная и важная часть функциональности, обычно в виде приемочных тестов.

	- Гибкая разрабтка содержит Резерв (backlog) - списко запросов, что нужно выполнить. Обычно содержит пользовательские истории, но часто наполняются бизнес-процессами или дефектами. Расстановка приоритетов в резерве выполняется регулярно, одни задачи переносятся на следующие итерации, другие отпрасываются.
	- В гибкой разработке не выявляются и не детализируются все требования, в выявляются высокоуровневые требования - обычно в виде пользовательских историй - и заполняется ими РЕЗЕРВ проекта, что бы сразу можно было начать планирование и расстановку приоритетов.

	Пользовательская история (глава 8) - это краткое утверждение, которое выражает потребность пользователя и служит исходной точной для общения с целью выявления деталей.

	Пользовательская история, которая не укладывается по реализации в одну итерацию называется Epic - для ее реализации разбивают на более мелкие истории (т.е. декомозируя), до такой степени, что бы можно было уложиться в одну итерацию (реализовать и протестировать).

	Функция - это группа возможностей системы, которая представляет ценность для пользователя. В гибкой разработке функция может относиться к одной истории или ко множеству (функция увеличения в фотоаппарате, важна и для матери и для геодезов)


Глава 21: Проекты по доработке или замене системы:
	Виды:
		- В существующую путем - добавление новой фунциональности, исправление дефектов, изменение текущей фунцкиональности (из за изменения бизнес-правил или законодательства).
		- Путем создания новой (на базе существующей)

	Как правило проекты уже не имеют достаточную спецификацию требований или они достаточно устаревшие и не актуальны. И основная проблема при всем этом - это знакомство с системой происходит через сам софт или код, и при таком знакомстве можно пропустить важный функционал, или упустить основные бизнес-цели, что приведет в последствии к включению желаемого функционала но не столь нужного для решения бизнес-целей. Так же встречается протест пользователей при замене - так как они уже привыкли к существуующей системе.

	Выполняемые реботы:
		- Создание дерева функций для предоставления изменений:
			Отражает, что будет добавлено, а что удалено.
		- Определение классов пользователей (стандартно как и при разработке новой системы)
		- Определение бизнес-процессов (стандартно)
		- Определение бизнес-правил (стандартно)
		- Создание вариантов использования и пользовательских историй (стандартно)
			~ Понять что пользователь должен иметь возможность делать в системе.
			~ Как пользователь представляет себе поведение новых функуций.
			~ Определение приоритетов функциональности
		- Создание контекстной диаграммы  (стандартно)
		- Создание карты экосистемы (стандартно)
			~ Задокументировать внешние сущности
			~ Расширить существующие интерфейсы, добавив в них поддержку новых функций.
		- Создание карты диалоговых окон (стандартно)
		- Создание моделей данных (стандартно)
			~ Определение, достаточна ли тек. модель данных для добавления новых функций или расширить ее.
			~ Просмотреть, какие данные нужно трансформировать, конвертировать или архивировать.
		- Определение атрибутов качества
		- Создание таблиц отчетов
			~ Доработка существующих отчетов из за изменения фцнкциональности
		- Создание прототипов.


	Как всегда - приоритеты(всему) выставляются исходя из бизнес-целей. 
		Здесь ничего не меняется, по отношению к разрнаботке новой системы.

	Какие требования нужно изучать в существующей системе?:
		Предлагается изучить на первом шаге требования только в части измеенния, дальше раширять область.

Глава 22: Проекты с серийными продуктом:
	Полистал, но по сути пропустил.

Глава 23: Проекты выполняемые сторонними организациями:
	В основном идет посыл к большей и тщательной работе по формализации и детализации того, что отдается на сторону др. организации. Дабы избежать недопонимания, простому контролю выполнения и приемки ибо без детализации будет сложно говорить о приемке.

Глава 24 Прпоекты автоматизации бизнес-процессов:
	Первое это - моделирование бизнес-процессов. Определяются какие задачи пользователю требуется выполнять средствами системы.
	Описываются бизенс-процессы что выполняеются сейчас, и формируются будущие бизнес-процессы, то как будет вестись работа при наличии сисетемы. (стр. 498 попунктно)

Глава 25 Проекты бизнес-аналитики:
	Бизнес аналитика в данном контексте в общем раскрывается с разрезе предоставления отчетности (как по прошедшему времени так и прогнозируемые отчеты)

	Важно  понять как будет использоваться информация и кем.
	
	Важно определить источники данных, режим хранения и обработки данных.

Глава 26 Проекты встроенных и других систем реального времени:
	Требования определяются не только к ПО но и к железу..

	Полезно применение контекстных деаграмм, диаграмм переходов состояний, таблица событий и реакций, архитектурная диаграмма.

	Важно понмить про требования к временных характеристикам и атрибутам качества (стр. 526)

Часть 4
Глава 27 Приемы управления требованиями ПО:
	В основном работают Соглашения и Договоренности в рамках проекта.
	Ничего нового не написано.

Глава 28 Изменения случаются:
	Запросы на изменения должны идти по тому же циклу, что и разработка треобвний (создание, утверждение, планирование, возможные риски итд).

	Процедура анализа влияния изменений:
		- Понимание возможных последствий изменений (архитектура, дизайн, код, тесты, требования [конфлитк])
		- Определение задач необходимых для решения изменений, оценка времени, условий.

	Список контрольных вопросов помогающие оценить вносимые изменения (стр. 569)

	Построить дорожную карту с трассировкой, где именно в ПО реализованно требование или бизнес-правило.
	

Глава 29 Связи в цепи требований:
	Для отслеживаемости, каждое требование должно быть уникально и идентифицированно, что бы можно было ссылаться на него однозначно.

	Виды:
		Потребности клиента(бизнес цели, потребности рынка, пользовательские требования) отслеживаются в ПРЯМОМ направлении к требованиям, что бы отследить какие требования меняются при изменении потребностей.
		В ОБРАТНОМ направлении - от требования к потребностям, дабы понять из чего родилось данное требование.

	Поиск пропущенной связи:
		Обнаруржение пропущенных требований - нужно поискать требования без связи (пользовательское или функциональное).

	Вообще нужно вести полную тассировку, иначе смысла нет (начиная от пользовательских требований через функциональные на тесты), на каждом этапе должен быть ответственный за трассировку. Изменения должны так же сопровождаться обновлением трассировки.
	Сильно помогают специализированные инструменты, кторые помечают/маркируют связанные требования при редактировании одного из связанных.

Глава 30 Инструментальные средства разработки требований:
	Пропустил.

Глава 31 Совершенствование процессво работы с требованиями:
	стр. 606-630

Глава 32 Требование к ПО и управление рисками:
	стр. 630-643